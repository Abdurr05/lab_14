
c:/Users/Abdurrahman/Documents/labs/lab_14/target/3.0.0/argon/lab_14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005b74  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9b90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e4ac  000d9b94  0001e4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002dc  2003e514  2003e514  0002e514  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9bfc  000d9bfc  00029bfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9c24  000d9c24  00029c24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023dffd  00000000  00000000  00029c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020b34  00000000  00000000  00267c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00047ac7  00000000  00000000  00288759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003638  00000000  00000000  002d0220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000ad48  00000000  00000000  002d3858  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00045c8a  00000000  00000000  002de5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000579e3  00000000  00000000  0032422a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00130a10  00000000  00000000  0037bc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a008  00000000  00000000  004ac620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 faab 	bl	d8588 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fab3 	bl	d85a4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e4ac 	.word	0x2003e4ac
   d4048:	000d9b94 	.word	0x000d9b94
   d404c:	2003e514 	.word	0x2003e514
   d4050:	2003e514 	.word	0x2003e514
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 fa75 	bl	d754c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d9b60 	.word	0x000d9b60
   d407c:	000d9b84 	.word	0x000d9b84

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 bca8 	b.w	d49d4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fd93 	bl	d4bb0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 ba1f 	b.w	d74d0 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f002 bf19 	b.w	d6ec8 <malloc>

000d4096 <_Znaj>:
   d4096:	f002 bf17 	b.w	d6ec8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f002 bf1d 	b.w	d6ed8 <free>

000d409e <_ZdaPv>:
   d409e:	f002 bf1b 	b.w	d6ed8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fe58 	bl	d6d60 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6a31 	.word	0x000d6a31

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ca:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40cc:	4608      	mov	r0, r1
   d40ce:	9101      	str	r1, [sp, #4]
   d40d0:	f004 fa9e 	bl	d8610 <strlen>
    if (len + l > buff_size)
   d40d4:	6863      	ldr	r3, [r4, #4]
   d40d6:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40d8:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40da:	18e8      	adds	r0, r5, r3
   d40dc:	4290      	cmp	r0, r2
   d40de:	d808      	bhi.n	d40f2 <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d40e0:	6820      	ldr	r0, [r4, #0]
   d40e2:	9901      	ldr	r1, [sp, #4]
   d40e4:	462a      	mov	r2, r5
   d40e6:	4418      	add	r0, r3
   d40e8:	f004 fa4e 	bl	d8588 <memcpy>
    len += l;
   d40ec:	6860      	ldr	r0, [r4, #4]
   d40ee:	4428      	add	r0, r5
   d40f0:	6060      	str	r0, [r4, #4]
}
   d40f2:	b003      	add	sp, #12
   d40f4:	bd30      	pop	{r4, r5, pc}
	...

000d40f8 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40f8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fa:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40fe:	6003      	str	r3, [r0, #0]
   d4100:	4605      	mov	r5, r0
   d4102:	b17c      	cbz	r4, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4104:	6863      	ldr	r3, [r4, #4]
   d4106:	3b01      	subs	r3, #1
   d4108:	6063      	str	r3, [r4, #4]
   d410a:	b95b      	cbnz	r3, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	689b      	ldr	r3, [r3, #8]
   d4112:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4114:	68a3      	ldr	r3, [r4, #8]
   d4116:	3b01      	subs	r3, #1
   d4118:	60a3      	str	r3, [r4, #8]
   d411a:	b91b      	cbnz	r3, d4124 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d411c:	6823      	ldr	r3, [r4, #0]
   d411e:	4620      	mov	r0, r4
   d4120:	68db      	ldr	r3, [r3, #12]
   d4122:	4798      	blx	r3
   d4124:	4628      	mov	r0, r5
   d4126:	bd38      	pop	{r3, r4, r5, pc}
   d4128:	000d98ac 	.word	0x000d98ac

000d412c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d412c:	b40e      	push	{r1, r2, r3}
   d412e:	b503      	push	{r0, r1, lr}
   d4130:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4132:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4134:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4138:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d413a:	f003 f920 	bl	d737e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d413e:	b002      	add	sp, #8
   d4140:	f85d eb04 	ldr.w	lr, [sp], #4
   d4144:	b003      	add	sp, #12
   d4146:	4770      	bx	lr

000d4148 <_Z8callbackPcPhj>:
bool pressedA = false;
void callback(char* topic, byte* payload, unsigned int length);

MQTT client("lab.thewcl.com", 1883, callback);

void callback(char* topic, byte* payload, unsigned int length) {
   d4148:	b5b0      	push	{r4, r5, r7, lr}
  char p[length + 1];
   d414a:	f102 0308 	add.w	r3, r2, #8
   d414e:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
   d4152:	af00      	add	r7, sp, #0
  char p[length + 1];
   d4154:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
   d4158:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   d415a:	4668      	mov	r0, sp
   d415c:	f004 fa14 	bl	d8588 <memcpy>
  p[length] = NULL;
   d4160:	2300      	movs	r3, #0
   d4162:	f80d 3004 	strb.w	r3, [sp, r4]
  Serial.printf("%s",p);
   d4166:	f003 fb19 	bl	d779c <_Z16_fetch_usbserialv>
   d416a:	4917      	ldr	r1, [pc, #92]	; (d41c8 <_Z8callbackPcPhj+0x80>)
   d416c:	466a      	mov	r2, sp
   d416e:	f7ff ffdd 	bl	d412c <_ZN5Print6printfEPKcz>
  Serial.println();
   d4172:	f003 fb13 	bl	d779c <_Z16_fetch_usbserialv>
   d4176:	f003 f8ce 	bl	d7316 <_ZN5Print7printlnEv>
  if(p[0] == '1'){
   d417a:	f89d 3000 	ldrb.w	r3, [sp]
   d417e:	2b31      	cmp	r3, #49	; 0x31
  char p[length + 1];
   d4180:	466d      	mov	r5, sp
  if(p[0] == '1'){
   d4182:	d103      	bne.n	d418c <_Z8callbackPcPhj+0x44>
    digitalWrite(D7, HIGH);
   d4184:	2101      	movs	r1, #1
   d4186:	2007      	movs	r0, #7
   d4188:	f004 f823 	bl	d81d2 <digitalWrite>
  }
  if(p[0] == '0'){
   d418c:	782b      	ldrb	r3, [r5, #0]
   d418e:	2b30      	cmp	r3, #48	; 0x30
   d4190:	d103      	bne.n	d419a <_Z8callbackPcPhj+0x52>
    digitalWrite(D7, LOW);
   d4192:	2100      	movs	r1, #0
   d4194:	2007      	movs	r0, #7
   d4196:	f004 f81c 	bl	d81d2 <digitalWrite>
  }
  display.clearDisplay();
   d419a:	4c0c      	ldr	r4, [pc, #48]	; (d41cc <_Z8callbackPcPhj+0x84>)
   d419c:	4620      	mov	r0, r4
   d419e:	f002 f8c5 	bl	d632c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d41a2:	4620      	mov	r0, r4
   d41a4:	2101      	movs	r1, #1
   d41a6:	f001 fe40 	bl	d5e2a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d41aa:	2200      	movs	r2, #0
   d41ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41b0:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(p);
   d41b4:	4629      	mov	r1, r5
   d41b6:	4620      	mov	r0, r4
   d41b8:	f003 f8b9 	bl	d732e <_ZN5Print7printlnEPKc>
  display.display();
   d41bc:	4620      	mov	r0, r4
   d41be:	f002 fb21 	bl	d6804 <_ZN16Adafruit_SSD13067displayEv>
}
   d41c2:	46bd      	mov	sp, r7
   d41c4:	bdb0      	pop	{r4, r5, r7, pc}
   d41c6:	bf00      	nop
   d41c8:	000d8764 	.word	0x000d8764
   d41cc:	2003e5d4 	.word	0x2003e5d4

000d41d0 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d41d0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41d2:	f002 fc35 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41d6:	4b03      	ldr	r3, [pc, #12]	; (d41e4 <_ZN10CloudClass7processEv+0x14>)
   d41d8:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d41da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d41de:	f002 be5b 	b.w	d6e98 <spark_process>
   d41e2:	bf00      	nop
   d41e4:	2003e7d4 	.word	0x2003e7d4

000d41e8 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41e8:	6803      	ldr	r3, [r0, #0]
   d41ea:	b12b      	cbz	r3, d41f8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d41ec:	6842      	ldr	r2, [r0, #4]
   d41ee:	4293      	cmp	r3, r2
   d41f0:	d202      	bcs.n	d41f8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d41f2:	4618      	mov	r0, r3
   d41f4:	f004 b9b2 	b.w	d855c <atoi>
   d41f8:	2000      	movs	r0, #0
   d41fa:	4770      	bx	lr

000d41fc <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d41fc:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41fe:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4200:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4202:	b145      	cbz	r5, d4216 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4204:	6843      	ldr	r3, [r0, #4]
   d4206:	429d      	cmp	r5, r3
   d4208:	d205      	bcs.n	d4216 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d420a:	4628      	mov	r0, r5
   d420c:	f004 fa00 	bl	d8610 <strlen>
   d4210:	3001      	adds	r0, #1
   d4212:	4405      	add	r5, r0
   d4214:	6025      	str	r5, [r4, #0]
        }
   d4216:	4620      	mov	r0, r4
   d4218:	bd38      	pop	{r3, r4, r5, pc}
	...

000d421c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d421c:	b538      	push	{r3, r4, r5, lr}
   d421e:	4604      	mov	r4, r0
   d4220:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4222:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4226:	6825      	ldr	r5, [r4, #0]
   d4228:	4a04      	ldr	r2, [pc, #16]	; (d423c <_ZN10BlynkParam3addEi+0x20>)
   d422a:	1a09      	subs	r1, r1, r0
   d422c:	4428      	add	r0, r5
   d422e:	f002 fe63 	bl	d6ef8 <snprintf>
   d4232:	6863      	ldr	r3, [r4, #4]
   d4234:	3001      	adds	r0, #1
   d4236:	4403      	add	r3, r0
   d4238:	6063      	str	r3, [r4, #4]
    }
   d423a:	bd38      	pop	{r3, r4, r5, pc}
   d423c:	000d8767 	.word	0x000d8767

000d4240 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4240:	b538      	push	{r3, r4, r5, lr}
   d4242:	4604      	mov	r4, r0
   d4244:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d4246:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d424a:	6825      	ldr	r5, [r4, #0]
   d424c:	4a04      	ldr	r2, [pc, #16]	; (d4260 <_ZN10BlynkParam3addEl+0x20>)
   d424e:	1a09      	subs	r1, r1, r0
   d4250:	4428      	add	r0, r5
   d4252:	f002 fe51 	bl	d6ef8 <snprintf>
   d4256:	6863      	ldr	r3, [r4, #4]
   d4258:	3001      	adds	r0, #1
   d425a:	4403      	add	r3, r0
   d425c:	6063      	str	r3, [r4, #4]
    }
   d425e:	bd38      	pop	{r3, r4, r5, pc}
   d4260:	000d876a 	.word	0x000d876a

000d4264 <BlynkWidgetWrite1>:
BLYNK_WRITE(V1) {
   d4264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String text = param.asStr();
   d4266:	6809      	ldr	r1, [r1, #0]
   d4268:	4668      	mov	r0, sp
   d426a:	f002 ffd9 	bl	d7220 <_ZN6StringC1EPKc>
  client.publish("ksa",text);
   d426e:	9a00      	ldr	r2, [sp, #0]
   d4270:	4904      	ldr	r1, [pc, #16]	; (d4284 <BlynkWidgetWrite1+0x20>)
   d4272:	4805      	ldr	r0, [pc, #20]	; (d4288 <BlynkWidgetWrite1+0x24>)
   d4274:	f000 fffd 	bl	d5272 <_ZN4MQTT7publishEPKcS1_>
  String text = param.asStr();
   d4278:	4668      	mov	r0, sp
   d427a:	f002 ff86 	bl	d718a <_ZN6StringD1Ev>
}
   d427e:	b005      	add	sp, #20
   d4280:	f85d fb04 	ldr.w	pc, [sp], #4
   d4284:	000d876e 	.word	0x000d876e
   d4288:	2003e574 	.word	0x2003e574

000d428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d428c:	b508      	push	{r3, lr}
        state = CONNECTING;
   d428e:	2300      	movs	r3, #0
   d4290:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4292:	6800      	ldr	r0, [r0, #0]
   d4294:	f003 fd84 	bl	d7da0 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d429c:	f002 bb52 	b.w	d6944 <BlynkNoOpCbk>

000d42a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d42a4:	188f      	adds	r7, r1, r2
   d42a6:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d42a8:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d42aa:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42ae:	4606      	mov	r6, r0
   d42b0:	4689      	mov	r9, r1
   d42b2:	4690      	mov	r8, r2
    if (it >= param.end())
   d42b4:	f080 80c2 	bcs.w	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d42b8:	a805      	add	r0, sp, #20
   d42ba:	880d      	ldrh	r5, [r1, #0]
   d42bc:	f7ff ff9e 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
   d42c0:	6803      	ldr	r3, [r0, #0]
   d42c2:	429f      	cmp	r7, r3
   d42c4:	f240 80ba 	bls.w	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42c8:	9805      	ldr	r0, [sp, #20]
   d42ca:	7803      	ldrb	r3, [r0, #0]
   d42cc:	2b41      	cmp	r3, #65	; 0x41
   d42ce:	d149      	bne.n	d4364 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   d42d0:	3001      	adds	r0, #1
   d42d2:	f004 f943 	bl	d855c <atoi>
   d42d6:	2805      	cmp	r0, #5
   d42d8:	dd37      	ble.n	d434a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   d42da:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   d42dc:	f247 2376 	movw	r3, #29302	; 0x7276
   d42e0:	429d      	cmp	r5, r3
   d42e2:	f000 80d3 	beq.w	d448c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   d42e6:	d841      	bhi.n	d436c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   d42e8:	f247 2361 	movw	r3, #29281	; 0x7261
   d42ec:	429d      	cmp	r5, r3
   d42ee:	f000 80a8 	beq.w	d4442 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   d42f2:	f247 2364 	movw	r3, #29284	; 0x7264
   d42f6:	429d      	cmp	r5, r3
   d42f8:	d06b      	beq.n	d43d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   d42fa:	f646 5370 	movw	r3, #28016	; 0x6d70
   d42fe:	429d      	cmp	r5, r3
   d4300:	d141      	bne.n	d4386 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d4302:	4d78      	ldr	r5, [pc, #480]	; (d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4304:	4e78      	ldr	r6, [pc, #480]	; (d44e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   d4306:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d44fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        while (it < param.end()) {
   d430a:	9805      	ldr	r0, [sp, #20]
   d430c:	4287      	cmp	r7, r0
   d430e:	f240 8095 	bls.w	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4312:	7803      	ldrb	r3, [r0, #0]
   d4314:	2b41      	cmp	r3, #65	; 0x41
   d4316:	d14b      	bne.n	d43b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   d4318:	3001      	adds	r0, #1
   d431a:	f004 f91f 	bl	d855c <atoi>
   d431e:	2805      	cmp	r0, #5
   d4320:	dd39      	ble.n	d4396 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   d4322:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d4324:	a805      	add	r0, sp, #20
   d4326:	f7ff ff69 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d432a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   d432e:	4629      	mov	r1, r5
   d4330:	4648      	mov	r0, r9
   d4332:	f004 f963 	bl	d85fc <strcmp>
   d4336:	4601      	mov	r1, r0
   d4338:	2800      	cmp	r0, #0
   d433a:	d13d      	bne.n	d43b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   d433c:	4620      	mov	r0, r4
   d433e:	f003 ff37 	bl	d81b0 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d4342:	a805      	add	r0, sp, #20
   d4344:	f7ff ff5a 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4348:	e7df      	b.n	d430a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d434a:	9805      	ldr	r0, [sp, #20]
   d434c:	3001      	adds	r0, #1
   d434e:	f004 f905 	bl	d855c <atoi>
   d4352:	2800      	cmp	r0, #0
   d4354:	dbc1      	blt.n	d42da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   d4356:	9805      	ldr	r0, [sp, #20]
   d4358:	3001      	adds	r0, #1
   d435a:	f004 f8ff 	bl	d855c <atoi>
   d435e:	300e      	adds	r0, #14
   d4360:	b2c4      	uxtb	r4, r0
   d4362:	e7bb      	b.n	d42dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   d4364:	a805      	add	r0, sp, #20
   d4366:	f7ff ff3f 	bl	d41e8 <_ZNK10BlynkParam8iterator5asIntEv>
   d436a:	e7f9      	b.n	d4360 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   d436c:	f247 7364 	movw	r3, #30564	; 0x7764
   d4370:	429d      	cmp	r5, r3
   d4372:	d04f      	beq.n	d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   d4374:	f247 7376 	movw	r3, #30582	; 0x7776
   d4378:	429d      	cmp	r5, r3
   d437a:	f000 8097 	beq.w	d44ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   d437e:	f247 7361 	movw	r3, #30561	; 0x7761
   d4382:	429d      	cmp	r5, r3
   d4384:	d06f      	beq.n	d4466 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4386:	2300      	movs	r3, #0
   d4388:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d438c:	2202      	movs	r2, #2
   d438e:	9200      	str	r2, [sp, #0]
   d4390:	8b72      	ldrh	r2, [r6, #26]
   d4392:	4619      	mov	r1, r3
   d4394:	e03a      	b.n	d440c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4396:	9805      	ldr	r0, [sp, #20]
   d4398:	3001      	adds	r0, #1
   d439a:	f004 f8df 	bl	d855c <atoi>
   d439e:	2800      	cmp	r0, #0
   d43a0:	dbbf      	blt.n	d4322 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   d43a2:	9805      	ldr	r0, [sp, #20]
   d43a4:	3001      	adds	r0, #1
   d43a6:	f004 f8d9 	bl	d855c <atoi>
   d43aa:	300e      	adds	r0, #14
   d43ac:	b2c4      	uxtb	r4, r0
   d43ae:	e7b9      	b.n	d4324 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   d43b0:	a805      	add	r0, sp, #20
   d43b2:	f7ff ff19 	bl	d41e8 <_ZNK10BlynkParam8iterator5asIntEv>
   d43b6:	e7f9      	b.n	d43ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d43b8:	4631      	mov	r1, r6
   d43ba:	4648      	mov	r0, r9
   d43bc:	f004 f91e 	bl	d85fc <strcmp>
   d43c0:	b128      	cbz	r0, d43ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   d43c2:	4641      	mov	r1, r8
   d43c4:	4648      	mov	r0, r9
   d43c6:	f004 f919 	bl	d85fc <strcmp>
   d43ca:	2800      	cmp	r0, #0
   d43cc:	d1b9      	bne.n	d4342 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   d43ce:	2101      	movs	r1, #1
   d43d0:	e7b4      	b.n	d433c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d43d2:	ab0a      	add	r3, sp, #40	; 0x28
   d43d4:	4945      	ldr	r1, [pc, #276]	; (d44ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   d43d6:	9307      	str	r3, [sp, #28]
   d43d8:	a807      	add	r0, sp, #28
   d43da:	2310      	movs	r3, #16
   d43dc:	2500      	movs	r5, #0
   d43de:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43e2:	f7ff fe71 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d43e6:	a807      	add	r0, sp, #28
   d43e8:	4621      	mov	r1, r4
   d43ea:	f7ff ff17 	bl	d421c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d43ee:	4620      	mov	r0, r4
   d43f0:	f003 ff08 	bl	d8204 <digitalRead>
        rsp.add(analogRead(pin));
   d43f4:	4601      	mov	r1, r0
   d43f6:	a807      	add	r0, sp, #28
   d43f8:	f7ff ff22 	bl	d4240 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d43fc:	9b08      	ldr	r3, [sp, #32]
   d43fe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4402:	3b01      	subs	r3, #1
   d4404:	9300      	str	r3, [sp, #0]
   d4406:	9b07      	ldr	r3, [sp, #28]
   d4408:	462a      	mov	r2, r5
   d440a:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d440c:	4630      	mov	r0, r6
   d440e:	f000 fb0f 	bl	d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4412:	e013      	b.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   d4414:	a805      	add	r0, sp, #20
   d4416:	f7ff fef1 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
   d441a:	6803      	ldr	r3, [r0, #0]
   d441c:	429f      	cmp	r7, r3
   d441e:	d90d      	bls.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d4420:	b2a4      	uxth	r4, r4
   d4422:	2101      	movs	r1, #1
   d4424:	4620      	mov	r0, r4
   d4426:	f003 fec3 	bl	d81b0 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d442a:	a805      	add	r0, sp, #20
   d442c:	f7ff fedc 	bl	d41e8 <_ZNK10BlynkParam8iterator5asIntEv>
   d4430:	1e01      	subs	r1, r0, #0
   d4432:	bf18      	it	ne
   d4434:	2101      	movne	r1, #1
   d4436:	4620      	mov	r0, r4
   d4438:	f003 fecb 	bl	d81d2 <digitalWrite>
    }
}
   d443c:	b00f      	add	sp, #60	; 0x3c
   d443e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4442:	ab0a      	add	r3, sp, #40	; 0x28
   d4444:	9307      	str	r3, [sp, #28]
   d4446:	a807      	add	r0, sp, #28
   d4448:	2310      	movs	r3, #16
   d444a:	4929      	ldr	r1, [pc, #164]	; (d44f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   d444c:	2500      	movs	r5, #0
   d444e:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4452:	f7ff fe39 	bl	d40c8 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d4456:	a807      	add	r0, sp, #28
   d4458:	4621      	mov	r1, r4
   d445a:	f7ff fedf 	bl	d421c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d445e:	4620      	mov	r0, r4
   d4460:	f003 fee3 	bl	d822a <analogRead>
   d4464:	e7c6      	b.n	d43f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   d4466:	a805      	add	r0, sp, #20
   d4468:	f7ff fec8 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
   d446c:	6803      	ldr	r3, [r0, #0]
   d446e:	429f      	cmp	r7, r3
   d4470:	d9e4      	bls.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d4472:	b2a4      	uxth	r4, r4
   d4474:	2101      	movs	r1, #1
   d4476:	4620      	mov	r0, r4
   d4478:	f003 fe9a 	bl	d81b0 <pinMode>
        analogWrite(pin, it.asInt());
   d447c:	a805      	add	r0, sp, #20
   d447e:	f7ff feb3 	bl	d41e8 <_ZNK10BlynkParam8iterator5asIntEv>
   d4482:	4601      	mov	r1, r0
   d4484:	4620      	mov	r0, r4
   d4486:	f003 fee7 	bl	d8258 <_Z11analogWritetm>
    } break;
   d448a:	e7d7      	b.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d448c:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d448e:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4492:	f002 fa59 	bl	d6948 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4496:	4603      	mov	r3, r0
            handler(req);
   d4498:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d449a:	b123      	cbz	r3, d44a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   d449c:	4a15      	ldr	r2, [pc, #84]	; (d44f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   d449e:	4293      	cmp	r3, r2
   d44a0:	d001      	beq.n	d44a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   d44a2:	4798      	blx	r3
   d44a4:	e7ca      	b.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   d44a6:	f002 fa4b 	bl	d6940 <BlynkWidgetRead>
        }
    }
   d44aa:	e7c7      	b.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   d44ac:	a805      	add	r0, sp, #20
   d44ae:	f7ff fea5 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d44b2:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d44b4:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d44b8:	eba3 0109 	sub.w	r1, r3, r9
   d44bc:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d44c0:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d44c2:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   d44c6:	910c      	str	r1, [sp, #48]	; 0x30
   d44c8:	f002 fa48 	bl	d695c <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d44cc:	4603      	mov	r3, r0
            handler(req, param);
   d44ce:	a90a      	add	r1, sp, #40	; 0x28
   d44d0:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d44d2:	b123      	cbz	r3, d44de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   d44d4:	4a08      	ldr	r2, [pc, #32]	; (d44f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   d44d6:	4293      	cmp	r3, r2
   d44d8:	d001      	beq.n	d44de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   d44da:	4798      	blx	r3
   d44dc:	e7ae      	b.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   d44de:	f002 fa30 	bl	d6942 <BlynkWidgetWrite>
    } break;
   d44e2:	e7ab      	b.n	d443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   d44e4:	000d8772 	.word	0x000d8772
   d44e8:	000d8775 	.word	0x000d8775
   d44ec:	000d877d 	.word	0x000d877d
   d44f0:	000d8780 	.word	0x000d8780
   d44f4:	000d6941 	.word	0x000d6941
   d44f8:	000d6943 	.word	0x000d6943
   d44fc:	000d8779 	.word	0x000d8779

000d4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d4500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4504:	b08c      	sub	sp, #48	; 0x30
   d4506:	af04      	add	r7, sp, #16
   d4508:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d450a:	2205      	movs	r2, #5
   d450c:	6800      	ldr	r0, [r0, #0]
   d450e:	1d39      	adds	r1, r7, #4
   d4510:	f002 ff7b 	bl	d740a <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4514:	b3b8      	cbz	r0, d4586 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4516:	2805      	cmp	r0, #5
   d4518:	d004      	beq.n	d4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d451a:	2000      	movs	r0, #0
}
   d451c:	3720      	adds	r7, #32
   d451e:	46bd      	mov	sp, r7
   d4520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4524:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4528:	0a13      	lsrs	r3, r2, #8
   d452a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d452e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d4532:	f8a7 3005 	strh.w	r3, [r7, #5]
   d4536:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d4538:	0a13      	lsrs	r3, r2, #8
   d453a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d453e:	fa1f f883 	uxth.w	r8, r3
   d4542:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d4546:	2900      	cmp	r1, #0
   d4548:	d0e7      	beq.n	d451a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d454a:	793b      	ldrb	r3, [r7, #4]
   d454c:	bb23      	cbnz	r3, d4598 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d454e:	f002 f9f5 	bl	d693c <_Z11BlynkMillisv>
   d4552:	4602      	mov	r2, r0
   d4554:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d4556:	7f60      	ldrb	r0, [r4, #29]
   d4558:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d455c:	b9c0      	cbnz	r0, d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d455e:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d4562:	2901      	cmp	r1, #1
   d4564:	d114      	bne.n	d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d4566:	2b09      	cmp	r3, #9
   d4568:	d00f      	beq.n	d458a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d456a:	2bc8      	cmp	r3, #200	; 0xc8
   d456c:	d001      	beq.n	d4572 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d456e:	2b04      	cmp	r3, #4
   d4570:	d1d4      	bne.n	d451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d4572:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4574:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d4576:	4620      	mov	r0, r4
                state = CONNECTED;
   d4578:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d457a:	f000 fb07 	bl	d4b8c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d457e:	f7ff fe27 	bl	d41d0 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4582:	f002 f9df 	bl	d6944 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d4586:	2001      	movs	r0, #1
   d4588:	e7c8      	b.n	d451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d458a:	2303      	movs	r3, #3
   d458c:	7763      	strb	r3, [r4, #29]
                break;
   d458e:	e7c5      	b.n	d451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4590:	1f58      	subs	r0, r3, #5
   d4592:	bf18      	it	ne
   d4594:	2001      	movne	r0, #1
   d4596:	e7c1      	b.n	d451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4598:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d459c:	d903      	bls.n	d45a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d459e:	4620      	mov	r0, r4
   d45a0:	f7ff fe74 	bl	d428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d45a4:	e7ef      	b.n	d4586 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d45a6:	f108 0308 	add.w	r3, r8, #8
   d45aa:	f023 0307 	bic.w	r3, r3, #7
   d45ae:	466e      	mov	r6, sp
   d45b0:	ebad 0d03 	sub.w	sp, sp, r3
   d45b4:	ad04      	add	r5, sp, #16
   d45b6:	6820      	ldr	r0, [r4, #0]
   d45b8:	4642      	mov	r2, r8
   d45ba:	4629      	mov	r1, r5
   d45bc:	f002 ff25 	bl	d740a <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d45c0:	4580      	cmp	r8, r0
   d45c2:	f04f 0000 	mov.w	r0, #0
   d45c6:	d17f      	bne.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d45c8:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d45cc:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d45ce:	f002 f9b5 	bl	d693c <_Z11BlynkMillisv>
    switch (hdr.type)
   d45d2:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d45d4:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d45d6:	2b14      	cmp	r3, #20
   d45d8:	f000 80a6 	beq.w	d4728 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d45dc:	d848      	bhi.n	d4670 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d45de:	2b0f      	cmp	r3, #15
   d45e0:	f000 80a2 	beq.w	d4728 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d45e4:	d807      	bhi.n	d45f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d45e6:	2b02      	cmp	r3, #2
   d45e8:	d048      	beq.n	d467c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d45ea:	2b06      	cmp	r3, #6
   d45ec:	d051      	beq.n	d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d45ee:	4620      	mov	r0, r4
   d45f0:	f7ff fe4c 	bl	d428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d45f4:	e058      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d45f6:	2b11      	cmp	r3, #17
   d45f8:	d1f9      	bne.n	d45ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d45fa:	2300      	movs	r3, #0
   d45fc:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d45fe:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4602:	442b      	add	r3, r5
        if (it >= param.end())
   d4604:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4606:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d460a:	d24d      	bcs.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d460c:	f107 000c 	add.w	r0, r7, #12
   d4610:	f8d5 8000 	ldr.w	r8, [r5]
   d4614:	f7ff fdf2 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4618:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d461a:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d461e:	1b5d      	subs	r5, r3, r5
   d4620:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d4622:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d4626:	687b      	ldr	r3, [r7, #4]
   d4628:	61fd      	str	r5, [r7, #28]
   d462a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d462e:	8363      	strh	r3, [r4, #26]
   d4630:	4b64      	ldr	r3, [pc, #400]	; (d47c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d4632:	4598      	cmp	r8, r3
   d4634:	f000 80bf 	beq.w	d47b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d4638:	f200 808c 	bhi.w	d4754 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d463c:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4640:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d4644:	4413      	add	r3, r2
   d4646:	4598      	cmp	r8, r3
   d4648:	f000 809d 	beq.w	d4786 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d464c:	d879      	bhi.n	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d464e:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d4652:	3b06      	subs	r3, #6
   d4654:	4598      	cmp	r8, r3
   d4656:	f000 809c 	beq.w	d4792 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d465a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d465e:	3303      	adds	r3, #3
   d4660:	4598      	cmp	r8, r3
   d4662:	d16b      	bne.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4664:	f107 0114 	add.w	r1, r7, #20
   d4668:	4638      	mov	r0, r7
   d466a:	f002 f96a 	bl	d6942 <BlynkWidgetWrite>
   d466e:	e065      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4670:	2b29      	cmp	r3, #41	; 0x29
   d4672:	d01b      	beq.n	d46ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d4674:	2b37      	cmp	r3, #55	; 0x37
   d4676:	d017      	beq.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4678:	2b1d      	cmp	r3, #29
   d467a:	d1b8      	bne.n	d45ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d467c:	7f63      	ldrb	r3, [r4, #29]
   d467e:	b943      	cbnz	r3, d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4680:	2301      	movs	r3, #1
   d4682:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d4684:	4620      	mov	r0, r4
   d4686:	f000 fa81 	bl	d4b8c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d468a:	f7ff fda1 	bl	d41d0 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d468e:	f002 f959 	bl	d6944 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d4692:	2300      	movs	r3, #0
   d4694:	21c8      	movs	r1, #200	; 0xc8
   d4696:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d469a:	9100      	str	r1, [sp, #0]
   d469c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d46a0:	4619      	mov	r1, r3
   d46a2:	4620      	mov	r0, r4
   d46a4:	f000 f9c4 	bl	d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d46a8:	2001      	movs	r0, #1
   d46aa:	e00d      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d46ac:	68a3      	ldr	r3, [r4, #8]
   d46ae:	b91b      	cbnz	r3, d46b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d46b0:	2040      	movs	r0, #64	; 0x40
   d46b2:	f002 fc09 	bl	d6ec8 <malloc>
   d46b6:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d46b8:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d46bc:	44a8      	add	r8, r5
        if (it >= param.end())
   d46be:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46c0:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d46c4:	d302      	bcc.n	d46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d46c6:	2000      	movs	r0, #0
   d46c8:	46b5      	mov	sp, r6
   d46ca:	e727      	b.n	d451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d46cc:	4629      	mov	r1, r5
   d46ce:	2240      	movs	r2, #64	; 0x40
   d46d0:	68a0      	ldr	r0, [r4, #8]
   d46d2:	f003 ffa5 	bl	d8620 <strncpy>
        redir_serv[63] = '\0';
   d46d6:	68a3      	ldr	r3, [r4, #8]
   d46d8:	2500      	movs	r5, #0
   d46da:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d46de:	f107 0014 	add.w	r0, r7, #20
   d46e2:	f7ff fd8b 	bl	d41fc <_ZN10BlynkParam8iteratorppEv>
   d46e6:	6803      	ldr	r3, [r0, #0]
   d46e8:	4543      	cmp	r3, r8
   d46ea:	d21b      	bcs.n	d4724 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d46ec:	6978      	ldr	r0, [r7, #20]
   d46ee:	b120      	cbz	r0, d46fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d46f0:	69bb      	ldr	r3, [r7, #24]
   d46f2:	4298      	cmp	r0, r3
   d46f4:	d214      	bcs.n	d4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d46f6:	f003 ff35 	bl	d8564 <atol>
            redir_port = it.asLong();
   d46fa:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d46fc:	6820      	ldr	r0, [r4, #0]
   d46fe:	f003 fb4f 	bl	d7da0 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d4702:	6823      	ldr	r3, [r4, #0]
   d4704:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d4706:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4708:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d470a:	2300      	movs	r3, #0
   d470c:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d470e:	f002 f915 	bl	d693c <_Z11BlynkMillisv>
   d4712:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4716:	3808      	subs	r0, #8
   d4718:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d471c:	6160      	str	r0, [r4, #20]
   d471e:	e7c3      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4720:	4628      	mov	r0, r5
   d4722:	e7ea      	b.n	d46fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d4724:	2550      	movs	r5, #80	; 0x50
   d4726:	e7e9      	b.n	d46fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4728:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d472a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d472e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4732:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4734:	4629      	mov	r1, r5
   d4736:	4620      	mov	r0, r4
   d4738:	f7ff fdb2 	bl	d42a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d473c:	2300      	movs	r3, #0
   d473e:	8363      	strh	r3, [r4, #26]
   d4740:	e7b2      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4742:	4b21      	ldr	r3, [pc, #132]	; (d47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d4744:	4598      	cmp	r8, r3
   d4746:	d1f9      	bne.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d4748:	f107 0114 	add.w	r1, r7, #20
   d474c:	4638      	mov	r0, r7
   d474e:	f002 f8f8 	bl	d6942 <BlynkWidgetWrite>
   d4752:	e7f3      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4754:	4b1d      	ldr	r3, [pc, #116]	; (d47cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d4756:	4598      	cmp	r8, r3
   d4758:	d021      	beq.n	d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d475a:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d475e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4762:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d4766:	4598      	cmp	r8, r3
   d4768:	d01f      	beq.n	d47aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d476a:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d476e:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d4772:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d4776:	4598      	cmp	r8, r3
   d4778:	d1e0      	bne.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d477a:	f107 0114 	add.w	r1, r7, #20
   d477e:	4638      	mov	r0, r7
   d4780:	f002 f8df 	bl	d6942 <BlynkWidgetWrite>
   d4784:	e7da      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d4786:	f107 0114 	add.w	r1, r7, #20
   d478a:	4638      	mov	r0, r7
   d478c:	f002 f8d9 	bl	d6942 <BlynkWidgetWrite>
   d4790:	e7d4      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d4792:	f107 0114 	add.w	r1, r7, #20
   d4796:	4638      	mov	r0, r7
   d4798:	f002 f8d3 	bl	d6942 <BlynkWidgetWrite>
   d479c:	e7ce      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d479e:	f107 0114 	add.w	r1, r7, #20
   d47a2:	4638      	mov	r0, r7
   d47a4:	f002 f8cd 	bl	d6942 <BlynkWidgetWrite>
   d47a8:	e7c8      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d47aa:	f107 0114 	add.w	r1, r7, #20
   d47ae:	4638      	mov	r0, r7
   d47b0:	f002 f8c7 	bl	d6942 <BlynkWidgetWrite>
   d47b4:	e7c2      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d47b6:	f107 0114 	add.w	r1, r7, #20
   d47ba:	4638      	mov	r0, r7
   d47bc:	f002 f8c1 	bl	d6942 <BlynkWidgetWrite>
   d47c0:	e7bc      	b.n	d473c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d47c2:	bf00      	nop
   d47c4:	00736676 	.word	0x00736676
   d47c8:	00676264 	.word	0x00676264
   d47cc:	6e6f6361 	.word	0x6e6f6361

000d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d47d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47d4:	4604      	mov	r4, r0
   d47d6:	b08c      	sub	sp, #48	; 0x30
   d47d8:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d47da:	f7ff fcf9 	bl	d41d0 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d47de:	7f63      	ldrb	r3, [r4, #29]
   d47e0:	2b02      	cmp	r3, #2
   d47e2:	f000 80a8 	beq.w	d4936 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d47e6:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d47e8:	8b62      	ldrh	r2, [r4, #26]
   d47ea:	3301      	adds	r3, #1
   d47ec:	b2db      	uxtb	r3, r3
   d47ee:	7723      	strb	r3, [r4, #28]
   d47f0:	b10a      	cbz	r2, d47f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d47f2:	2501      	movs	r5, #1
   d47f4:	e016      	b.n	d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d47f6:	2b02      	cmp	r3, #2
   d47f8:	d8fb      	bhi.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d47fa:	6820      	ldr	r0, [r4, #0]
   d47fc:	f003 f8ef 	bl	d79de <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d4800:	b1b8      	cbz	r0, d4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d4802:	b925      	cbnz	r5, d480e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d4804:	6820      	ldr	r0, [r4, #0]
   d4806:	f003 fa71 	bl	d7cec <_ZN9TCPClient9availableEv>
   d480a:	2800      	cmp	r0, #0
   d480c:	dd11      	ble.n	d4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d480e:	4620      	mov	r0, r4
   d4810:	f7ff fe76 	bl	d4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d4814:	4605      	mov	r5, r0
   d4816:	2800      	cmp	r0, #0
   d4818:	d1f4      	bne.n	d4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d481a:	6820      	ldr	r0, [r4, #0]
   d481c:	f003 fac0 	bl	d7da0 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4820:	f002 f890 	bl	d6944 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d4824:	7f23      	ldrb	r3, [r4, #28]
   d4826:	3b01      	subs	r3, #1
   d4828:	7723      	strb	r3, [r4, #28]
}
   d482a:	4628      	mov	r0, r5
   d482c:	b00c      	add	sp, #48	; 0x30
   d482e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d4832:	f002 f883 	bl	d693c <_Z11BlynkMillisv>
   d4836:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4838:	6820      	ldr	r0, [r4, #0]
   d483a:	f003 f8d0 	bl	d79de <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d483e:	7f67      	ldrb	r7, [r4, #29]
   d4840:	2f01      	cmp	r7, #1
   d4842:	4605      	mov	r5, r0
   d4844:	d129      	bne.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d4846:	b920      	cbnz	r0, d4852 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d4848:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d484a:	4620      	mov	r0, r4
   d484c:	f7ff fd1e 	bl	d428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4850:	e7e8      	b.n	d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d4852:	68e3      	ldr	r3, [r4, #12]
   d4854:	f24f 6218 	movw	r2, #63000	; 0xf618
   d4858:	1af3      	subs	r3, r6, r3
   d485a:	4293      	cmp	r3, r2
   d485c:	d904      	bls.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d485e:	4620      	mov	r0, r4
   d4860:	f7ff fd14 	bl	d428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4864:	2500      	movs	r5, #0
   d4866:	e7dd      	b.n	d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4868:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d486c:	4293      	cmp	r3, r2
   d486e:	d803      	bhi.n	d4878 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4870:	6923      	ldr	r3, [r4, #16]
   d4872:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4874:	4293      	cmp	r3, r2
   d4876:	d9bc      	bls.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4878:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d487a:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d487e:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4880:	4293      	cmp	r3, r2
   d4882:	d9b6      	bls.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d4884:	2300      	movs	r3, #0
   d4886:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d488a:	9300      	str	r3, [sp, #0]
   d488c:	461a      	mov	r2, r3
   d488e:	2106      	movs	r1, #6
   d4890:	4620      	mov	r0, r4
   d4892:	f000 f8cd 	bl	d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d4896:	6166      	str	r6, [r4, #20]
   d4898:	e7ab      	b.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d489a:	2f00      	cmp	r7, #0
   d489c:	d1a9      	bne.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d489e:	6962      	ldr	r2, [r4, #20]
   d48a0:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d48a2:	b140      	cbz	r0, d48b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d48a4:	f241 7370 	movw	r3, #6000	; 0x1770
   d48a8:	429a      	cmp	r2, r3
   d48aa:	d9a2      	bls.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d48ac:	6820      	ldr	r0, [r4, #0]
   d48ae:	f003 fa77 	bl	d7da0 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d48b2:	7767      	strb	r7, [r4, #29]
   d48b4:	e7d6      	b.n	d4864 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d48b6:	f241 3388 	movw	r3, #5000	; 0x1388
   d48ba:	429a      	cmp	r2, r3
   d48bc:	d999      	bls.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d48be:	6820      	ldr	r0, [r4, #0]
   d48c0:	f003 fa6e 	bl	d7da0 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d48c4:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d48c8:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d48cc:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d48d0:	f1be 0f00 	cmp.w	lr, #0
   d48d4:	d00b      	beq.n	d48ee <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d48d6:	462b      	mov	r3, r5
   d48d8:	4642      	mov	r2, r8
   d48da:	4671      	mov	r1, lr
   d48dc:	4660      	mov	r0, ip
   d48de:	f003 fabd 	bl	d7e5c <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d48e2:	1e43      	subs	r3, r0, #1
   d48e4:	425d      	negs	r5, r3
   d48e6:	415d      	adcs	r5, r3
   d48e8:	b98d      	cbnz	r5, d490e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d48ea:	6166      	str	r6, [r4, #20]
                return false;
   d48ec:	e79a      	b.n	d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d48ee:	4b13      	ldr	r3, [pc, #76]	; (d493c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d48f0:	9306      	str	r3, [sp, #24]
   d48f2:	f10c 0720 	add.w	r7, ip, #32
   d48f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48f8:	ad07      	add	r5, sp, #28
   d48fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48fc:	683b      	ldr	r3, [r7, #0]
   d48fe:	702b      	strb	r3, [r5, #0]
   d4900:	4642      	mov	r2, r8
   d4902:	4673      	mov	r3, lr
   d4904:	a906      	add	r1, sp, #24
   d4906:	4660      	mov	r0, ip
   d4908:	f003 f975 	bl	d7bf6 <_ZN9TCPClient7connectE9IPAddresstm>
   d490c:	e7e9      	b.n	d48e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d490e:	6863      	ldr	r3, [r4, #4]
   d4910:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d4912:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4914:	4618      	mov	r0, r3
            msgIdOut = 1;
   d4916:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4918:	f003 fe7a 	bl	d8610 <strlen>
   d491c:	2200      	movs	r2, #0
   d491e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4922:	9b05      	ldr	r3, [sp, #20]
   d4924:	9000      	str	r0, [sp, #0]
   d4926:	4632      	mov	r2, r6
   d4928:	211d      	movs	r1, #29
   d492a:	4620      	mov	r0, r4
   d492c:	f000 f880 	bl	d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4930:	6923      	ldr	r3, [r4, #16]
   d4932:	6163      	str	r3, [r4, #20]
            return true;
   d4934:	e776      	b.n	d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d4936:	2500      	movs	r5, #0
   d4938:	e777      	b.n	d482a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d493a:	bf00      	nop
   d493c:	000d97dc 	.word	0x000d97dc

000d4940 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4944:	4615      	mov	r5, r2
   d4946:	b08c      	sub	sp, #48	; 0x30
   d4948:	4604      	mov	r4, r0
   d494a:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d494c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4950:	460f      	mov	r7, r1
   d4952:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d4954:	f001 fff0 	bl	d6938 <_Z10BlynkDelaym>
   d4958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d495a:	ae01      	add	r6, sp, #4
   d495c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d495e:	682b      	ldr	r3, [r5, #0]
   d4960:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d4962:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4964:	f001 ffea 	bl	d693c <_Z11BlynkMillisv>
   d4968:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d496c:	3808      	subs	r0, #8
   d496e:	af01      	add	r7, sp, #4
   d4970:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4974:	6160      	str	r0, [r4, #20]
   d4976:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4978:	ae07      	add	r6, sp, #28
   d497a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d497c:	683b      	ldr	r3, [r7, #0]
   d497e:	7033      	strb	r3, [r6, #0]
   d4980:	af07      	add	r7, sp, #28
   d4982:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d4984:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d4986:	f04f 0c00 	mov.w	ip, #0
   d498a:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d498e:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d4992:	3520      	adds	r5, #32
   d4994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4996:	6833      	ldr	r3, [r6, #0]
   d4998:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d499a:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d499c:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d49a0:	6820      	ldr	r0, [r4, #0]
   d49a2:	f003 f9fd 	bl	d7da0 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d49a6:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d49a8:	f001 ffc8 	bl	d693c <_Z11BlynkMillisv>
   d49ac:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d49ae:	7f63      	ldrb	r3, [r4, #29]
   d49b0:	2b01      	cmp	r3, #1
   d49b2:	d00c      	beq.n	d49ce <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d49b4:	f001 ffc2 	bl	d693c <_Z11BlynkMillisv>
   d49b8:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d49ba:	42b8      	cmp	r0, r7
   d49bc:	d804      	bhi.n	d49c8 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d49be:	2100      	movs	r1, #0
   d49c0:	4620      	mov	r0, r4
   d49c2:	f7ff ff05 	bl	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d49c6:	e7f2      	b.n	d49ae <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d49c8:	7f63      	ldrb	r3, [r4, #29]
   d49ca:	2b01      	cmp	r3, #1
   d49cc:	d1e8      	bne.n	d49a0 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d49ce:	b00c      	add	sp, #48	; 0x30
   d49d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d49d4 <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
   d49d4:	b500      	push	{lr}
  display.setup();
   d49d6:	4813      	ldr	r0, [pc, #76]	; (d4a24 <setup+0x50>)
void setup() {
   d49d8:	b089      	sub	sp, #36	; 0x24
  display.setup();
   d49da:	f001 fa75 	bl	d5ec8 <_ZN16OledWingAdafruit5setupEv>
	display.clearDisplay();
   d49de:	4811      	ldr	r0, [pc, #68]	; (d4a24 <setup+0x50>)
   d49e0:	f001 fca4 	bl	d632c <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.display();
   d49e4:	480f      	ldr	r0, [pc, #60]	; (d4a24 <setup+0x50>)
   d49e6:	f001 ff0d 	bl	d6804 <_ZN16Adafruit_SSD13067displayEv>

  pinMode(D7,OUTPUT);
   d49ea:	2101      	movs	r1, #1
   d49ec:	2007      	movs	r0, #7
   d49ee:	f003 fbdf 	bl	d81b0 <pinMode>
  Serial.begin(9600);
   d49f2:	f002 fed3 	bl	d779c <_Z16_fetch_usbserialv>
   d49f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d49fa:	f002 fec3 	bl	d7784 <_ZN9USBSerial5beginEl>

  Blynk.begin("ctbHP9eZLnUvmjXzqngyAKc3NjZdJKd1", IPAddress(167, 172, 234, 162), 9090);
   d49fe:	23a2      	movs	r3, #162	; 0xa2
   d4a00:	9300      	str	r3, [sp, #0]
   d4a02:	22ac      	movs	r2, #172	; 0xac
   d4a04:	23ea      	movs	r3, #234	; 0xea
   d4a06:	21a7      	movs	r1, #167	; 0xa7
   d4a08:	a802      	add	r0, sp, #8
   d4a0a:	f002 fe4f 	bl	d76ac <_ZN9IPAddressC1Ehhhh>
   d4a0e:	4906      	ldr	r1, [pc, #24]	; (d4a28 <setup+0x54>)
   d4a10:	4806      	ldr	r0, [pc, #24]	; (d4a2c <setup+0x58>)
   d4a12:	f242 3382 	movw	r3, #9090	; 0x2382
   d4a16:	aa02      	add	r2, sp, #8
   d4a18:	f7ff ff92 	bl	d4940 <_ZN13BlynkParticle5beginEPKc9IPAddresst>

}
   d4a1c:	b009      	add	sp, #36	; 0x24
   d4a1e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a22:	bf00      	nop
   d4a24:	2003e5d4 	.word	0x2003e5d4
   d4a28:	000d8783 	.word	0x000d8783
   d4a2c:	2003e518 	.word	0x2003e518

000d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a34:	b083      	sub	sp, #12
   d4a36:	af00      	add	r7, sp, #0
   d4a38:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4a3a:	6800      	ldr	r0, [r0, #0]
   d4a3c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4a3e:	4688      	mov	r8, r1
   d4a40:	4616      	mov	r6, r2
   d4a42:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4a44:	46eb      	mov	fp, sp
   d4a46:	f002 ffca 	bl	d79de <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4a4a:	2800      	cmp	r0, #0
   d4a4c:	d07f      	beq.n	d4b4e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a4e:	f1b8 0f1d 	cmp.w	r8, #29
   d4a52:	d804      	bhi.n	d4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4a54:	4b4c      	ldr	r3, [pc, #304]	; (d4b88 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4a56:	fa23 f308 	lsr.w	r3, r3, r8
   d4a5a:	07db      	lsls	r3, r3, #31
   d4a5c:	d402      	bmi.n	d4a64 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4a5e:	7f63      	ldrb	r3, [r4, #29]
   d4a60:	2b01      	cmp	r3, #1
   d4a62:	d174      	bne.n	d4b4e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4a64:	b946      	cbnz	r6, d4a78 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4a66:	8b66      	ldrh	r6, [r4, #26]
   d4a68:	b936      	cbnz	r6, d4a78 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4a6a:	8b23      	ldrh	r3, [r4, #24]
   d4a6c:	3301      	adds	r3, #1
   d4a6e:	b29b      	uxth	r3, r3
   d4a70:	2b00      	cmp	r3, #0
   d4a72:	d071      	beq.n	d4b58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4a74:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4a76:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4a78:	f1a8 030c 	sub.w	r3, r8, #12
   d4a7c:	2b08      	cmp	r3, #8
   d4a7e:	d816      	bhi.n	d4aae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4a80:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4a84:	4293      	cmp	r3, r2
   d4a86:	bf38      	it	cc
   d4a88:	4613      	movcc	r3, r2
   d4a8a:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4a8e:	f001 ff55 	bl	d693c <_Z11BlynkMillisv>
   d4a92:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4a96:	2800      	cmp	r0, #0
   d4a98:	db60      	blt.n	d4b5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4a9a:	2100      	movs	r1, #0
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f7ff fe97 	bl	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4aa2:	f001 ff4b 	bl	d693c <_Z11BlynkMillisv>
   d4aa6:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4aaa:	2800      	cmp	r0, #0
   d4aac:	daf5      	bge.n	d4a9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4aae:	f1b9 0f00 	cmp.w	r9, #0
   d4ab2:	d05a      	beq.n	d4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4ab4:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4ab8:	2a00      	cmp	r2, #0
   d4aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4abc:	bf08      	it	eq
   d4abe:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4ac0:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4ac4:	f10a 0307 	add.w	r3, sl, #7
   d4ac8:	f023 0307 	bic.w	r3, r3, #7
   d4acc:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4ad2:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4ad6:	18ea      	adds	r2, r5, r3
   d4ad8:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4adc:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4ade:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4ae2:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4ae6:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4aea:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4aee:	f1b9 0f00 	cmp.w	r9, #0
   d4af2:	d03c      	beq.n	d4b6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4af4:	2d00      	cmp	r5, #0
   d4af6:	d03a      	beq.n	d4b6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4af8:	462a      	mov	r2, r5
   d4afa:	4649      	mov	r1, r9
   d4afc:	f10d 0005 	add.w	r0, sp, #5
   d4b00:	f003 fd42 	bl	d8588 <memcpy>
        pos += length;
   d4b04:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4b08:	b13b      	cbz	r3, d4b1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4b0c:	b12b      	cbz	r3, d4b1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4b0e:	461a      	mov	r2, r3
   d4b10:	687b      	ldr	r3, [r7, #4]
   d4b12:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4b14:	4418      	add	r0, r3
   d4b16:	f003 fd37 	bl	d8588 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4b1a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4b1c:	4555      	cmp	r5, sl
   d4b1e:	d22a      	bcs.n	d4b76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4b20:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4b24:	687b      	ldr	r3, [r7, #4]
   d4b26:	6820      	ldr	r0, [r4, #0]
   d4b28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4b2c:	bf28      	it	cs
   d4b2e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4b32:	1959      	adds	r1, r3, r5
   d4b34:	f002 ff3d 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
   d4b38:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4b3a:	2000      	movs	r0, #0
   d4b3c:	f001 fefc 	bl	d6938 <_Z10BlynkDelaym>
        if (w == 0) {
   d4b40:	b9be      	cbnz	r6, d4b72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4b42:	6820      	ldr	r0, [r4, #0]
   d4b44:	f003 f92c 	bl	d7da0 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4b48:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4b4a:	f001 fefb 	bl	d6944 <BlynkNoOpCbk>
}
   d4b4e:	370c      	adds	r7, #12
   d4b50:	46dd      	mov	sp, fp
   d4b52:	46bd      	mov	sp, r7
   d4b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4b58:	2301      	movs	r3, #1
   d4b5a:	e78b      	b.n	d4a74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4b5c:	7f21      	ldrb	r1, [r4, #28]
   d4b5e:	2900      	cmp	r1, #0
   d4b60:	d1a5      	bne.n	d4aae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4b62:	4620      	mov	r0, r4
   d4b64:	f7ff fe34 	bl	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4b68:	e7a1      	b.n	d4aae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4b6a:	2305      	movs	r3, #5
   d4b6c:	e7a3      	b.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4b6e:	2005      	movs	r0, #5
   d4b70:	e7c9      	b.n	d4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4b72:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4b74:	e7d2      	b.n	d4b1c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4b76:	d003      	beq.n	d4b80 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4b78:	4620      	mov	r0, r4
   d4b7a:	f7ff fb87 	bl	d428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4b7e:	e7e6      	b.n	d4b4e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4b80:	f001 fedc 	bl	d693c <_Z11BlynkMillisv>
   d4b84:	6120      	str	r0, [r4, #16]
   d4b86:	e7e2      	b.n	d4b4e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4b88:	20000045 	.word	0x20000045

000d4b8c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4b8c:	b500      	push	{lr}
   d4b8e:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4b90:	ab04      	add	r3, sp, #16
   d4b92:	2200      	movs	r2, #0
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	2349      	movs	r3, #73	; 0x49
   d4b98:	9300      	str	r3, [sp, #0]
   d4b9a:	9202      	str	r2, [sp, #8]
   d4b9c:	4b03      	ldr	r3, [pc, #12]	; (d4bac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4b9e:	2111      	movs	r1, #17
   d4ba0:	f7ff ff46 	bl	d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4ba4:	b015      	add	sp, #84	; 0x54
   d4ba6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4baa:	bf00      	nop
   d4bac:	000d87d9 	.word	0x000d87d9

000d4bb0 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   d4bb2:	481d      	ldr	r0, [pc, #116]	; (d4c28 <loop+0x78>)
   d4bb4:	f001 f9b1 	bl	d5f1a <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   d4bb8:	481c      	ldr	r0, [pc, #112]	; (d4c2c <loop+0x7c>)
   d4bba:	2100      	movs	r1, #0
   d4bbc:	f7ff fe08 	bl	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  if (client.isConnected()) {
   d4bc0:	481b      	ldr	r0, [pc, #108]	; (d4c30 <loop+0x80>)
   d4bc2:	f000 f9da 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d4bc6:	b320      	cbz	r0, d4c12 <loop+0x62>
    client.loop();
   d4bc8:	4819      	ldr	r0, [pc, #100]	; (d4c30 <loop+0x80>)
   d4bca:	f000 fbae 	bl	d532a <_ZN4MQTT4loopEv>
  } else {
    client.connect(System.deviceID());
  }
  client.subscribe("ksa");
   d4bce:	4919      	ldr	r1, [pc, #100]	; (d4c34 <loop+0x84>)
   d4bd0:	4817      	ldr	r0, [pc, #92]	; (d4c30 <loop+0x80>)
   d4bd2:	f000 fcf2 	bl	d55ba <_ZN4MQTT9subscribeEPKc>
    if(display.pressedA()){
   d4bd6:	4814      	ldr	r0, [pc, #80]	; (d4c28 <loop+0x78>)
   d4bd8:	f001 f9b8 	bl	d5f4c <_ZN16OledWingAdafruit8pressedAEv>
   d4bdc:	b120      	cbz	r0, d4be8 <loop+0x38>
    client.publish("ksa","pressed A");
   d4bde:	4a16      	ldr	r2, [pc, #88]	; (d4c38 <loop+0x88>)
   d4be0:	4914      	ldr	r1, [pc, #80]	; (d4c34 <loop+0x84>)
   d4be2:	4813      	ldr	r0, [pc, #76]	; (d4c30 <loop+0x80>)
   d4be4:	f000 fb45 	bl	d5272 <_ZN4MQTT7publishEPKcS1_>
 
  }
  if(display.pressedB()){
   d4be8:	480f      	ldr	r0, [pc, #60]	; (d4c28 <loop+0x78>)
   d4bea:	f001 f9b9 	bl	d5f60 <_ZN16OledWingAdafruit8pressedBEv>
   d4bee:	b120      	cbz	r0, d4bfa <loop+0x4a>
    client.publish("ksa","pressed B");
   d4bf0:	4a12      	ldr	r2, [pc, #72]	; (d4c3c <loop+0x8c>)
   d4bf2:	4910      	ldr	r1, [pc, #64]	; (d4c34 <loop+0x84>)
   d4bf4:	480e      	ldr	r0, [pc, #56]	; (d4c30 <loop+0x80>)
   d4bf6:	f000 fb3c 	bl	d5272 <_ZN4MQTT7publishEPKcS1_>
 
  }
  if(display.pressedC()){
   d4bfa:	480b      	ldr	r0, [pc, #44]	; (d4c28 <loop+0x78>)
   d4bfc:	f001 f9ba 	bl	d5f74 <_ZN16OledWingAdafruit8pressedCEv>
   d4c00:	b120      	cbz	r0, d4c0c <loop+0x5c>
    client.publish("ksa","pressed C");
   d4c02:	4a0f      	ldr	r2, [pc, #60]	; (d4c40 <loop+0x90>)
   d4c04:	490b      	ldr	r1, [pc, #44]	; (d4c34 <loop+0x84>)
   d4c06:	480a      	ldr	r0, [pc, #40]	; (d4c30 <loop+0x80>)
   d4c08:	f000 fb33 	bl	d5272 <_ZN4MQTT7publishEPKcS1_>
 
  }

  // The core of your code will likely live here.

   d4c0c:	b005      	add	sp, #20
   d4c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4c12:	4668      	mov	r0, sp
   d4c14:	f002 f948 	bl	d6ea8 <spark_deviceID>
    client.connect(System.deviceID());
   d4c18:	9900      	ldr	r1, [sp, #0]
   d4c1a:	4805      	ldr	r0, [pc, #20]	; (d4c30 <loop+0x80>)
   d4c1c:	f000 fa9e 	bl	d515c <_ZN4MQTT7connectEPKc>
   d4c20:	4668      	mov	r0, sp
   d4c22:	f002 fab2 	bl	d718a <_ZN6StringD1Ev>
   d4c26:	e7d2      	b.n	d4bce <loop+0x1e>
   d4c28:	2003e5d4 	.word	0x2003e5d4
   d4c2c:	2003e518 	.word	0x2003e518
   d4c30:	2003e574 	.word	0x2003e574
   d4c34:	000d876e 	.word	0x000d876e
   d4c38:	000d87a4 	.word	0x000d87a4
   d4c3c:	000d87ae 	.word	0x000d87ae
   d4c40:	000d87b8 	.word	0x000d87b8

000d4c44 <_GLOBAL__sub_I_Blynk>:
   d4c44:	b573      	push	{r0, r1, r4, r5, r6, lr}
        : domain(NULL), port(0)
   d4c46:	4d1c      	ldr	r5, [pc, #112]	; (d4cb8 <_GLOBAL__sub_I_Blynk+0x74>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4c48:	4e1c      	ldr	r6, [pc, #112]	; (d4cbc <_GLOBAL__sub_I_Blynk+0x78>)
   d4c4a:	4628      	mov	r0, r5
   d4c4c:	2400      	movs	r4, #0
   d4c4e:	f003 f8f1 	bl	d7e34 <_ZN9TCPClientC1Ev>
   d4c52:	f105 001c 	add.w	r0, r5, #28
   d4c56:	f002 fce5 	bl	d7624 <_ZN9IPAddressC1Ev>
   d4c5a:	4632      	mov	r2, r6
   d4c5c:	636c      	str	r4, [r5, #52]	; 0x34
   d4c5e:	872c      	strh	r4, [r5, #56]	; 0x38
   d4c60:	4917      	ldr	r1, [pc, #92]	; (d4cc0 <_GLOBAL__sub_I_Blynk+0x7c>)
   d4c62:	4628      	mov	r0, r5
   d4c64:	f003 fb5e 	bl	d8324 <__aeabi_atexit>
        , state(CONNECTING)
   d4c68:	4b16      	ldr	r3, [pc, #88]	; (d4cc4 <_GLOBAL__sub_I_Blynk+0x80>)
   d4c6a:	e9c3 5400 	strd	r5, r4, [r3]
OledWingAdafruit display;
   d4c6e:	4d16      	ldr	r5, [pc, #88]	; (d4cc8 <_GLOBAL__sub_I_Blynk+0x84>)
   d4c70:	619c      	str	r4, [r3, #24]
   d4c72:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4c76:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4c7a:	839c      	strh	r4, [r3, #28]
   d4c7c:	2107      	movs	r1, #7
   d4c7e:	4628      	mov	r0, r5
   d4c80:	f001 f8f4 	bl	d5e6c <_ZN16OledWingAdafruitC1Ei>
   d4c84:	4632      	mov	r2, r6
   d4c86:	4911      	ldr	r1, [pc, #68]	; (d4ccc <_GLOBAL__sub_I_Blynk+0x88>)
   d4c88:	4628      	mov	r0, r5
MQTT client("lab.thewcl.com", 1883, callback);
   d4c8a:	4d11      	ldr	r5, [pc, #68]	; (d4cd0 <_GLOBAL__sub_I_Blynk+0x8c>)
OledWingAdafruit display;
   d4c8c:	f003 fb4a 	bl	d8324 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4c90:	4621      	mov	r1, r4
   d4c92:	2001      	movs	r0, #1
   d4c94:	f002 f884 	bl	d6da0 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   d4c98:	4b0e      	ldr	r3, [pc, #56]	; (d4cd4 <_GLOBAL__sub_I_Blynk+0x90>)
   d4c9a:	490f      	ldr	r1, [pc, #60]	; (d4cd8 <_GLOBAL__sub_I_Blynk+0x94>)
   d4c9c:	9400      	str	r4, [sp, #0]
   d4c9e:	f240 725b 	movw	r2, #1883	; 0x75b
   d4ca2:	4628      	mov	r0, r5
   d4ca4:	f000 f860 	bl	d4d68 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d4ca8:	490c      	ldr	r1, [pc, #48]	; (d4cdc <_GLOBAL__sub_I_Blynk+0x98>)
   d4caa:	4632      	mov	r2, r6
   d4cac:	4628      	mov	r0, r5
   d4cae:	b002      	add	sp, #8
   d4cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
MQTT client("lab.thewcl.com", 1883, callback);
   d4cb4:	f003 bb36 	b.w	d8324 <__aeabi_atexit>
   d4cb8:	2003e538 	.word	0x2003e538
   d4cbc:	2003e514 	.word	0x2003e514
   d4cc0:	000d40f9 	.word	0x000d40f9
   d4cc4:	2003e518 	.word	0x2003e518
   d4cc8:	2003e5d4 	.word	0x2003e5d4
   d4ccc:	000d5e39 	.word	0x000d5e39
   d4cd0:	2003e574 	.word	0x2003e574
   d4cd4:	000d4149 	.word	0x000d4149
   d4cd8:	000d87c2 	.word	0x000d87c2
   d4cdc:	000d55c1 	.word	0x000d55c1

000d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d4ce0:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d4ce4:	b510      	push	{r4, lr}
   d4ce6:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d4ce8:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d4cea:	b113      	cbz	r3, d4cf2 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4cec:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d4cee:	f001 febf 	bl	d6a70 <os_mutex_lock>
#endif
#endif
#endif
        }
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	bd10      	pop	{r4, pc}

000d4cf6 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d4cf6:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d4cf8:	6803      	ldr	r3, [r0, #0]
   d4cfa:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d4cfe:	4604      	mov	r4, r0
            if (mqtt->thread)
   d4d00:	b112      	cbz	r2, d4d08 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d4d02:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d4d04:	f001 febc 	bl	d6a80 <os_mutex_unlock>
#endif
#endif
#endif
        }
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bd10      	pop	{r4, pc}

000d4d0c <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d4d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d0e:	461f      	mov	r7, r3
   d4d10:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4d14:	4604      	mov	r4, r0
   d4d16:	460d      	mov	r5, r1
   d4d18:	4616      	mov	r6, r2
    if (thread) {
   d4d1a:	b12b      	cbz	r3, d4d28 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d4d1c:	2301      	movs	r3, #1
   d4d1e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d4d22:	3058      	adds	r0, #88	; 0x58
   d4d24:	f001 fe94 	bl	d6a50 <os_mutex_create>
    }
    this->callback = callback;
   d4d28:	9b08      	ldr	r3, [sp, #32]
   d4d2a:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d4d30:	b106      	cbz	r6, d4d34 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d4d32:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d4d34:	b125      	cbz	r5, d4d40 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d4d36:	4629      	mov	r1, r5
   d4d38:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4d3c:	f002 fa84 	bl	d7248 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4d40:	9b06      	ldr	r3, [sp, #24]
   d4d42:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4d44:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d4d46:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d4d48:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4d4c:	2bff      	cmp	r3, #255	; 0xff
   d4d4e:	bfb8      	it	lt
   d4d50:	23ff      	movlt	r3, #255	; 0xff
   d4d52:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d4d56:	b108      	cbz	r0, d4d5c <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d4d58:	f7ff f9a1 	bl	d409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4d5c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4d60:	f7ff f999 	bl	d4096 <_Znaj>
   d4d64:	61e0      	str	r0, [r4, #28]
}
   d4d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d68 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4d68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4d6c:	4604      	mov	r4, r0
            bool thread) {
   d4d6e:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4d70:	4617      	mov	r7, r2
   d4d72:	4698      	mov	r8, r3
   d4d74:	460e      	mov	r6, r1
            bool thread) {
   d4d76:	f003 f85d 	bl	d7e34 <_ZN9TCPClientC1Ev>
   d4d7a:	490d      	ldr	r1, [pc, #52]	; (d4db0 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d4d7c:	61e5      	str	r5, [r4, #28]
   d4d7e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4d82:	f002 fa4d 	bl	d7220 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4d86:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d4d8a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4d8c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d4d90:	22ff      	movs	r2, #255	; 0xff
   d4d92:	230f      	movs	r3, #15
   d4d94:	e9cd 3200 	strd	r3, r2, [sp]
   d4d98:	4620      	mov	r0, r4
            bool thread) {
   d4d9a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4d9e:	463b      	mov	r3, r7
   d4da0:	462a      	mov	r2, r5
   d4da2:	4631      	mov	r1, r6
   d4da4:	f7ff ffb2 	bl	d4d0c <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d4da8:	4620      	mov	r0, r4
   d4daa:	b004      	add	sp, #16
   d4dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4db0:	000d883c 	.word	0x000d883c

000d4db4 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4db4:	b510      	push	{r4, lr}
   d4db6:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4db8:	4620      	mov	r0, r4
   d4dba:	f002 ff97 	bl	d7cec <_ZN9TCPClient9availableEv>
   d4dbe:	2800      	cmp	r0, #0
   d4dc0:	d0fa      	beq.n	d4db8 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	f002 fecb 	bl	d7b5e <_ZN9TCPClient4readEv>
}
   d4dc8:	b2c0      	uxtb	r0, r0
   d4dca:	bd10      	pop	{r4, pc}

000d4dcc <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4dd0:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4dd2:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4dd4:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d4dd6:	f7ff ffed 	bl	d4db4 <_ZN4MQTT8readByteEv>
   d4dda:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4ddc:	69eb      	ldr	r3, [r5, #28]
   d4dde:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4de2:	f04f 0901 	mov.w	r9, #1
   d4de6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4dea:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d4dee:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4df0:	4628      	mov	r0, r5
   d4df2:	f7ff ffdf 	bl	d4db4 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4df6:	4626      	mov	r6, r4
   d4df8:	69eb      	ldr	r3, [r5, #28]
   d4dfa:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4dfc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4e00:	fb13 f309 	smulbb	r3, r3, r9
   d4e04:	4498      	add	r8, r3
        buffer[len++] = digit;
   d4e06:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4e08:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d4e0a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4e0c:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d4e10:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4e14:	d4ec      	bmi.n	d4df0 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d4e16:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4e18:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4e1c:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d4e1e:	d124      	bne.n	d4e6a <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4e20:	4628      	mov	r0, r5
   d4e22:	69ef      	ldr	r7, [r5, #28]
   d4e24:	f7ff ffc6 	bl	d4db4 <_ZN4MQTT8readByteEv>
   d4e28:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d4e2a:	4628      	mov	r0, r5
   d4e2c:	69ef      	ldr	r7, [r5, #28]
   d4e2e:	1cf4      	adds	r4, r6, #3
   d4e30:	f7ff ffc0 	bl	d4db4 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d4e34:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d4e36:	b2b6      	uxth	r6, r6
   d4e38:	b2a4      	uxth	r4, r4
   d4e3a:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4e3c:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4e3e:	b2b6      	uxth	r6, r6
   d4e40:	46b1      	mov	r9, r6
   d4e42:	4627      	mov	r7, r4
   d4e44:	45c1      	cmp	r9, r8
   d4e46:	d212      	bcs.n	d4e6e <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4e48:	4628      	mov	r0, r5
   d4e4a:	f7ff ffb3 	bl	d4db4 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4e4e:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d4e52:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d4e54:	bf88      	it	hi
   d4e56:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d4e58:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d4e5c:	bf88      	it	hi
   d4e5e:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d4e60:	3701      	adds	r7, #1
   d4e62:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d4e64:	fa1f f989 	uxth.w	r9, r9
   d4e68:	e7ec      	b.n	d4e44 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d4e6a:	2600      	movs	r6, #0
   d4e6c:	e7e7      	b.n	d4e3e <_ZN4MQTT10readPacketEPh+0x72>
   d4e6e:	eba8 0006 	sub.w	r0, r8, r6
   d4e72:	45b0      	cmp	r8, r6
   d4e74:	bf2c      	ite	cs
   d4e76:	4606      	movcs	r6, r0
   d4e78:	2600      	movcc	r6, #0
   d4e7a:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d4e7c:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d4e80:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d4e82:	42a0      	cmp	r0, r4
   d4e84:	bf2c      	ite	cs
   d4e86:	4620      	movcs	r0, r4
   d4e88:	2000      	movcc	r0, #0
   d4e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4e8e <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4e90:	468c      	mov	ip, r1
   d4e92:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4e94:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4e96:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d4e98:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d4e9a:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4e9c:	a802      	add	r0, sp, #8
        digit = len % 128;
   d4e9e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d4ea2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d4ea6:	f103 0401 	add.w	r4, r3, #1
   d4eaa:	4403      	add	r3, r0
            digit |= 0x80;
   d4eac:	bf88      	it	hi
   d4eae:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d4eb2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d4eb6:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d4eba:	b2e4      	uxtb	r4, r4
   d4ebc:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d4ec0:	d810      	bhi.n	d4ee4 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d4ec2:	f1c4 0304 	rsb	r3, r4, #4
   d4ec6:	18d1      	adds	r1, r2, r3
   d4ec8:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4ecc:	f1c4 0305 	rsb	r3, r4, #5
   d4ed0:	4413      	add	r3, r2
   d4ed2:	a801      	add	r0, sp, #4
   d4ed4:	3205      	adds	r2, #5
   d4ed6:	4293      	cmp	r3, r2
   d4ed8:	d006      	beq.n	d4ee8 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d4eda:	f810 5b01 	ldrb.w	r5, [r0], #1
   d4ede:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d4ee2:	e7f8      	b.n	d4ed6 <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d4ee4:	4623      	mov	r3, r4
   d4ee6:	e7d8      	b.n	d4e9a <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4ee8:	1c72      	adds	r2, r6, #1
   d4eea:	4422      	add	r2, r4
   d4eec:	4638      	mov	r0, r7
   d4eee:	f002 fd60 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
   d4ef2:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ef4:	f001 fda4 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4ef8:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d4efa:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4efc:	4432      	add	r2, r6
   d4efe:	b2a8      	uxth	r0, r5
}
   d4f00:	1a13      	subs	r3, r2, r0
   d4f02:	4258      	negs	r0, r3
   d4f04:	4158      	adcs	r0, r3
   d4f06:	b003      	add	sp, #12
   d4f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f0a <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4f0a:	b513      	push	{r0, r1, r4, lr}
   d4f0c:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d4f0e:	4601      	mov	r1, r0
   d4f10:	a801      	add	r0, sp, #4
   d4f12:	f7ff fee5 	bl	d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d4f16:	69e3      	ldr	r3, [r4, #28]
   d4f18:	22e0      	movs	r2, #224	; 0xe0
   d4f1a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4f1c:	69e3      	ldr	r3, [r4, #28]
   d4f1e:	2200      	movs	r2, #0
   d4f20:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d4f22:	69e1      	ldr	r1, [r4, #28]
   d4f24:	2202      	movs	r2, #2
   d4f26:	4620      	mov	r0, r4
   d4f28:	f002 fd43 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f002 ff37 	bl	d7da0 <_ZN9TCPClient4stopEv>
   d4f32:	f001 fd85 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d4f36:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d4f3a:	a801      	add	r0, sp, #4
   d4f3c:	f7ff fedb 	bl	d4cf6 <_ZN4MQTT11MutexLockerD1Ev>
}
   d4f40:	b002      	add	sp, #8
   d4f42:	bd10      	pop	{r4, pc}

000d4f44 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4f44:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d4f46:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f48:	4604      	mov	r4, r0
    pos += 2;
   d4f4a:	b298      	uxth	r0, r3
   d4f4c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d4f4e:	5ccd      	ldrb	r5, [r1, r3]
   d4f50:	b155      	cbz	r5, d4f68 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d4f52:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d4f56:	4286      	cmp	r6, r0
   d4f58:	f103 0701 	add.w	r7, r3, #1
   d4f5c:	d904      	bls.n	d4f68 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d4f5e:	1c46      	adds	r6, r0, #1
   d4f60:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d4f62:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d4f64:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d4f66:	e7f2      	b.n	d4f4e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4f68:	b299      	uxth	r1, r3
   d4f6a:	1a44      	subs	r4, r0, r1
   d4f6c:	4422      	add	r2, r4
   d4f6e:	1209      	asrs	r1, r1, #8
   d4f70:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4f74:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d4f78:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f7a <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d4f7a:	b538      	push	{r3, r4, r5, lr}
   d4f7c:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d4f7e:	f002 fd2e 	bl	d79de <_ZN9TCPClient9connectedEv>
   d4f82:	2800      	cmp	r0, #0
   d4f84:	bf14      	ite	ne
   d4f86:	2501      	movne	r5, #1
   d4f88:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d4f8a:	d102      	bne.n	d4f92 <_ZN4MQTT11isConnectedEv+0x18>
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	f002 ff07 	bl	d7da0 <_ZN9TCPClient4stopEv>
    return rc;
}
   d4f92:	4628      	mov	r0, r5
   d4f94:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d4f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f9c:	b088      	sub	sp, #32
   d4f9e:	4604      	mov	r4, r0
   d4fa0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d4fa4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d4fa8:	4689      	mov	r9, r1
   d4faa:	4617      	mov	r7, r2
   d4fac:	461e      	mov	r6, r3
    if (!isConnected()) {
   d4fae:	f7ff ffe4 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d4fb2:	4605      	mov	r5, r0
   d4fb4:	2800      	cmp	r0, #0
   d4fb6:	f040 80cb 	bne.w	d5150 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d4fba:	4621      	mov	r1, r4
   d4fbc:	a801      	add	r0, sp, #4
   d4fbe:	f7ff fe8f 	bl	d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d4fc2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4fc4:	2900      	cmp	r1, #0
   d4fc6:	f040 8087 	bne.w	d50d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d4fca:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4fce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4fd0:	462b      	mov	r3, r5
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	f002 ff42 	bl	d7e5c <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d4fd8:	2800      	cmp	r0, #0
   d4fda:	d079      	beq.n	d50d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d4fdc:	2301      	movs	r3, #1
   d4fde:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d4fe0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4fe4:	69e2      	ldr	r2, [r4, #28]
   d4fe6:	2b04      	cmp	r3, #4
   d4fe8:	f040 8081 	bne.w	d50ee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4fec:	4b59      	ldr	r3, [pc, #356]	; (d5154 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d4fee:	6818      	ldr	r0, [r3, #0]
   d4ff0:	8899      	ldrh	r1, [r3, #4]
   d4ff2:	799b      	ldrb	r3, [r3, #6]
   d4ff4:	f8ad 100c 	strh.w	r1, [sp, #12]
   d4ff8:	f88d 300e 	strb.w	r3, [sp, #14]
   d4ffc:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4ffe:	f8c2 0005 	str.w	r0, [r2, #5]
   d5002:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d5006:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d500a:	f8a2 1009 	strh.w	r1, [r2, #9]
   d500e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d5010:	230c      	movs	r3, #12
            if (willTopic) {
   d5012:	f1b8 0f00 	cmp.w	r8, #0
   d5016:	d07f      	beq.n	d5118 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5018:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d501c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d5020:	0140      	lsls	r0, r0, #5
   d5022:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d5026:	f040 0006 	orr.w	r0, r0, #6
   d502a:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d502c:	f1ba 0f00 	cmp.w	sl, #0
   d5030:	d101      	bne.n	d5036 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d5032:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d5036:	b11f      	cbz	r7, d5040 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d5038:	2e00      	cmp	r6, #0
   d503a:	d16f      	bne.n	d511c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d503c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d5040:	69e2      	ldr	r2, [r4, #28]
   d5042:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d5044:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5046:	69e1      	ldr	r1, [r4, #28]
   d5048:	1c58      	adds	r0, r3, #1
   d504a:	1212      	asrs	r2, r2, #8
   d504c:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d504e:	1c9a      	adds	r2, r3, #2
   d5050:	69e1      	ldr	r1, [r4, #28]
   d5052:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5054:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5056:	3303      	adds	r3, #3
   d5058:	69e2      	ldr	r2, [r4, #28]
   d505a:	4649      	mov	r1, r9
   d505c:	4620      	mov	r0, r4
   d505e:	f7ff ff71 	bl	d4f44 <_ZN4MQTT11writeStringEPKcPht>
   d5062:	4603      	mov	r3, r0
            if (willTopic) {
   d5064:	f1b8 0f00 	cmp.w	r8, #0
   d5068:	d00b      	beq.n	d5082 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d506a:	69e2      	ldr	r2, [r4, #28]
   d506c:	4641      	mov	r1, r8
   d506e:	4620      	mov	r0, r4
   d5070:	f7ff ff68 	bl	d4f44 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5074:	69e2      	ldr	r2, [r4, #28]
   d5076:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d5078:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d507a:	4620      	mov	r0, r4
   d507c:	f7ff ff62 	bl	d4f44 <_ZN4MQTT11writeStringEPKcPht>
   d5080:	4603      	mov	r3, r0
            if(user != NULL) {
   d5082:	b167      	cbz	r7, d509e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d5084:	69e2      	ldr	r2, [r4, #28]
   d5086:	4639      	mov	r1, r7
   d5088:	4620      	mov	r0, r4
   d508a:	f7ff ff5b 	bl	d4f44 <_ZN4MQTT11writeStringEPKcPht>
   d508e:	4603      	mov	r3, r0
                if(pass != NULL) {
   d5090:	b12e      	cbz	r6, d509e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d5092:	69e2      	ldr	r2, [r4, #28]
   d5094:	4631      	mov	r1, r6
   d5096:	4620      	mov	r0, r4
   d5098:	f7ff ff54 	bl	d4f44 <_ZN4MQTT11writeStringEPKcPht>
   d509c:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d509e:	3b05      	subs	r3, #5
   d50a0:	69e2      	ldr	r2, [r4, #28]
   d50a2:	b29b      	uxth	r3, r3
   d50a4:	2110      	movs	r1, #16
   d50a6:	4620      	mov	r0, r4
   d50a8:	f7ff fef1 	bl	d4e8e <_ZN4MQTT5writeEhPht>
   d50ac:	f001 fcc8 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d50b0:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d50b4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d50b8:	4620      	mov	r0, r4
   d50ba:	f002 fe17 	bl	d7cec <_ZN9TCPClient9availableEv>
   d50be:	bb80      	cbnz	r0, d5122 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d50c0:	f001 fcbe 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d50c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d50c6:	1ac0      	subs	r0, r0, r3
   d50c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d50ca:	4373      	muls	r3, r6
   d50cc:	4298      	cmp	r0, r3
   d50ce:	d9f3      	bls.n	d50b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d50d0:	4620      	mov	r0, r4
   d50d2:	f002 fe65 	bl	d7da0 <_ZN9TCPClient4stopEv>
   d50d6:	e034      	b.n	d5142 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d50d8:	a802      	add	r0, sp, #8
   d50da:	f002 faf3 	bl	d76c4 <_ZN9IPAddressC1EPKh>
   d50de:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d50e2:	462b      	mov	r3, r5
   d50e4:	a902      	add	r1, sp, #8
   d50e6:	4620      	mov	r0, r4
   d50e8:	f002 fd85 	bl	d7bf6 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d50ec:	e774      	b.n	d4fd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d50ee:	4b1a      	ldr	r3, [pc, #104]	; (d5158 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d50f0:	6818      	ldr	r0, [r3, #0]
   d50f2:	6859      	ldr	r1, [r3, #4]
   d50f4:	7a1b      	ldrb	r3, [r3, #8]
   d50f6:	f10d 0c08 	add.w	ip, sp, #8
   d50fa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d50fe:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5102:	ab02      	add	r3, sp, #8
   d5104:	cb03      	ldmia	r3!, {r0, r1}
   d5106:	f8c2 0005 	str.w	r0, [r2, #5]
   d510a:	f8c2 1009 	str.w	r1, [r2, #9]
   d510e:	f89c 3000 	ldrb.w	r3, [ip]
   d5112:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5114:	230e      	movs	r3, #14
   d5116:	e77c      	b.n	d5012 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d5118:	2002      	movs	r0, #2
   d511a:	e787      	b.n	d502c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d511c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d5120:	e78e      	b.n	d5040 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d5122:	a902      	add	r1, sp, #8
   d5124:	4620      	mov	r0, r4
   d5126:	f7ff fe51 	bl	d4dcc <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d512a:	2804      	cmp	r0, #4
   d512c:	d1d0      	bne.n	d50d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d512e:	69e3      	ldr	r3, [r4, #28]
   d5130:	78de      	ldrb	r6, [r3, #3]
   d5132:	2e00      	cmp	r6, #0
   d5134:	d1cc      	bne.n	d50d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d5136:	f001 fc83 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d513a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d513c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d513e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d5142:	a801      	add	r0, sp, #4
   d5144:	f7ff fdd7 	bl	d4cf6 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5148:	4628      	mov	r0, r5
   d514a:	b008      	add	sp, #32
   d514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d5150:	2500      	movs	r5, #0
   d5152:	e7f9      	b.n	d5148 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d5154:	000d8824 	.word	0x000d8824
   d5158:	000d882b 	.word	0x000d882b

000d515c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d515c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d515e:	2301      	movs	r3, #1
   d5160:	2204      	movs	r2, #4
   d5162:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d5166:	2300      	movs	r3, #0
   d5168:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d516c:	e9cd 3300 	strd	r3, r3, [sp]
   d5170:	461a      	mov	r2, r3
   d5172:	f7ff ff11 	bl	d4f98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5176:	b007      	add	sp, #28
   d5178:	f85d fb04 	ldr.w	pc, [sp], #4

000d517c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d517c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5180:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d5184:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5188:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d518c:	4604      	mov	r4, r0
   d518e:	468b      	mov	fp, r1
   d5190:	4616      	mov	r6, r2
   d5192:	461f      	mov	r7, r3
    if (isConnected()) {
   d5194:	f7ff fef1 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d5198:	4682      	mov	sl, r0
   d519a:	2800      	cmp	r0, #0
   d519c:	d051      	beq.n	d5242 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d519e:	4621      	mov	r1, r4
   d51a0:	a801      	add	r0, sp, #4
   d51a2:	f7ff fd9d 	bl	d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d51a6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d51aa:	69e0      	ldr	r0, [r4, #28]
   d51ac:	2100      	movs	r1, #0
   d51ae:	f003 f9f9 	bl	d85a4 <memset>
        length = writeString(topic, buffer, length);
   d51b2:	2305      	movs	r3, #5
   d51b4:	69e2      	ldr	r2, [r4, #28]
   d51b6:	4659      	mov	r1, fp
   d51b8:	4620      	mov	r0, r4
   d51ba:	f7ff fec3 	bl	d4f44 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d51be:	1e6b      	subs	r3, r5, #1
   d51c0:	2b01      	cmp	r3, #1
   d51c2:	d815      	bhi.n	d51f0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d51c4:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d51c6:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d51c8:	3101      	adds	r1, #1
   d51ca:	b289      	uxth	r1, r1
   d51cc:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d51ce:	1209      	asrs	r1, r1, #8
   d51d0:	5419      	strb	r1, [r3, r0]
   d51d2:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d51d4:	69e3      	ldr	r3, [r4, #28]
   d51d6:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d51d8:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d51da:	3002      	adds	r0, #2
   d51dc:	5499      	strb	r1, [r3, r2]
   d51de:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d51e0:	f1b8 0f00 	cmp.w	r8, #0
   d51e4:	d004      	beq.n	d51f0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d51e6:	8c23      	ldrh	r3, [r4, #32]
   d51e8:	1c5a      	adds	r2, r3, #1
   d51ea:	8422      	strh	r2, [r4, #32]
   d51ec:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d51f0:	2100      	movs	r1, #0
   d51f2:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d51f4:	428f      	cmp	r7, r1
   d51f6:	69e2      	ldr	r2, [r4, #28]
   d51f8:	b29b      	uxth	r3, r3
   d51fa:	d90a      	bls.n	d5212 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d51fc:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d5200:	459c      	cmp	ip, r3
   d5202:	d906      	bls.n	d5212 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d5204:	f816 c001 	ldrb.w	ip, [r6, r1]
   d5208:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d520c:	3101      	adds	r1, #1
   d520e:	b289      	uxth	r1, r1
   d5210:	e7ef      	b.n	d51f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d5212:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d5216:	2900      	cmp	r1, #0
   d5218:	bf0c      	ite	eq
   d521a:	2130      	moveq	r1, #48	; 0x30
   d521c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d521e:	f1b9 0f00 	cmp.w	r9, #0
   d5222:	d001      	beq.n	d5228 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d5224:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d5228:	2d02      	cmp	r5, #2
   d522a:	d10e      	bne.n	d524a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d522c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d5230:	3b05      	subs	r3, #5
   d5232:	b29b      	uxth	r3, r3
   d5234:	4620      	mov	r0, r4
   d5236:	f7ff fe2a 	bl	d4e8e <_ZN4MQTT5writeEhPht>
   d523a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d523c:	a801      	add	r0, sp, #4
   d523e:	f7ff fd5a 	bl	d4cf6 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5242:	4650      	mov	r0, sl
   d5244:	b003      	add	sp, #12
   d5246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d524a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d524c:	bf08      	it	eq
   d524e:	f041 0102 	orreq.w	r1, r1, #2
   d5252:	e7ed      	b.n	d5230 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d5254 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5256:	9c08      	ldr	r4, [sp, #32]
   d5258:	9403      	str	r4, [sp, #12]
   d525a:	2400      	movs	r4, #0
   d525c:	9402      	str	r4, [sp, #8]
   d525e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5262:	9401      	str	r4, [sp, #4]
   d5264:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5268:	9400      	str	r4, [sp, #0]
   d526a:	f7ff ff87 	bl	d517c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d526e:	b004      	add	sp, #16
   d5270:	bd10      	pop	{r4, pc}

000d5272 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d5272:	b530      	push	{r4, r5, lr}
   d5274:	b087      	sub	sp, #28
   d5276:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5278:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d527a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d527c:	9204      	str	r2, [sp, #16]
   d527e:	f003 f9c7 	bl	d8610 <strlen>
   d5282:	2500      	movs	r5, #0
   d5284:	4603      	mov	r3, r0
   d5286:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d528a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d528e:	9500      	str	r5, [sp, #0]
   d5290:	4620      	mov	r0, r4
   d5292:	f7ff ffdf 	bl	d5254 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5296:	b007      	add	sp, #28
   d5298:	bd30      	pop	{r4, r5, pc}

000d529a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d529a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d529c:	4604      	mov	r4, r0
   d529e:	460e      	mov	r6, r1
    if (isConnected()) {
   d52a0:	f7ff fe6b 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d52a4:	4605      	mov	r5, r0
   d52a6:	b1c8      	cbz	r0, d52dc <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d52a8:	4621      	mov	r1, r4
   d52aa:	a801      	add	r0, sp, #4
   d52ac:	f7ff fd18 	bl	d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d52b0:	69e3      	ldr	r3, [r4, #28]
   d52b2:	2262      	movs	r2, #98	; 0x62
   d52b4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d52b6:	69e3      	ldr	r3, [r4, #28]
   d52b8:	2202      	movs	r2, #2
   d52ba:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d52bc:	69e3      	ldr	r3, [r4, #28]
   d52be:	1232      	asrs	r2, r6, #8
   d52c0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d52c2:	69e3      	ldr	r3, [r4, #28]
   d52c4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d52c6:	69e1      	ldr	r1, [r4, #28]
   d52c8:	2204      	movs	r2, #4
   d52ca:	4620      	mov	r0, r4
   d52cc:	f002 fb71 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
   d52d0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d52d2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d52d4:	bf18      	it	ne
   d52d6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d52d8:	f7ff fd0d 	bl	d4cf6 <_ZN4MQTT11MutexLockerD1Ev>
}
   d52dc:	4628      	mov	r0, r5
   d52de:	b002      	add	sp, #8
   d52e0:	bd70      	pop	{r4, r5, r6, pc}

000d52e2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d52e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d52e4:	4604      	mov	r4, r0
   d52e6:	460e      	mov	r6, r1
    if (isConnected()) {
   d52e8:	f7ff fe47 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d52ec:	4605      	mov	r5, r0
   d52ee:	b1c8      	cbz	r0, d5324 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d52f0:	4621      	mov	r1, r4
   d52f2:	a801      	add	r0, sp, #4
   d52f4:	f7ff fcf4 	bl	d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d52f8:	69e3      	ldr	r3, [r4, #28]
   d52fa:	2272      	movs	r2, #114	; 0x72
   d52fc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d52fe:	69e3      	ldr	r3, [r4, #28]
   d5300:	2202      	movs	r2, #2
   d5302:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5304:	69e3      	ldr	r3, [r4, #28]
   d5306:	1232      	asrs	r2, r6, #8
   d5308:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d530a:	69e3      	ldr	r3, [r4, #28]
   d530c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d530e:	69e1      	ldr	r1, [r4, #28]
   d5310:	2204      	movs	r2, #4
   d5312:	4620      	mov	r0, r4
   d5314:	f002 fb4d 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
   d5318:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d531a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d531c:	bf18      	it	ne
   d531e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d5320:	f7ff fce9 	bl	d4cf6 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5324:	4628      	mov	r0, r5
   d5326:	b002      	add	sp, #8
   d5328:	bd70      	pop	{r4, r5, r6, pc}

000d532a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d532a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d532e:	ed2d 8b02 	vpush	{d8}
   d5332:	b087      	sub	sp, #28
   d5334:	af00      	add	r7, sp, #0
   d5336:	4604      	mov	r4, r0
    if (isConnected()) {
   d5338:	f7ff fe1f 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d533c:	4681      	mov	r9, r0
   d533e:	b1f8      	cbz	r0, d5380 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d5340:	4621      	mov	r1, r4
   d5342:	f107 0014 	add.w	r0, r7, #20
   d5346:	f7ff fccb 	bl	d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>
   d534a:	f001 fb79 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d534e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5354:	4353      	muls	r3, r2
   d5356:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5358:	1a82      	subs	r2, r0, r2
   d535a:	429a      	cmp	r2, r3
   d535c:	4606      	mov	r6, r0
   d535e:	d803      	bhi.n	d5368 <_ZN4MQTT4loopEv+0x3e>
   d5360:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5362:	1a82      	subs	r2, r0, r2
   d5364:	4293      	cmp	r3, r2
   d5366:	d221      	bcs.n	d53ac <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d5368:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d536c:	b17b      	cbz	r3, d538e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d536e:	4620      	mov	r0, r4
   d5370:	f002 fd16 	bl	d7da0 <_ZN9TCPClient4stopEv>
                return false;
   d5374:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d5378:	f107 0014 	add.w	r0, r7, #20
   d537c:	f7ff fcbb 	bl	d4cf6 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5380:	4648      	mov	r0, r9
   d5382:	371c      	adds	r7, #28
   d5384:	46bd      	mov	sp, r7
   d5386:	ecbd 8b02 	vpop	{d8}
   d538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d538e:	69e2      	ldr	r2, [r4, #28]
   d5390:	21c0      	movs	r1, #192	; 0xc0
   d5392:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5394:	69e2      	ldr	r2, [r4, #28]
   d5396:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5398:	69e1      	ldr	r1, [r4, #28]
   d539a:	2202      	movs	r2, #2
   d539c:	4620      	mov	r0, r4
   d539e:	f002 fb08 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d53a2:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d53a6:	2301      	movs	r3, #1
   d53a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d53ac:	4620      	mov	r0, r4
   d53ae:	f002 fc9d 	bl	d7cec <_ZN9TCPClient9availableEv>
   d53b2:	2800      	cmp	r0, #0
   d53b4:	d0e0      	beq.n	d5378 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d53b6:	f107 0113 	add.w	r1, r7, #19
   d53ba:	4620      	mov	r0, r4
   d53bc:	f7ff fd06 	bl	d4dcc <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d53c0:	4683      	mov	fp, r0
   d53c2:	2800      	cmp	r0, #0
   d53c4:	d0d8      	beq.n	d5378 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d53c6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d53c8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d53ca:	7819      	ldrb	r1, [r3, #0]
   d53cc:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d53d0:	2a30      	cmp	r2, #48	; 0x30
   d53d2:	d17f      	bne.n	d54d4 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d53d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d53d8:	f1ba 0f00 	cmp.w	sl, #0
   d53dc:	d0cc      	beq.n	d5378 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d53de:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d53e2:	466a      	mov	r2, sp
   d53e4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d53e8:	eb03 020c 	add.w	r2, r3, ip
   d53ec:	7855      	ldrb	r5, [r2, #1]
   d53ee:	7891      	ldrb	r1, [r2, #2]
   d53f0:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d53f4:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d53f6:	f105 0208 	add.w	r2, r5, #8
   d53fa:	4669      	mov	r1, sp
   d53fc:	08d2      	lsrs	r2, r2, #3
   d53fe:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d5402:	4695      	mov	sp, r2
   d5404:	f10c 0203 	add.w	r2, ip, #3
   d5408:	60fa      	str	r2, [r7, #12]
   d540a:	eb03 0e02 	add.w	lr, r3, r2
   d540e:	eb0d 0205 	add.w	r2, sp, r5
   d5412:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d5414:	f8c7 d008 	str.w	sp, [r7, #8]
   d5418:	607a      	str	r2, [r7, #4]
   d541a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d541e:	428a      	cmp	r2, r1
   d5420:	d006      	beq.n	d5430 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d5422:	460a      	mov	r2, r1
   d5424:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d5428:	f802 8b01 	strb.w	r8, [r2], #1
   d542c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d542e:	e7f4      	b.n	d541a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d5430:	2200      	movs	r2, #0
   d5432:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5434:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5438:	68f9      	ldr	r1, [r7, #12]
   d543a:	f008 0806 	and.w	r8, r8, #6
   d543e:	ebab 020c 	sub.w	r2, fp, ip
   d5442:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5444:	f1b8 0f02 	cmp.w	r8, #2
   d5448:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d544c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d544e:	d125      	bne.n	d549c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5450:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5454:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d5456:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5458:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d545c:	f10c 0105 	add.w	r1, ip, #5
   d5460:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d5462:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5464:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d5468:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d546a:	69e3      	ldr	r3, [r4, #28]
   d546c:	2240      	movs	r2, #64	; 0x40
   d546e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d5470:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5472:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d5476:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d547a:	69e3      	ldr	r3, [r4, #28]
   d547c:	ea4f 222b 	mov.w	r2, fp, asr #8
   d5480:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d5482:	69e3      	ldr	r3, [r4, #28]
   d5484:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d5488:	69e1      	ldr	r1, [r4, #28]
   d548a:	2204      	movs	r2, #4
   d548c:	4620      	mov	r0, r4
   d548e:	f002 fa90 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d5492:	6266      	str	r6, [r4, #36]	; 0x24
   d5494:	ee18 3a10 	vmov	r3, s16
   d5498:	469d      	mov	sp, r3
   d549a:	e76d      	b.n	d5378 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d549c:	f1b8 0f04 	cmp.w	r8, #4
   d54a0:	d115      	bne.n	d54ce <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d54a2:	f813 e001 	ldrb.w	lr, [r3, r1]
   d54a6:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d54a8:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d54aa:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d54ae:	f10c 0105 	add.w	r1, ip, #5
   d54b2:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d54b4:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d54b6:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d54ba:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d54bc:	69e3      	ldr	r3, [r4, #28]
   d54be:	2250      	movs	r2, #80	; 0x50
   d54c0:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d54c2:	69e3      	ldr	r3, [r4, #28]
   d54c4:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d54c6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d54ca:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d54cc:	e7d5      	b.n	d547a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d54ce:	4419      	add	r1, r3
   d54d0:	47d0      	blx	sl
   d54d2:	e7df      	b.n	d5494 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d54d4:	2a50      	cmp	r2, #80	; 0x50
   d54d6:	d108      	bne.n	d54ea <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d54d8:	789a      	ldrb	r2, [r3, #2]
   d54da:	78d9      	ldrb	r1, [r3, #3]
   d54dc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d54e0:	b289      	uxth	r1, r1
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7ff fed9 	bl	d529a <_ZN4MQTT14publishReleaseEt>
   d54e8:	e746      	b.n	d5378 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d54ea:	2a40      	cmp	r2, #64	; 0x40
   d54ec:	d112      	bne.n	d5514 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d54ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d54f0:	2a00      	cmp	r2, #0
   d54f2:	f43f af41 	beq.w	d5378 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d54f6:	f1bb 0f04 	cmp.w	fp, #4
   d54fa:	f47f af3d 	bne.w	d5378 <_ZN4MQTT4loopEv+0x4e>
   d54fe:	f011 0f06 	tst.w	r1, #6
   d5502:	f47f af39 	bne.w	d5378 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d5506:	7899      	ldrb	r1, [r3, #2]
   d5508:	78d8      	ldrb	r0, [r3, #3]
   d550a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d550e:	b280      	uxth	r0, r0
   d5510:	4790      	blx	r2
   d5512:	e731      	b.n	d5378 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d5514:	2a60      	cmp	r2, #96	; 0x60
   d5516:	d108      	bne.n	d552a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d5518:	789a      	ldrb	r2, [r3, #2]
   d551a:	78d9      	ldrb	r1, [r3, #3]
   d551c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d5520:	b289      	uxth	r1, r1
   d5522:	4620      	mov	r0, r4
   d5524:	f7ff fedd 	bl	d52e2 <_ZN4MQTT15publishCompleteEt>
   d5528:	e726      	b.n	d5378 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d552a:	2a70      	cmp	r2, #112	; 0x70
   d552c:	d0df      	beq.n	d54ee <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d552e:	2a90      	cmp	r2, #144	; 0x90
   d5530:	f43f af22 	beq.w	d5378 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d5534:	2ac0      	cmp	r2, #192	; 0xc0
   d5536:	d10a      	bne.n	d554e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d5538:	22d0      	movs	r2, #208	; 0xd0
   d553a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d553c:	69e3      	ldr	r3, [r4, #28]
   d553e:	2200      	movs	r2, #0
   d5540:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d5542:	69e1      	ldr	r1, [r4, #28]
   d5544:	2202      	movs	r2, #2
   d5546:	4620      	mov	r0, r4
   d5548:	f002 fa33 	bl	d79b2 <_ZN9TCPClient5writeEPKhj>
   d554c:	e714      	b.n	d5378 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d554e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d5550:	bf04      	itt	eq
   d5552:	2300      	moveq	r3, #0
   d5554:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d5558:	e70e      	b.n	d5378 <_ZN4MQTT4loopEv+0x4e>

000d555a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d555a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d555c:	4604      	mov	r4, r0
   d555e:	460f      	mov	r7, r1
   d5560:	4616      	mov	r6, r2
    if (isConnected()) {
   d5562:	f7ff fd0a 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d5566:	4605      	mov	r5, r0
   d5568:	b310      	cbz	r0, d55b0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d556a:	4621      	mov	r1, r4
   d556c:	a801      	add	r0, sp, #4
   d556e:	f7ff fbb7 	bl	d4ce0 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d5572:	8c23      	ldrh	r3, [r4, #32]
   d5574:	3301      	adds	r3, #1
   d5576:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5578:	b1eb      	cbz	r3, d55b6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d557a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d557c:	8c23      	ldrh	r3, [r4, #32]
   d557e:	69e2      	ldr	r2, [r4, #28]
   d5580:	121b      	asrs	r3, r3, #8
   d5582:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5584:	69e3      	ldr	r3, [r4, #28]
   d5586:	8c22      	ldrh	r2, [r4, #32]
   d5588:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d558a:	69e2      	ldr	r2, [r4, #28]
   d558c:	2307      	movs	r3, #7
   d558e:	4639      	mov	r1, r7
   d5590:	4620      	mov	r0, r4
   d5592:	f7ff fcd7 	bl	d4f44 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5596:	69e3      	ldr	r3, [r4, #28]
   d5598:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d559a:	3804      	subs	r0, #4
   d559c:	b283      	uxth	r3, r0
   d559e:	69e2      	ldr	r2, [r4, #28]
   d55a0:	2182      	movs	r1, #130	; 0x82
   d55a2:	4620      	mov	r0, r4
   d55a4:	f7ff fc73 	bl	d4e8e <_ZN4MQTT5writeEhPht>
   d55a8:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d55aa:	a801      	add	r0, sp, #4
   d55ac:	f7ff fba3 	bl	d4cf6 <_ZN4MQTT11MutexLockerD1Ev>
}
   d55b0:	4628      	mov	r0, r5
   d55b2:	b003      	add	sp, #12
   d55b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d55b6:	2301      	movs	r3, #1
   d55b8:	e7df      	b.n	d557a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d55ba <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d55ba:	2200      	movs	r2, #0
   d55bc:	f7ff bfcd 	b.w	d555a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d55c0 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d55c0:	b538      	push	{r3, r4, r5, lr}
   d55c2:	4605      	mov	r5, r0
    if (isConnected()) {
   d55c4:	f7ff fcd9 	bl	d4f7a <_ZN4MQTT11isConnectedEv>
   d55c8:	b110      	cbz	r0, d55d0 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d55ca:	4628      	mov	r0, r5
   d55cc:	f7ff fc9d 	bl	d4f0a <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d55d0:	69e8      	ldr	r0, [r5, #28]
   d55d2:	b108      	cbz	r0, d55d8 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d55d4:	f7fe fd63 	bl	d409e <_ZdaPv>
MQTT::~MQTT() {
   d55d8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d55dc:	f001 fdd5 	bl	d718a <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   d55e0:	69ac      	ldr	r4, [r5, #24]
   d55e2:	4b0a      	ldr	r3, [pc, #40]	; (d560c <_ZN4MQTTD1Ev+0x4c>)
   d55e4:	602b      	str	r3, [r5, #0]
   d55e6:	b17c      	cbz	r4, d5608 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d55e8:	6863      	ldr	r3, [r4, #4]
   d55ea:	3b01      	subs	r3, #1
   d55ec:	6063      	str	r3, [r4, #4]
   d55ee:	b95b      	cbnz	r3, d5608 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d55f0:	6823      	ldr	r3, [r4, #0]
   d55f2:	4620      	mov	r0, r4
   d55f4:	689b      	ldr	r3, [r3, #8]
   d55f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d55f8:	68a3      	ldr	r3, [r4, #8]
   d55fa:	3b01      	subs	r3, #1
   d55fc:	60a3      	str	r3, [r4, #8]
   d55fe:	b91b      	cbnz	r3, d5608 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d5600:	6823      	ldr	r3, [r4, #0]
   d5602:	4620      	mov	r0, r4
   d5604:	68db      	ldr	r3, [r3, #12]
   d5606:	4798      	blx	r3
}
   d5608:	4628      	mov	r0, r5
   d560a:	bd38      	pop	{r3, r4, r5, pc}
   d560c:	000d98ac 	.word	0x000d98ac

000d5610 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5610:	4770      	bx	lr

000d5612 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5612:	b510      	push	{r4, lr}
  }
   d5614:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5616:	4604      	mov	r4, r0
  }
   d5618:	f002 fe89 	bl	d832e <_ZdlPvj>
   d561c:	4620      	mov	r0, r4
   d561e:	bd10      	pop	{r4, pc}

000d5620 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5620:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5622:	4604      	mov	r4, r0
   d5624:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5626:	7922      	ldrb	r2, [r4, #4]
   d5628:	68a3      	ldr	r3, [r4, #8]
   d562a:	b132      	cbz	r2, d563a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d562c:	b9a3      	cbnz	r3, d5658 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d562e:	490b      	ldr	r1, [pc, #44]	; (d565c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5630:	b002      	add	sp, #8
   d5632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5636:	f001 be67 	b.w	d7308 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d563a:	4a09      	ldr	r2, [pc, #36]	; (d5660 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d563c:	7b26      	ldrb	r6, [r4, #12]
   d563e:	4d09      	ldr	r5, [pc, #36]	; (d5664 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5640:	4909      	ldr	r1, [pc, #36]	; (d5668 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5642:	7b64      	ldrb	r4, [r4, #13]
   d5644:	2e01      	cmp	r6, #1
   d5646:	bf18      	it	ne
   d5648:	4629      	movne	r1, r5
   d564a:	e9cd 1400 	strd	r1, r4, [sp]
   d564e:	4907      	ldr	r1, [pc, #28]	; (d566c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5650:	f7fe fd6c 	bl	d412c <_ZN5Print6printfEPKcz>
  }
   d5654:	b002      	add	sp, #8
   d5656:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5658:	4a05      	ldr	r2, [pc, #20]	; (d5670 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d565a:	e7ef      	b.n	d563c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d565c:	000d8845 	.word	0x000d8845
   d5660:	000d883c 	.word	0x000d883c
   d5664:	000d8841 	.word	0x000d8841
   d5668:	000d883d 	.word	0x000d883d
   d566c:	000d885b 	.word	0x000d885b
   d5670:	000d8834 	.word	0x000d8834

000d5674 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d5674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5678:	b085      	sub	sp, #20
   d567a:	461f      	mov	r7, r3
   d567c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d5680:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5684:	eba8 0902 	sub.w	r9, r8, r2
   d5688:	eba7 0a01 	sub.w	sl, r7, r1
   d568c:	f1b9 0f00 	cmp.w	r9, #0
   d5690:	bfb8      	it	lt
   d5692:	f1c9 0900 	rsblt	r9, r9, #0
   d5696:	f1ba 0f00 	cmp.w	sl, #0
   d569a:	bfb8      	it	lt
   d569c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d56a0:	45d1      	cmp	r9, sl
        uint16_t color) {
   d56a2:	4683      	mov	fp, r0
   d56a4:	460c      	mov	r4, r1
   d56a6:	4615      	mov	r5, r2
    if (steep) {
   d56a8:	dd04      	ble.n	d56b4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d56aa:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d56ac:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d56ae:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d56b0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d56b2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d56b4:	42bc      	cmp	r4, r7
   d56b6:	dd05      	ble.n	d56c4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d56b8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d56ba:	4645      	mov	r5, r8
   d56bc:	4690      	mov	r8, r2
    if (x0 > x1) {
   d56be:	4622      	mov	r2, r4
   d56c0:	463c      	mov	r4, r7
   d56c2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d56c4:	1b3e      	subs	r6, r7, r4
   d56c6:	b2b2      	uxth	r2, r6
   d56c8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d56ca:	eba8 0205 	sub.w	r2, r8, r5
   d56ce:	2a00      	cmp	r2, #0
   d56d0:	bfb8      	it	lt
   d56d2:	4252      	neglt	r2, r2
   d56d4:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d56d6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d56da:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d56de:	4545      	cmp	r5, r8
   d56e0:	bfb4      	ite	lt
   d56e2:	2201      	movlt	r2, #1
   d56e4:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d56e8:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d56ea:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d56ec:	42bc      	cmp	r4, r7
   d56ee:	dc1c      	bgt.n	d572a <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d56f0:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d56f4:	9303      	str	r3, [sp, #12]
        if (steep) {
   d56f6:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d56f8:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d56fc:	bfc7      	ittee	gt
   d56fe:	4629      	movgt	r1, r5
   d5700:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d5702:	462a      	movle	r2, r5
   d5704:	4621      	movle	r1, r4
   d5706:	4658      	mov	r0, fp
   d5708:	47c0      	blx	r8
        }
        err -= dy;
   d570a:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d570c:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d570e:	1ab6      	subs	r6, r6, r2
   d5710:	b2b1      	uxth	r1, r6
   d5712:	b236      	sxth	r6, r6
        if (err < 0) {
   d5714:	2e00      	cmp	r6, #0
   d5716:	da05      	bge.n	d5724 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d5718:	9a02      	ldr	r2, [sp, #8]
   d571a:	4415      	add	r5, r2
            err += dx;
   d571c:	9a00      	ldr	r2, [sp, #0]
   d571e:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d5720:	b22d      	sxth	r5, r5
            err += dx;
   d5722:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d5724:	3401      	adds	r4, #1
   d5726:	b224      	sxth	r4, r4
   d5728:	e7e0      	b.n	d56ec <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d572a:	b005      	add	sp, #20
   d572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5730 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d5730:	4770      	bx	lr

000d5732 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d5732:	b410      	push	{r4}
    drawPixel(x, y, color);
   d5734:	6804      	ldr	r4, [r0, #0]
   d5736:	6924      	ldr	r4, [r4, #16]
   d5738:	46a4      	mov	ip, r4
}
   d573a:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d573e:	4760      	bx	ip

000d5740 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d5740:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d5742:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d5744:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d5748:	9502      	str	r5, [sp, #8]
   d574a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d574c:	46a4      	mov	ip, r4
}
   d574e:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d5750:	4760      	bx	ip

000d5752 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d5752:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d5754:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d5756:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d575a:	9502      	str	r5, [sp, #8]
   d575c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d575e:	46a4      	mov	ip, r4
}
   d5760:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d5762:	4760      	bx	ip

000d5764 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5764:	b470      	push	{r4, r5, r6}
   d5766:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d576a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d576e:	6804      	ldr	r4, [r0, #0]
   d5770:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d5774:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d5776:	46a4      	mov	ip, r4
}
   d5778:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d577a:	4760      	bx	ip

000d577c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d577c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5780:	461c      	mov	r4, r3
    startWrite();
   d5782:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d5784:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d5788:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d578a:	4605      	mov	r5, r0
   d578c:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d578e:	3c01      	subs	r4, #1
   d5790:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d5792:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d5794:	b224      	sxth	r4, r4
    startWrite();
   d5796:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d5798:	682b      	ldr	r3, [r5, #0]
   d579a:	f8cd 8004 	str.w	r8, [sp, #4]
   d579e:	9400      	str	r4, [sp, #0]
   d57a0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d57a2:	4628      	mov	r0, r5
   d57a4:	463b      	mov	r3, r7
   d57a6:	4632      	mov	r2, r6
   d57a8:	4639      	mov	r1, r7
   d57aa:	47a0      	blx	r4
    endWrite();
   d57ac:	682b      	ldr	r3, [r5, #0]
   d57ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57b0:	4628      	mov	r0, r5
}
   d57b2:	b002      	add	sp, #8
   d57b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d57b8:	4718      	bx	r3

000d57ba <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d57ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d57be:	461d      	mov	r5, r3
    startWrite();
   d57c0:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d57c2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d57c6:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d57c8:	4604      	mov	r4, r0
   d57ca:	4617      	mov	r7, r2
   d57cc:	460e      	mov	r6, r1
    startWrite();
   d57ce:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d57d0:	e9cd 7800 	strd	r7, r8, [sp]
   d57d4:	6822      	ldr	r2, [r4, #0]
   d57d6:	1e6b      	subs	r3, r5, #1
   d57d8:	4433      	add	r3, r6
   d57da:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d57dc:	4620      	mov	r0, r4
   d57de:	b21b      	sxth	r3, r3
   d57e0:	463a      	mov	r2, r7
   d57e2:	4631      	mov	r1, r6
   d57e4:	47a8      	blx	r5
    endWrite();
   d57e6:	6823      	ldr	r3, [r4, #0]
   d57e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57ea:	4620      	mov	r0, r4
}
   d57ec:	b002      	add	sp, #8
   d57ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d57f2:	4718      	bx	r3

000d57f4 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d57f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d57f8:	461e      	mov	r6, r3
    startWrite();
   d57fa:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d57fc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d5800:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5802:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5806:	460c      	mov	r4, r1
   d5808:	4605      	mov	r5, r0
   d580a:	4617      	mov	r7, r2
    startWrite();
   d580c:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d580e:	4426      	add	r6, r4
   d5810:	42b4      	cmp	r4, r6
   d5812:	682b      	ldr	r3, [r5, #0]
   d5814:	da0b      	bge.n	d582e <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d5816:	f8cd 8000 	str.w	r8, [sp]
   d581a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d581e:	4621      	mov	r1, r4
   d5820:	464b      	mov	r3, r9
   d5822:	463a      	mov	r2, r7
   d5824:	4628      	mov	r0, r5
   d5826:	3401      	adds	r4, #1
   d5828:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d582a:	b224      	sxth	r4, r4
   d582c:	e7f0      	b.n	d5810 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5830:	4628      	mov	r0, r5
}
   d5832:	b002      	add	sp, #8
   d5834:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5838:	4718      	bx	r3

000d583a <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d583a:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d583c:	6802      	ldr	r2, [r0, #0]
   d583e:	9101      	str	r1, [sp, #4]
   d5840:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5844:	9100      	str	r1, [sp, #0]
   d5846:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d5848:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d584c:	2200      	movs	r2, #0
   d584e:	4611      	mov	r1, r2
   d5850:	47a0      	blx	r4
}
   d5852:	b002      	add	sp, #8
   d5854:	bd10      	pop	{r4, pc}

000d5856 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5856:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d585a:	461d      	mov	r5, r3
    startWrite();
   d585c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d585e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d5862:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5864:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5868:	4604      	mov	r4, r0
   d586a:	460f      	mov	r7, r1
   d586c:	4616      	mov	r6, r2
    startWrite();
   d586e:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d5870:	6823      	ldr	r3, [r4, #0]
   d5872:	f8cd 8000 	str.w	r8, [sp]
   d5876:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d587a:	4632      	mov	r2, r6
   d587c:	462b      	mov	r3, r5
   d587e:	4639      	mov	r1, r7
   d5880:	4620      	mov	r0, r4
   d5882:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d5884:	6823      	ldr	r3, [r4, #0]
   d5886:	f8cd 8000 	str.w	r8, [sp]
   d588a:	f109 32ff 	add.w	r2, r9, #4294967295
   d588e:	4432      	add	r2, r6
   d5890:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5894:	4639      	mov	r1, r7
   d5896:	462b      	mov	r3, r5
   d5898:	4620      	mov	r0, r4
   d589a:	b212      	sxth	r2, r2
   d589c:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d589e:	6823      	ldr	r3, [r4, #0]
   d58a0:	f8cd 8000 	str.w	r8, [sp]
   d58a4:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d58a8:	4632      	mov	r2, r6
   d58aa:	464b      	mov	r3, r9
   d58ac:	4639      	mov	r1, r7
   d58ae:	4620      	mov	r0, r4
   d58b0:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d58b2:	1e6b      	subs	r3, r5, #1
   d58b4:	19d9      	adds	r1, r3, r7
   d58b6:	6823      	ldr	r3, [r4, #0]
   d58b8:	f8cd 8000 	str.w	r8, [sp]
   d58bc:	6a1d      	ldr	r5, [r3, #32]
   d58be:	4620      	mov	r0, r4
   d58c0:	464b      	mov	r3, r9
   d58c2:	4632      	mov	r2, r6
   d58c4:	b209      	sxth	r1, r1
   d58c6:	47a8      	blx	r5
    endWrite();
   d58c8:	6823      	ldr	r3, [r4, #0]
   d58ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58cc:	4620      	mov	r0, r4
}
   d58ce:	b002      	add	sp, #8
   d58d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d58d4:	4718      	bx	r3

000d58d6 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d58d6:	4770      	bx	lr

000d58d8 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d58d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d58dc:	4299      	cmp	r1, r3
        uint16_t color) {
   d58de:	4616      	mov	r6, r2
   d58e0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d58e4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d58e8:	6802      	ldr	r2, [r0, #0]
   d58ea:	4680      	mov	r8, r0
   d58ec:	460d      	mov	r5, r1
   d58ee:	461c      	mov	r4, r3
    if(x0 == x1){
   d58f0:	d113      	bne.n	d591a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d58f2:	42be      	cmp	r6, r7
   d58f4:	bfc8      	it	gt
   d58f6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d58f8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d58fc:	bfc4      	itt	gt
   d58fe:	463e      	movgt	r6, r7
   d5900:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5902:	1c7b      	adds	r3, r7, #1
   d5904:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d5906:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5908:	b21b      	sxth	r3, r3
   d590a:	4632      	mov	r2, r6
   d590c:	4629      	mov	r1, r5
   d590e:	4640      	mov	r0, r8
   d5910:	46a4      	mov	ip, r4
}
   d5912:	b003      	add	sp, #12
   d5914:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5918:	4760      	bx	ip
    } else if(y0 == y1){
   d591a:	42be      	cmp	r6, r7
   d591c:	d10a      	bne.n	d5934 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d591e:	4299      	cmp	r1, r3
   d5920:	bfc2      	ittt	gt
   d5922:	460b      	movgt	r3, r1
   d5924:	4625      	movgt	r5, r4
   d5926:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5928:	1c63      	adds	r3, r4, #1
   d592a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d592e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5930:	1b5b      	subs	r3, r3, r5
   d5932:	e7e9      	b.n	d5908 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5934:	6953      	ldr	r3, [r2, #20]
   d5936:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5938:	e9cd 7900 	strd	r7, r9, [sp]
   d593c:	f8d8 3000 	ldr.w	r3, [r8]
   d5940:	4640      	mov	r0, r8
   d5942:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5944:	4632      	mov	r2, r6
   d5946:	4623      	mov	r3, r4
   d5948:	4629      	mov	r1, r5
   d594a:	47b8      	blx	r7
        endWrite();
   d594c:	f8d8 3000 	ldr.w	r3, [r8]
   d5950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5952:	4640      	mov	r0, r8
}
   d5954:	b003      	add	sp, #12
   d5956:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d595a:	4718      	bx	r3

000d595c <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d595c:	f001 0303 	and.w	r3, r1, #3
   d5960:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5964:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d5966:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d5968:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d596c:	bf59      	ittee	pl
   d596e:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d5970:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d5972:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d5974:	81c3      	strhmi	r3, [r0, #14]
}
   d5976:	4770      	bx	lr

000d5978 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5978:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d597a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d597c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d597e:	4a07      	ldr	r2, [pc, #28]	; (d599c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d5980:	4d07      	ldr	r5, [pc, #28]	; (d59a0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d5982:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d5984:	2400      	movs	r4, #0
    _width    = WIDTH;
   d5986:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d5988:	f04f 31ff 	mov.w	r1, #4294967295
   d598c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d5990:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d5992:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d5994:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d5996:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d5998:	6204      	str	r4, [r0, #32]
}
   d599a:	bd30      	pop	{r4, r5, pc}
   d599c:	01000101 	.word	0x01000101
   d59a0:	000d8d80 	.word	0x000d8d80

000d59a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d59a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59a8:	b089      	sub	sp, #36	; 0x24
   d59aa:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d59ae:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d59b0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d59b4:	9304      	str	r3, [sp, #16]
   d59b6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d59ba:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d59bc:	9305      	str	r3, [sp, #20]
   d59be:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d59c2:	4604      	mov	r4, r0
    startWrite();
   d59c4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d59c6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d59ca:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d59ce:	bf48      	it	mi
   d59d0:	f108 020e 	addmi.w	r2, r8, #14
   d59d4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d59d8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d59da:	4635      	mov	r5, r6
   d59dc:	9b03      	ldr	r3, [sp, #12]
   d59de:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d59e0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d59e4:	189a      	adds	r2, r3, r2
   d59e6:	9b05      	ldr	r3, [sp, #20]
   d59e8:	428b      	cmp	r3, r1
   d59ea:	b212      	sxth	r2, r2
   d59ec:	dd27      	ble.n	d5a3e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d59ee:	9b04      	ldr	r3, [sp, #16]
   d59f0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d59f2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d59f6:	9306      	str	r3, [sp, #24]
   d59f8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d59fc:	4580      	cmp	r8, r0
   d59fe:	fa1f f189 	uxth.w	r1, r9
   d5a02:	dd17      	ble.n	d5a34 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5a04:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5a06:	bf05      	ittet	eq
   d5a08:	9b06      	ldreq	r3, [sp, #24]
   d5a0a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5a0c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5a0e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d5a10:	bf18      	it	ne
   d5a12:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5a14:	062b      	lsls	r3, r5, #24
   d5a16:	d50a      	bpl.n	d5a2e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d5a18:	9b02      	ldr	r3, [sp, #8]
   d5a1a:	6820      	ldr	r0, [r4, #0]
   d5a1c:	9207      	str	r2, [sp, #28]
   d5a1e:	4419      	add	r1, r3
   d5a20:	6983      	ldr	r3, [r0, #24]
   d5a22:	b209      	sxth	r1, r1
   d5a24:	461f      	mov	r7, r3
   d5a26:	4620      	mov	r0, r4
   d5a28:	4653      	mov	r3, sl
   d5a2a:	47b8      	blx	r7
   d5a2c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d5a2e:	f109 0901 	add.w	r9, r9, #1
   d5a32:	e7e1      	b.n	d59f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5a34:	9b01      	ldr	r3, [sp, #4]
   d5a36:	3301      	adds	r3, #1
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	445e      	add	r6, fp
   d5a3c:	e7ce      	b.n	d59dc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d5a3e:	6823      	ldr	r3, [r4, #0]
   d5a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a42:	4620      	mov	r0, r4
}
   d5a44:	b009      	add	sp, #36	; 0x24
   d5a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d5a4a:	4718      	bx	r3

000d5a4c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a50:	ed2d 8b02 	vpush	{d8}
   d5a54:	b091      	sub	sp, #68	; 0x44
   d5a56:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d5a58:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5a5a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d5a5e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d5a62:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d5a66:	9103      	str	r1, [sp, #12]
   d5a68:	461f      	mov	r7, r3
   d5a6a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d5a6e:	9304      	str	r3, [sp, #16]
   d5a70:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d5a72:	2a00      	cmp	r2, #0
   d5a74:	f040 80c5 	bne.w	d5c02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d5a78:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5a7c:	428b      	cmp	r3, r1
   d5a7e:	f340 814c 	ble.w	d5d1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d5a82:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d5a86:	42b3      	cmp	r3, r6
   d5a88:	f340 8147 	ble.w	d5d1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5a8c:	2306      	movs	r3, #6
   d5a8e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d5a92:	2b00      	cmp	r3, #0
   d5a94:	f340 8141 	ble.w	d5d1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d5a98:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5a9c:	2b00      	cmp	r3, #0
   d5a9e:	f340 813c 	ble.w	d5d1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d5aa2:	7f03      	ldrb	r3, [r0, #28]
   d5aa4:	b91b      	cbnz	r3, d5aae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d5aa6:	2faf      	cmp	r7, #175	; 0xaf
   d5aa8:	bf84      	itt	hi
   d5aaa:	3701      	addhi	r7, #1
   d5aac:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d5aae:	f8db 3000 	ldr.w	r3, [fp]
   d5ab2:	4658      	mov	r0, fp
   d5ab4:	695b      	ldr	r3, [r3, #20]
   d5ab6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5ab8:	2205      	movs	r2, #5
   d5aba:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5abc:	2200      	movs	r2, #0
   d5abe:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5ac0:	4a98      	ldr	r2, [pc, #608]	; (d5d24 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d5ac2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d5ac6:	18d3      	adds	r3, r2, r3
   d5ac8:	930c      	str	r3, [sp, #48]	; 0x30
   d5aca:	b2b3      	uxth	r3, r6
   d5acc:	9306      	str	r3, [sp, #24]
   d5ace:	9a05      	ldr	r2, [sp, #20]
   d5ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5ad2:	5c9b      	ldrb	r3, [r3, r2]
   d5ad4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5ad6:	b2ab      	uxth	r3, r5
   d5ad8:	930b      	str	r3, [sp, #44]	; 0x2c
   d5ada:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d5ade:	9308      	str	r3, [sp, #32]
   d5ae0:	9b03      	ldr	r3, [sp, #12]
   d5ae2:	fb02 f905 	mul.w	r9, r2, r5
   d5ae6:	fa19 f983 	uxtah	r9, r9, r3
   d5aea:	fa0f f389 	sxth.w	r3, r9
   d5aee:	ee08 3a10 	vmov	s16, r3
   d5af2:	2308      	movs	r3, #8
   d5af4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d5af6:	9b03      	ldr	r3, [sp, #12]
   d5af8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5afc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d5b00:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d5b04:	9a07      	ldr	r2, [sp, #28]
   d5b06:	f8db 3000 	ldr.w	r3, [fp]
   d5b0a:	07d2      	lsls	r2, r2, #31
   d5b0c:	d552      	bpl.n	d5bb4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d5b0e:	2d01      	cmp	r5, #1
   d5b10:	fa1f f289 	uxth.w	r2, r9
   d5b14:	d13e      	bne.n	d5b94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d5b16:	2c01      	cmp	r4, #1
   d5b18:	d13c      	bne.n	d5b94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d5b1a:	699b      	ldr	r3, [r3, #24]
   d5b1c:	9906      	ldr	r1, [sp, #24]
   d5b1e:	461f      	mov	r7, r3
   d5b20:	9b04      	ldr	r3, [sp, #16]
   d5b22:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d5b24:	b212      	sxth	r2, r2
   d5b26:	4651      	mov	r1, sl
   d5b28:	4658      	mov	r0, fp
   d5b2a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5b2c:	f109 0301 	add.w	r3, r9, #1
   d5b30:	fa4f f983 	sxtb.w	r9, r3
   d5b34:	9b07      	ldr	r3, [sp, #28]
   d5b36:	085b      	lsrs	r3, r3, #1
   d5b38:	9307      	str	r3, [sp, #28]
   d5b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5b3c:	3b01      	subs	r3, #1
   d5b3e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5b42:	930a      	str	r3, [sp, #40]	; 0x28
   d5b44:	d1de      	bne.n	d5b04 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5b46:	9f05      	ldr	r7, [sp, #20]
   d5b48:	3701      	adds	r7, #1
   d5b4a:	b27b      	sxtb	r3, r7
   d5b4c:	9305      	str	r3, [sp, #20]
   d5b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5b50:	3b01      	subs	r3, #1
   d5b52:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5b56:	9309      	str	r3, [sp, #36]	; 0x24
   d5b58:	d1b9      	bne.n	d5ace <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d5b5a:	9b04      	ldr	r3, [sp, #16]
   d5b5c:	4543      	cmp	r3, r8
   d5b5e:	d00f      	beq.n	d5b80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d5b60:	2d01      	cmp	r5, #1
   d5b62:	f8db 3000 	ldr.w	r3, [fp]
   d5b66:	d13b      	bne.n	d5be0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5b68:	2c01      	cmp	r4, #1
   d5b6a:	d139      	bne.n	d5be0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5b6c:	9908      	ldr	r1, [sp, #32]
   d5b6e:	f8cd 8000 	str.w	r8, [sp]
   d5b72:	3105      	adds	r1, #5
   d5b74:	6a1c      	ldr	r4, [r3, #32]
   d5b76:	4632      	mov	r2, r6
   d5b78:	2308      	movs	r3, #8
   d5b7a:	b209      	sxth	r1, r1
   d5b7c:	4658      	mov	r0, fp
   d5b7e:	47a0      	blx	r4
        endWrite();
   d5b80:	f8db 3000 	ldr.w	r3, [fp]
   d5b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b86:	4658      	mov	r0, fp
}
   d5b88:	b011      	add	sp, #68	; 0x44
   d5b8a:	ecbd 8b02 	vpop	{d8}
   d5b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d5b92:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d5b94:	9906      	ldr	r1, [sp, #24]
   d5b96:	fb14 f202 	smulbb	r2, r4, r2
   d5b9a:	440a      	add	r2, r1
   d5b9c:	9904      	ldr	r1, [sp, #16]
   d5b9e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5ba0:	9400      	str	r4, [sp, #0]
   d5ba2:	69db      	ldr	r3, [r3, #28]
   d5ba4:	ee18 1a10 	vmov	r1, s16
   d5ba8:	461f      	mov	r7, r3
   d5baa:	b212      	sxth	r2, r2
   d5bac:	462b      	mov	r3, r5
   d5bae:	4658      	mov	r0, fp
   d5bb0:	47b8      	blx	r7
   d5bb2:	e7bb      	b.n	d5b2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d5bb4:	9a04      	ldr	r2, [sp, #16]
   d5bb6:	4542      	cmp	r2, r8
   d5bb8:	d0b8      	beq.n	d5b2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d5bba:	2d01      	cmp	r5, #1
   d5bbc:	fa1f f289 	uxth.w	r2, r9
   d5bc0:	d107      	bne.n	d5bd2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d5bc2:	2c01      	cmp	r4, #1
   d5bc4:	d105      	bne.n	d5bd2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d5bc6:	699b      	ldr	r3, [r3, #24]
   d5bc8:	9906      	ldr	r1, [sp, #24]
   d5bca:	461f      	mov	r7, r3
   d5bcc:	440a      	add	r2, r1
   d5bce:	4643      	mov	r3, r8
   d5bd0:	e7a8      	b.n	d5b24 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5bd2:	9906      	ldr	r1, [sp, #24]
   d5bd4:	f8cd 8004 	str.w	r8, [sp, #4]
   d5bd8:	fb14 f202 	smulbb	r2, r4, r2
   d5bdc:	440a      	add	r2, r1
   d5bde:	e7df      	b.n	d5ba0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d5be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5be2:	f8cd 8004 	str.w	r8, [sp, #4]
   d5be6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d5bea:	9a08      	ldr	r2, [sp, #32]
   d5bec:	00e4      	lsls	r4, r4, #3
   d5bee:	440a      	add	r2, r1
   d5bf0:	4611      	mov	r1, r2
   d5bf2:	9400      	str	r4, [sp, #0]
   d5bf4:	69dc      	ldr	r4, [r3, #28]
   d5bf6:	4632      	mov	r2, r6
   d5bf8:	462b      	mov	r3, r5
   d5bfa:	b209      	sxth	r1, r1
   d5bfc:	4658      	mov	r0, fp
   d5bfe:	47a0      	blx	r4
        endWrite();
   d5c00:	e7be      	b.n	d5b80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5c02:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d5c04:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d5c06:	6812      	ldr	r2, [r2, #0]
   d5c08:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5c0a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d5c0c:	b2ff      	uxtb	r7, r7
   d5c0e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d5c12:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d5c16:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5c18:	789a      	ldrb	r2, [r3, #2]
   d5c1a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d5c1c:	78da      	ldrb	r2, [r3, #3]
   d5c1e:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d5c20:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5c22:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d5c26:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5c2a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d5c2c:	d801      	bhi.n	d5c32 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d5c2e:	2c01      	cmp	r4, #1
   d5c30:	d957      	bls.n	d5ce2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d5c32:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d5c36:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d5c38:	fa0f f38a 	sxth.w	r3, sl
   d5c3c:	9307      	str	r3, [sp, #28]
        startWrite();
   d5c3e:	f8db 3000 	ldr.w	r3, [fp]
   d5c42:	4658      	mov	r0, fp
   d5c44:	695b      	ldr	r3, [r3, #20]
   d5c46:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5c48:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5c4a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5c4e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5c50:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5c54:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d5c56:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5c58:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d5c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5c5c:	429f      	cmp	r7, r3
   d5c5e:	d28f      	bcs.n	d5b80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5c60:	9b07      	ldr	r3, [sp, #28]
   d5c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d5c64:	443b      	add	r3, r7
   d5c66:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5c70:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5c72:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5c76:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5c7a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5c7e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d5c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d5c82:	9905      	ldr	r1, [sp, #20]
   d5c84:	4291      	cmp	r1, r2
   d5c86:	d241      	bcs.n	d5d0c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d5c88:	1c5a      	adds	r2, r3, #1
   d5c8a:	b2d2      	uxtb	r2, r2
   d5c8c:	075b      	lsls	r3, r3, #29
   d5c8e:	920c      	str	r2, [sp, #48]	; 0x30
   d5c90:	d107      	bne.n	d5ca2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d5c92:	9b06      	ldr	r3, [sp, #24]
   d5c94:	9906      	ldr	r1, [sp, #24]
   d5c96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d5c98:	3301      	adds	r3, #1
   d5c9a:	b29b      	uxth	r3, r3
   d5c9c:	f812 9001 	ldrb.w	r9, [r2, r1]
   d5ca0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d5ca2:	f019 0f80 	tst.w	r9, #128	; 0x80
   d5ca6:	d012      	beq.n	d5cce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d5ca8:	2d01      	cmp	r5, #1
   d5caa:	f8db 3000 	ldr.w	r3, [fp]
   d5cae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d5cb2:	d11a      	bne.n	d5cea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d5cb4:	2c01      	cmp	r4, #1
   d5cb6:	d118      	bne.n	d5cea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d5cba:	699b      	ldr	r3, [r3, #24]
   d5cbc:	4411      	add	r1, r2
   d5cbe:	9a05      	ldr	r2, [sp, #20]
   d5cc0:	4411      	add	r1, r2
   d5cc2:	461e      	mov	r6, r3
   d5cc4:	4652      	mov	r2, sl
   d5cc6:	9b04      	ldr	r3, [sp, #16]
   d5cc8:	b209      	sxth	r1, r1
   d5cca:	4658      	mov	r0, fp
   d5ccc:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d5cce:	9e05      	ldr	r6, [sp, #20]
   d5cd0:	3601      	adds	r6, #1
   d5cd2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d5cd4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d5cd8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d5cda:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d5cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d5ce0:	e7ce      	b.n	d5c80 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d5ce2:	2300      	movs	r3, #0
   d5ce4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d5ce8:	e7a9      	b.n	d5c3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5cea:	9805      	ldr	r0, [sp, #20]
   d5cec:	9a08      	ldr	r2, [sp, #32]
   d5cee:	4402      	add	r2, r0
   d5cf0:	fb02 1105 	mla	r1, r2, r5, r1
   d5cf4:	9a04      	ldr	r2, [sp, #16]
   d5cf6:	e9cd 4200 	strd	r4, r2, [sp]
   d5cfa:	69db      	ldr	r3, [r3, #28]
   d5cfc:	ee18 2a10 	vmov	r2, s16
   d5d00:	461e      	mov	r6, r3
   d5d02:	b209      	sxth	r1, r1
   d5d04:	462b      	mov	r3, r5
   d5d06:	4658      	mov	r0, fp
   d5d08:	47b0      	blx	r6
   d5d0a:	e7e0      	b.n	d5cce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d5d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d5d0e:	3701      	adds	r7, #1
   d5d10:	4498      	add	r8, r3
   d5d12:	fa5f f888 	uxtb.w	r8, r8
   d5d16:	b2ff      	uxtb	r7, r7
   d5d18:	e79f      	b.n	d5c5a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d5d1a:	b011      	add	sp, #68	; 0x44
   d5d1c:	ecbd 8b02 	vpop	{d8}
   d5d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d24:	000d8878 	.word	0x000d8878

000d5d28 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5d2a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d5d2c:	b085      	sub	sp, #20
   d5d2e:	4604      	mov	r4, r0
   d5d30:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d5d32:	2a00      	cmp	r2, #0
   d5d34:	d134      	bne.n	d5da0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d5d36:	290a      	cmp	r1, #10
   d5d38:	d108      	bne.n	d5d4c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d5d3a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5d3c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d5d3e:	7e42      	ldrb	r2, [r0, #25]
   d5d40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d5d44:	8263      	strh	r3, [r4, #18]
}
   d5d46:	2001      	movs	r0, #1
   d5d48:	b005      	add	sp, #20
   d5d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5d4c:	290d      	cmp	r1, #13
   d5d4e:	d0fa      	beq.n	d5d46 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d5d50:	7ee1      	ldrb	r1, [r4, #27]
   d5d52:	7e00      	ldrb	r0, [r0, #24]
   d5d54:	7e65      	ldrb	r5, [r4, #25]
   d5d56:	b171      	cbz	r1, d5d76 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d5d58:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5d5c:	2106      	movs	r1, #6
   d5d5e:	fb11 6100 	smlabb	r1, r1, r0, r6
   d5d62:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d5d66:	42b1      	cmp	r1, r6
   d5d68:	bfc1      	itttt	gt
   d5d6a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d5d6e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d5d70:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d5d74:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5d76:	8ae2      	ldrh	r2, [r4, #22]
   d5d78:	9201      	str	r2, [sp, #4]
   d5d7a:	8aa2      	ldrh	r2, [r4, #20]
   d5d7c:	9200      	str	r2, [sp, #0]
   d5d7e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d5d82:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5d86:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	f7ff fe5e 	bl	d5a4c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d5d90:	7e23      	ldrb	r3, [r4, #24]
   d5d92:	8a22      	ldrh	r2, [r4, #16]
   d5d94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5d98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5d9c:	8223      	strh	r3, [r4, #16]
   d5d9e:	e7d2      	b.n	d5d46 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d5da0:	290a      	cmp	r1, #10
   d5da2:	d107      	bne.n	d5db4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d5da4:	2300      	movs	r3, #0
   d5da6:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5da8:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d5daa:	7e41      	ldrb	r1, [r0, #25]
   d5dac:	8a42      	ldrh	r2, [r0, #18]
   d5dae:	fb01 2303 	mla	r3, r1, r3, r2
   d5db2:	e7c7      	b.n	d5d44 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d5db4:	290d      	cmp	r1, #13
   d5db6:	d0c6      	beq.n	d5d46 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5db8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5dba:	42a9      	cmp	r1, r5
   d5dbc:	d3c3      	bcc.n	d5d46 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d5dbe:	7a51      	ldrb	r1, [r2, #9]
   d5dc0:	4299      	cmp	r1, r3
   d5dc2:	d3c0      	bcc.n	d5d46 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d5dc4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d5dc6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d5dc8:	b2ed      	uxtb	r5, r5
   d5dca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d5dce:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d5dd0:	b32f      	cbz	r7, d5e1e <_ZN12Adafruit_GFX5writeEh+0xf6>
   d5dd2:	78e9      	ldrb	r1, [r5, #3]
   d5dd4:	b319      	cbz	r1, d5e1e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d5dd6:	7ee1      	ldrb	r1, [r4, #27]
   d5dd8:	7e00      	ldrb	r0, [r0, #24]
   d5dda:	7e66      	ldrb	r6, [r4, #25]
   d5ddc:	b191      	cbz	r1, d5e04 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d5dde:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d5de2:	4439      	add	r1, r7
   d5de4:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d5de8:	fb00 7101 	mla	r1, r0, r1, r7
   d5dec:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d5df0:	42b9      	cmp	r1, r7
   d5df2:	dd07      	ble.n	d5e04 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d5df4:	2700      	movs	r7, #0
   d5df6:	8227      	strh	r7, [r4, #16]
   d5df8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5dfc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d5dfe:	fb02 1206 	mla	r2, r2, r6, r1
   d5e02:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5e04:	8ae2      	ldrh	r2, [r4, #22]
   d5e06:	9201      	str	r2, [sp, #4]
   d5e08:	8aa2      	ldrh	r2, [r4, #20]
   d5e0a:	9200      	str	r2, [sp, #0]
   d5e0c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d5e10:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5e14:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5e18:	4620      	mov	r0, r4
   d5e1a:	f7ff fe17 	bl	d5a4c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5e1e:	7929      	ldrb	r1, [r5, #4]
   d5e20:	7e23      	ldrb	r3, [r4, #24]
   d5e22:	8a22      	ldrh	r2, [r4, #16]
   d5e24:	fb01 2303 	mla	r3, r1, r3, r2
   d5e28:	e7b8      	b.n	d5d9c <_ZN12Adafruit_GFX5writeEh+0x74>

000d5e2a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d5e2a:	2901      	cmp	r1, #1
   d5e2c:	bf38      	it	cc
   d5e2e:	2101      	movcc	r1, #1
   d5e30:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d5e32:	7641      	strb	r1, [r0, #25]
}
   d5e34:	4770      	bx	lr
	...

000d5e38 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d5e38:	b510      	push	{r4, lr}
   d5e3a:	4b06      	ldr	r3, [pc, #24]	; (d5e54 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d5e3c:	6003      	str	r3, [r0, #0]
   d5e3e:	4604      	mov	r4, r0
	if (mutex) {
   d5e40:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d5e42:	b108      	cbz	r0, d5e48 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d5e44:	f000 fe0c 	bl	d6a60 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d5e48:	4620      	mov	r0, r4
   d5e4a:	f000 f8f7 	bl	d603c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d5e4e:	4620      	mov	r0, r4
   d5e50:	bd10      	pop	{r4, pc}
   d5e52:	bf00      	nop
   d5e54:	000d8dd8 	.word	0x000d8dd8

000d5e58 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d5e58:	b510      	push	{r4, lr}
   d5e5a:	4604      	mov	r4, r0
}
   d5e5c:	f7ff ffec 	bl	d5e38 <_ZN16OledWingAdafruitD1Ev>
   d5e60:	4620      	mov	r0, r4
   d5e62:	2170      	movs	r1, #112	; 0x70
   d5e64:	f002 fa63 	bl	d832e <_ZdlPvj>
   d5e68:	4620      	mov	r0, r4
   d5e6a:	bd10      	pop	{r4, pc}

000d5e6c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5e6c:	b530      	push	{r4, r5, lr}
   d5e6e:	b085      	sub	sp, #20
   d5e70:	4604      	mov	r4, r0
   d5e72:	460d      	mov	r5, r1
   d5e74:	f002 fa2e 	bl	d82d4 <_Z19__fetch_global_Wirev>
   d5e78:	4a10      	ldr	r2, [pc, #64]	; (d5ebc <_ZN16OledWingAdafruitC1Ei+0x50>)
   d5e7a:	4911      	ldr	r1, [pc, #68]	; (d5ec0 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d5e7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d5e80:	f04f 32ff 	mov.w	r2, #4294967295
   d5e84:	2180      	movs	r1, #128	; 0x80
   d5e86:	4603      	mov	r3, r0
   d5e88:	9200      	str	r2, [sp, #0]
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	2220      	movs	r2, #32
   d5e8e:	f000 f95b 	bl	d6148 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d5e92:	4b0c      	ldr	r3, [pc, #48]	; (d5ec4 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d5e94:	6023      	str	r3, [r4, #0]
   d5e96:	2300      	movs	r3, #0
   d5e98:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d5e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5ea0:	f000 f872 	bl	d5f88 <_ZN8DebounceC1Ev>
   d5ea4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5ea8:	f000 f86e 	bl	d5f88 <_ZN8DebounceC1Ev>
   d5eac:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5eb0:	f000 f86a 	bl	d5f88 <_ZN8DebounceC1Ev>
}
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	b005      	add	sp, #20
   d5eb8:	bd30      	pop	{r4, r5, pc}
   d5eba:	bf00      	nop
   d5ebc:	00061a80 	.word	0x00061a80
   d5ec0:	000186a0 	.word	0x000186a0
   d5ec4:	000d8dd8 	.word	0x000d8dd8

000d5ec8 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d5ec8:	b513      	push	{r0, r1, r4, lr}
   d5eca:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d5ecc:	3050      	adds	r0, #80	; 0x50
   d5ece:	f000 fdbf 	bl	d6a50 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d5ed2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5ed4:	07d9      	lsls	r1, r3, #31
   d5ed6:	d505      	bpl.n	d5ee4 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d5ed8:	2202      	movs	r2, #2
   d5eda:	2104      	movs	r1, #4
   d5edc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5ee0:	f000 f866 	bl	d5fb0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d5ee4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5ee6:	079a      	lsls	r2, r3, #30
   d5ee8:	d505      	bpl.n	d5ef6 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d5eea:	2200      	movs	r2, #0
   d5eec:	2103      	movs	r1, #3
   d5eee:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5ef2:	f000 f85d 	bl	d5fb0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d5ef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5ef8:	075b      	lsls	r3, r3, #29
   d5efa:	d505      	bpl.n	d5f08 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d5efc:	2202      	movs	r2, #2
   d5efe:	4611      	mov	r1, r2
   d5f00:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5f04:	f000 f854 	bl	d5fb0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d5f08:	2301      	movs	r3, #1
   d5f0a:	9300      	str	r3, [sp, #0]
   d5f0c:	223c      	movs	r2, #60	; 0x3c
   d5f0e:	2102      	movs	r1, #2
   d5f10:	4620      	mov	r0, r4
   d5f12:	f000 fa19 	bl	d6348 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d5f16:	b002      	add	sp, #8
   d5f18:	bd10      	pop	{r4, pc}

000d5f1a <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d5f1a:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d5f1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d5f1e:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d5f20:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d5f22:	d502      	bpl.n	d5f2a <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d5f24:	3058      	adds	r0, #88	; 0x58
   d5f26:	f000 f850 	bl	d5fca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d5f2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5f2c:	079a      	lsls	r2, r3, #30
   d5f2e:	d503      	bpl.n	d5f38 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d5f30:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5f34:	f000 f849 	bl	d5fca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d5f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5f3a:	075b      	lsls	r3, r3, #29
   d5f3c:	d505      	bpl.n	d5f4a <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d5f3e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d5f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d5f46:	f000 b840 	b.w	d5fca <_ZN8Debounce6updateEv>
}
   d5f4a:	bd10      	pop	{r4, pc}

000d5f4c <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5f4c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d5f4e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5f50:	f013 0001 	ands.w	r0, r3, #1
   d5f54:	d003      	beq.n	d5f5e <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d5f56:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d5f5a:	f000 b866 	b.w	d602a <_ZN8Debounce4fellEv>
}
   d5f5e:	4770      	bx	lr

000d5f60 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d5f60:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   d5f62:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d5f64:	f013 0002 	ands.w	r0, r3, #2
   d5f68:	d003      	beq.n	d5f72 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   d5f6a:	f102 0060 	add.w	r0, r2, #96	; 0x60
   d5f6e:	f000 b85c 	b.w	d602a <_ZN8Debounce4fellEv>
}
   d5f72:	4770      	bx	lr

000d5f74 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d5f74:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   d5f76:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d5f78:	f013 0004 	ands.w	r0, r3, #4
   d5f7c:	d003      	beq.n	d5f86 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   d5f7e:	f102 0068 	add.w	r0, r2, #104	; 0x68
   d5f82:	f000 b852 	b.w	d602a <_ZN8Debounce4fellEv>
}
   d5f86:	4770      	bx	lr

000d5f88 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5f88:	2100      	movs	r1, #0
   d5f8a:	220a      	movs	r2, #10
   d5f8c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5f90:	4770      	bx	lr

000d5f92 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5f92:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5f94:	b510      	push	{r4, lr}
   d5f96:	4604      	mov	r4, r0
    this->pin = pin;
   d5f98:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5f9a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5f9c:	b288      	uxth	r0, r1
   d5f9e:	f002 f931 	bl	d8204 <digitalRead>
   d5fa2:	b108      	cbz	r0, d5fa8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5fa4:	2303      	movs	r3, #3
   d5fa6:	71a3      	strb	r3, [r4, #6]
   d5fa8:	f000 fd4a 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5fac:	6020      	str	r0, [r4, #0]
#endif
}
   d5fae:	bd10      	pop	{r4, pc}

000d5fb0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5fb0:	b538      	push	{r3, r4, r5, lr}
   d5fb2:	460c      	mov	r4, r1
   d5fb4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5fb6:	4611      	mov	r1, r2
   d5fb8:	b2a0      	uxth	r0, r4
   d5fba:	f002 f8f9 	bl	d81b0 <pinMode>
  
  this->attach(pin);
   d5fbe:	4621      	mov	r1, r4
   d5fc0:	4628      	mov	r0, r5
}
   d5fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5fc6:	f7ff bfe4 	b.w	d5f92 <_ZN8Debounce6attachEi>

000d5fca <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d5fca:	b538      	push	{r3, r4, r5, lr}
   d5fcc:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d5fce:	79c0      	ldrb	r0, [r0, #7]
   d5fd0:	f002 f918 	bl	d8204 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d5fd4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d5fd6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d5fd8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d5fdc:	bf18      	it	ne
   d5fde:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5fe0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d5fe4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d5fe6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5fe8:	d00a      	beq.n	d6000 <_ZN8Debounce6updateEv+0x36>
   d5fea:	f000 fd29 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d5fee:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d5ff0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d5ff2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d5ff6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d5ff8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d5ffa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d5ffe:	bd38      	pop	{r3, r4, r5, pc}
   d6000:	f000 fd1e 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d6004:	6823      	ldr	r3, [r4, #0]
   d6006:	1ac0      	subs	r0, r0, r3
   d6008:	88a3      	ldrh	r3, [r4, #4]
   d600a:	4298      	cmp	r0, r3
   d600c:	d3f4      	bcc.n	d5ff8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d600e:	79a3      	ldrb	r3, [r4, #6]
   d6010:	f003 0301 	and.w	r3, r3, #1
   d6014:	42ab      	cmp	r3, r5
   d6016:	d0ef      	beq.n	d5ff8 <_ZN8Debounce6updateEv+0x2e>
   d6018:	f000 fd12 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d601c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d601e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d6020:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d6024:	f043 0308 	orr.w	r3, r3, #8
   d6028:	e7e5      	b.n	d5ff6 <_ZN8Debounce6updateEv+0x2c>

000d602a <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d602a:	7980      	ldrb	r0, [r0, #6]
   d602c:	f000 0009 	and.w	r0, r0, #9
   d6030:	f1a0 0308 	sub.w	r3, r0, #8
   d6034:	4258      	negs	r0, r3
   d6036:	4158      	adcs	r0, r3
   d6038:	4770      	bx	lr
	...

000d603c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d603c:	b510      	push	{r4, lr}
   d603e:	4b04      	ldr	r3, [pc, #16]	; (d6050 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d6040:	6003      	str	r3, [r0, #0]
   d6042:	4604      	mov	r4, r0
  if(buffer) {
   d6044:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6046:	b108      	cbz	r0, d604c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d6048:	f000 ff46 	bl	d6ed8 <free>
    buffer = NULL;
  }
}
   d604c:	4620      	mov	r0, r4
   d604e:	bd10      	pop	{r4, pc}
   d6050:	000d92e4 	.word	0x000d92e4

000d6054 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d6054:	b510      	push	{r4, lr}
   d6056:	4604      	mov	r4, r0
}
   d6058:	f7ff fff0 	bl	d603c <_ZN16Adafruit_SSD1306D1Ev>
   d605c:	4620      	mov	r0, r4
   d605e:	2150      	movs	r1, #80	; 0x50
   d6060:	f002 f965 	bl	d832e <_ZdlPvj>
   d6064:	4620      	mov	r0, r4
   d6066:	bd10      	pop	{r4, pc}

000d6068 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6068:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d606a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d606c:	db4b      	blt.n	d6106 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d606e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d6072:	428c      	cmp	r4, r1
   d6074:	dd47      	ble.n	d6106 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d6076:	2a00      	cmp	r2, #0
   d6078:	db45      	blt.n	d6106 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d607a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d607e:	4294      	cmp	r4, r2
   d6080:	dd41      	ble.n	d6106 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d6082:	7e84      	ldrb	r4, [r0, #26]
   d6084:	2c02      	cmp	r4, #2
   d6086:	d01f      	beq.n	d60c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d6088:	2c03      	cmp	r4, #3
   d608a:	d026      	beq.n	d60da <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d608c:	2c01      	cmp	r4, #1
   d608e:	d104      	bne.n	d609a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d6090:	8904      	ldrh	r4, [r0, #8]
   d6092:	43d2      	mvns	r2, r2
   d6094:	4414      	add	r4, r2
      break;
   d6096:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d6098:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d609a:	2b01      	cmp	r3, #1
   d609c:	d023      	beq.n	d60e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d609e:	2b02      	cmp	r3, #2
   d60a0:	d032      	beq.n	d6108 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d60a2:	bb83      	cbnz	r3, d6106 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d60a4:	2a00      	cmp	r2, #0
   d60a6:	4613      	mov	r3, r2
   d60a8:	8904      	ldrh	r4, [r0, #8]
   d60aa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d60ac:	bfb8      	it	lt
   d60ae:	1dd3      	addlt	r3, r2, #7
   d60b0:	10db      	asrs	r3, r3, #3
   d60b2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d60b6:	f002 0207 	and.w	r2, r2, #7
   d60ba:	2301      	movs	r3, #1
   d60bc:	4093      	lsls	r3, r2
   d60be:	5c42      	ldrb	r2, [r0, r1]
   d60c0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d60c4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d60c6:	e01e      	b.n	d6106 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d60c8:	8904      	ldrh	r4, [r0, #8]
   d60ca:	43c9      	mvns	r1, r1
   d60cc:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d60ce:	8944      	ldrh	r4, [r0, #10]
   d60d0:	43d2      	mvns	r2, r2
   d60d2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d60d4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d60d6:	b212      	sxth	r2, r2
      break;
   d60d8:	e7df      	b.n	d609a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d60da:	8944      	ldrh	r4, [r0, #10]
   d60dc:	43c9      	mvns	r1, r1
   d60de:	440c      	add	r4, r1
      break;
   d60e0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d60e2:	b222      	sxth	r2, r4
      break;
   d60e4:	e7d9      	b.n	d609a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d60e6:	2a00      	cmp	r2, #0
   d60e8:	8904      	ldrh	r4, [r0, #8]
   d60ea:	4613      	mov	r3, r2
   d60ec:	bfb8      	it	lt
   d60ee:	1dd3      	addlt	r3, r2, #7
   d60f0:	10db      	asrs	r3, r3, #3
   d60f2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d60f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d60f8:	f002 0007 	and.w	r0, r2, #7
   d60fc:	2201      	movs	r2, #1
   d60fe:	4082      	lsls	r2, r0
   d6100:	5c58      	ldrb	r0, [r3, r1]
   d6102:	4302      	orrs	r2, r0
   d6104:	545a      	strb	r2, [r3, r1]
}
   d6106:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d6108:	2a00      	cmp	r2, #0
   d610a:	4613      	mov	r3, r2
   d610c:	8904      	ldrh	r4, [r0, #8]
   d610e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6110:	bfb8      	it	lt
   d6112:	1dd3      	addlt	r3, r2, #7
   d6114:	10db      	asrs	r3, r3, #3
   d6116:	fb13 1104 	smlabb	r1, r3, r4, r1
   d611a:	f002 0207 	and.w	r2, r2, #7
   d611e:	2301      	movs	r3, #1
   d6120:	fa03 f202 	lsl.w	r2, r3, r2
   d6124:	5c43      	ldrb	r3, [r0, r1]
   d6126:	405a      	eors	r2, r3
   d6128:	e7cc      	b.n	d60c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d612a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d612a:	b510      	push	{r4, lr}
   d612c:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d612e:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d6132:	2101      	movs	r1, #1
   d6134:	b280      	uxth	r0, r0
   d6136:	f002 f84c 	bl	d81d2 <digitalWrite>
   d613a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d613c:	b118      	cbz	r0, d6146 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d613e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d6142:	f000 bf58 	b.w	d6ff6 <_ZN8SPIClass14endTransactionEv>
}
   d6146:	bd10      	pop	{r4, pc}

000d6148 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d6148:	b570      	push	{r4, r5, r6, lr}
   d614a:	4604      	mov	r4, r0
   d614c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d614e:	2600      	movs	r6, #0
   d6150:	f7ff fc12 	bl	d5978 <_ZN12Adafruit_GFXC1Ess>
   d6154:	4b11      	ldr	r3, [pc, #68]	; (d619c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d6156:	6023      	str	r3, [r4, #0]
   d6158:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d615a:	b915      	cbnz	r5, d6162 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d615c:	f002 f8ba 	bl	d82d4 <_Z19__fetch_global_Wirev>
   d6160:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d6162:	23ff      	movs	r3, #255	; 0xff
   d6164:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d6168:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d616c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d6170:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d6174:	4b0a      	ldr	r3, [pc, #40]	; (d61a0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d6176:	63a3      	str	r3, [r4, #56]	; 0x38
   d6178:	2301      	movs	r3, #1
   d617a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d617e:	9b05      	ldr	r3, [sp, #20]
   d6180:	64a3      	str	r3, [r4, #72]	; 0x48
   d6182:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6186:	9b06      	ldr	r3, [sp, #24]
   d6188:	86a2      	strh	r2, [r4, #52]	; 0x34
   d618a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d618e:	6426      	str	r6, [r4, #64]	; 0x40
   d6190:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d6194:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d6196:	4620      	mov	r0, r4
   d6198:	bd70      	pop	{r4, r5, r6, pc}
   d619a:	bf00      	nop
   d619c:	000d92e4 	.word	0x000d92e4
   d61a0:	000d8e30 	.word	0x000d8e30

000d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d61a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61a6:	4604      	mov	r4, r0
  if(wire) { // I2C
   d61a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d61aa:	460d      	mov	r5, r1
  if(wire) { // I2C
   d61ac:	b190      	cbz	r0, d61d4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d61ae:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d61b2:	f001 fbe7 	bl	d7984 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d61b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d61b8:	6803      	ldr	r3, [r0, #0]
   d61ba:	2100      	movs	r1, #0
   d61bc:	689b      	ldr	r3, [r3, #8]
   d61be:	4798      	blx	r3
    WIRE_WRITE(c);
   d61c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d61c2:	6803      	ldr	r3, [r0, #0]
   d61c4:	4629      	mov	r1, r5
   d61c6:	689b      	ldr	r3, [r3, #8]
   d61c8:	4798      	blx	r3
    wire->endTransmission();
   d61ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d61cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d61d0:	f001 bbdf 	b.w	d7992 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d61d4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d61d8:	4601      	mov	r1, r0
   d61da:	b298      	uxth	r0, r3
   d61dc:	f001 fff9 	bl	d81d2 <digitalWrite>
  if(spi) {
   d61e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d61e2:	b120      	cbz	r0, d61ee <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d61e4:	4629      	mov	r1, r5
}
   d61e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d61ea:	f000 bf8b 	b.w	d7104 <_ZN8SPIClass8transferEh>
   d61ee:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d61f0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d61f2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d61f6:	ea05 0107 	and.w	r1, r5, r7
   d61fa:	b280      	uxth	r0, r0
   d61fc:	f001 ffe9 	bl	d81d2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6200:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6204:	2101      	movs	r1, #1
   d6206:	b280      	uxth	r0, r0
   d6208:	f001 ffe3 	bl	d81d2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d620c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6210:	2100      	movs	r1, #0
   d6212:	b280      	uxth	r0, r0
   d6214:	f001 ffdd 	bl	d81d2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6218:	3e01      	subs	r6, #1
   d621a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d621e:	d1e8      	bne.n	d61f2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d6220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6222 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d6222:	b538      	push	{r3, r4, r5, lr}
   d6224:	4604      	mov	r4, r0
  TRANSACTION_START
   d6226:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d6228:	460d      	mov	r5, r1
  TRANSACTION_START
   d622a:	b180      	cbz	r0, d624e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d622c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d622e:	f001 fb9b 	bl	d7968 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d6232:	2d00      	cmp	r5, #0
   d6234:	4620      	mov	r0, r4
   d6236:	bf14      	ite	ne
   d6238:	21a7      	movne	r1, #167	; 0xa7
   d623a:	21a6      	moveq	r1, #166	; 0xa6
   d623c:	f7ff ffb2 	bl	d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d6240:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6242:	b188      	cbz	r0, d6268 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d6244:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d6246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d624a:	f001 bb8d 	b.w	d7968 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d624e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6250:	b118      	cbz	r0, d625a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d6252:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d6256:	f000 fee7 	bl	d7028 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d625a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d625e:	2100      	movs	r1, #0
   d6260:	b280      	uxth	r0, r0
   d6262:	f001 ffb6 	bl	d81d2 <digitalWrite>
   d6266:	e7e4      	b.n	d6232 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d6268:	4620      	mov	r0, r4
}
   d626a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d626e:	f7ff bf5c 	b.w	d612a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d6272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6276:	4604      	mov	r4, r0
  if(wire) { // I2C
   d6278:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d627a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d627c:	188f      	adds	r7, r1, r2
   d627e:	b340      	cbz	r0, d62d2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d6280:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6284:	f001 fb7e 	bl	d7984 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d6288:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d628a:	6803      	ldr	r3, [r0, #0]
   d628c:	2100      	movs	r1, #0
   d628e:	689b      	ldr	r3, [r3, #8]
   d6290:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d6292:	2601      	movs	r6, #1
    while(n--) {
   d6294:	42bd      	cmp	r5, r7
   d6296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6298:	d017      	beq.n	d62ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d629a:	2e1f      	cmp	r6, #31
   d629c:	d90c      	bls.n	d62b8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d629e:	f001 fb78 	bl	d7992 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d62a2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d62a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d62a8:	f001 fb6c 	bl	d7984 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d62ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d62ae:	6803      	ldr	r3, [r0, #0]
   d62b0:	2100      	movs	r1, #0
   d62b2:	689b      	ldr	r3, [r3, #8]
   d62b4:	4798      	blx	r3
        bytesOut = 1;
   d62b6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d62b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d62ba:	f815 1b01 	ldrb.w	r1, [r5], #1
   d62be:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d62c0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d62c2:	689b      	ldr	r3, [r3, #8]
   d62c4:	4798      	blx	r3
      bytesOut++;
   d62c6:	b2f6      	uxtb	r6, r6
    while(n--) {
   d62c8:	e7e4      	b.n	d6294 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d62ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d62ce:	f001 bb60 	b.w	d7992 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d62d2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d62d6:	4601      	mov	r1, r0
   d62d8:	b298      	uxth	r0, r3
   d62da:	f001 ff7a 	bl	d81d2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d62de:	42af      	cmp	r7, r5
   d62e0:	d022      	beq.n	d6328 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d62e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d62e4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d62e8:	b118      	cbz	r0, d62f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d62ea:	4649      	mov	r1, r9
   d62ec:	f000 ff0a 	bl	d7104 <_ZN8SPIClass8transferEh>
   d62f0:	e7f5      	b.n	d62de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d62f2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d62f4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d62f8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d62fc:	ea09 0108 	and.w	r1, r9, r8
   d6300:	b280      	uxth	r0, r0
   d6302:	f001 ff66 	bl	d81d2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6306:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d630a:	2101      	movs	r1, #1
   d630c:	b280      	uxth	r0, r0
   d630e:	f001 ff60 	bl	d81d2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d6312:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6316:	2100      	movs	r1, #0
   d6318:	b280      	uxth	r0, r0
   d631a:	f001 ff5a 	bl	d81d2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d631e:	3e01      	subs	r6, #1
   d6320:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d6324:	d1e8      	bne.n	d62f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d6326:	e7da      	b.n	d62de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d6328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d632c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d632c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d6330:	1dda      	adds	r2, r3, #7
   d6332:	bf48      	it	mi
   d6334:	f103 020e 	addmi.w	r2, r3, #14
   d6338:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d633c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d633e:	10d2      	asrs	r2, r2, #3
   d6340:	435a      	muls	r2, r3
   d6342:	2100      	movs	r1, #0
   d6344:	f002 b92e 	b.w	d85a4 <memset>

000d6348 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d6348:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d634c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d634e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d6350:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d6354:	4604      	mov	r4, r0
   d6356:	460f      	mov	r7, r1
   d6358:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d635a:	b1b3      	cbz	r3, d638a <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d635c:	4620      	mov	r0, r4
   d635e:	f7ff ffe5 	bl	d632c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d6362:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d6366:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d636a:	2820      	cmp	r0, #32
   d636c:	dc1f      	bgt.n	d63ae <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d636e:	2320      	movs	r3, #32
   d6370:	2201      	movs	r2, #1
   d6372:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d6376:	3820      	subs	r0, #32
   d6378:	2373      	movs	r3, #115	; 0x73
   d637a:	3973      	subs	r1, #115	; 0x73
   d637c:	9300      	str	r3, [sp, #0]
   d637e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d6382:	4b89      	ldr	r3, [pc, #548]	; (d65a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d6384:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d6388:	e01f      	b.n	d63ca <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d638a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d638e:	1dd8      	adds	r0, r3, #7
   d6390:	bf48      	it	mi
   d6392:	f103 000e 	addmi.w	r0, r3, #14
   d6396:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d639a:	10c0      	asrs	r0, r0, #3
   d639c:	4358      	muls	r0, r3
   d639e:	f000 fd93 	bl	d6ec8 <malloc>
   d63a2:	62e0      	str	r0, [r4, #44]	; 0x2c
   d63a4:	2800      	cmp	r0, #0
   d63a6:	d1d9      	bne.n	d635c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d63a8:	b004      	add	sp, #16
   d63aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d63ae:	2340      	movs	r3, #64	; 0x40
   d63b0:	f04f 0c01 	mov.w	ip, #1
   d63b4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d63b8:	2352      	movs	r3, #82	; 0x52
   d63ba:	3840      	subs	r0, #64	; 0x40
   d63bc:	3952      	subs	r1, #82	; 0x52
   d63be:	9300      	str	r3, [sp, #0]
   d63c0:	4b7a      	ldr	r3, [pc, #488]	; (d65ac <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d63c2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d63c6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d63ca:	f340 024f 	sbfx	r2, r0, #1, #16
   d63ce:	f341 014f 	sbfx	r1, r1, #1, #16
   d63d2:	4620      	mov	r0, r4
   d63d4:	f7ff fae6 	bl	d59a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d63d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d63da:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d63de:	2800      	cmp	r0, #0
   d63e0:	d078      	beq.n	d64d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d63e2:	2d00      	cmp	r5, #0
   d63e4:	d174      	bne.n	d64d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d63e6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d63ea:	2b20      	cmp	r3, #32
   d63ec:	bf0c      	ite	eq
   d63ee:	253c      	moveq	r5, #60	; 0x3c
   d63f0:	253d      	movne	r5, #61	; 0x3d
   d63f2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d63f6:	f1b8 0f00 	cmp.w	r8, #0
   d63fa:	d001      	beq.n	d6400 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d63fc:	f001 fab8 	bl	d7970 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d6400:	b1fe      	cbz	r6, d6442 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d6402:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6406:	2800      	cmp	r0, #0
   d6408:	db1b      	blt.n	d6442 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d640a:	2101      	movs	r1, #1
   d640c:	b280      	uxth	r0, r0
   d640e:	f001 fecf 	bl	d81b0 <pinMode>
    digitalWrite(rstPin, HIGH);
   d6412:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6416:	2101      	movs	r1, #1
   d6418:	b280      	uxth	r0, r0
   d641a:	f001 feda 	bl	d81d2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d641e:	2001      	movs	r0, #1
   d6420:	f001 f81c 	bl	d745c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d6424:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6428:	2100      	movs	r1, #0
   d642a:	b280      	uxth	r0, r0
   d642c:	f001 fed1 	bl	d81d2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d6430:	200a      	movs	r0, #10
   d6432:	f001 f813 	bl	d745c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d6436:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d643a:	2101      	movs	r1, #1
   d643c:	b280      	uxth	r0, r0
   d643e:	f001 fec8 	bl	d81d2 <digitalWrite>
  TRANSACTION_START
   d6442:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6444:	2800      	cmp	r0, #0
   d6446:	d074      	beq.n	d6532 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d6448:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d644a:	f001 fa8d 	bl	d7968 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d644e:	2204      	movs	r2, #4
   d6450:	4957      	ldr	r1, [pc, #348]	; (d65b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d6452:	4620      	mov	r0, r4
   d6454:	f7ff ff0d 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d6458:	7aa1      	ldrb	r1, [r4, #10]
   d645a:	3901      	subs	r1, #1
   d645c:	b2c9      	uxtb	r1, r1
   d645e:	4620      	mov	r0, r4
   d6460:	f7ff fea0 	bl	d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d6464:	4953      	ldr	r1, [pc, #332]	; (d65b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d6466:	2204      	movs	r2, #4
   d6468:	4620      	mov	r0, r4
   d646a:	f7ff ff02 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d646e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6472:	2b01      	cmp	r3, #1
   d6474:	bf0c      	ite	eq
   d6476:	2110      	moveq	r1, #16
   d6478:	2114      	movne	r1, #20
   d647a:	4620      	mov	r0, r4
   d647c:	f7ff fe92 	bl	d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d6480:	2204      	movs	r2, #4
   d6482:	494d      	ldr	r1, [pc, #308]	; (d65b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d6484:	4620      	mov	r0, r4
   d6486:	f7ff fef4 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d648a:	68a3      	ldr	r3, [r4, #8]
   d648c:	4a4b      	ldr	r2, [pc, #300]	; (d65bc <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d648e:	4293      	cmp	r3, r2
   d6490:	d15c      	bne.n	d654c <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d6492:	494b      	ldr	r1, [pc, #300]	; (d65c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d6494:	2204      	movs	r2, #4
   d6496:	4620      	mov	r0, r4
   d6498:	f7ff feeb 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d649c:	21d9      	movs	r1, #217	; 0xd9
   d649e:	4620      	mov	r0, r4
   d64a0:	f7ff fe80 	bl	d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d64a4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d64a8:	2b01      	cmp	r3, #1
   d64aa:	bf0c      	ite	eq
   d64ac:	2122      	moveq	r1, #34	; 0x22
   d64ae:	21f1      	movne	r1, #241	; 0xf1
   d64b0:	4620      	mov	r0, r4
   d64b2:	f7ff fe77 	bl	d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d64b6:	4620      	mov	r0, r4
   d64b8:	4942      	ldr	r1, [pc, #264]	; (d65c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d64ba:	2206      	movs	r2, #6
   d64bc:	f7ff fed9 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d64c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d64c2:	2800      	cmp	r0, #0
   d64c4:	d063      	beq.n	d658e <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d64c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d64c8:	f001 fa4e 	bl	d7968 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d64cc:	2001      	movs	r0, #1
   d64ce:	e76b      	b.n	d63a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d64d0:	b26d      	sxtb	r5, r5
   d64d2:	e78e      	b.n	d63f2 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d64d4:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d64d8:	2101      	movs	r1, #1
   d64da:	b280      	uxth	r0, r0
   d64dc:	f001 fe68 	bl	d81b0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d64e0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d64e4:	2101      	movs	r1, #1
   d64e6:	b280      	uxth	r0, r0
   d64e8:	f001 fe62 	bl	d81b0 <pinMode>
    SSD1306_DESELECT
   d64ec:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d64f0:	2101      	movs	r1, #1
   d64f2:	b280      	uxth	r0, r0
   d64f4:	f001 fe6d 	bl	d81d2 <digitalWrite>
    if(spi) { // Hardware SPI
   d64f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d64fa:	b13d      	cbz	r5, d650c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d64fc:	f1b8 0f00 	cmp.w	r8, #0
   d6500:	f43f af7e 	beq.w	d6400 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d6504:	4628      	mov	r0, r5
   d6506:	f000 fd65 	bl	d6fd4 <_ZN8SPIClass5beginEv>
   d650a:	e779      	b.n	d6400 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d650c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d6510:	2101      	movs	r1, #1
   d6512:	b280      	uxth	r0, r0
   d6514:	f001 fe4c 	bl	d81b0 <pinMode>
      pinMode(clkPin , OUTPUT);
   d6518:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d651c:	2101      	movs	r1, #1
   d651e:	b280      	uxth	r0, r0
   d6520:	f001 fe46 	bl	d81b0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d6524:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6528:	4629      	mov	r1, r5
   d652a:	b280      	uxth	r0, r0
   d652c:	f001 fe51 	bl	d81d2 <digitalWrite>
   d6530:	e766      	b.n	d6400 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d6532:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6534:	b118      	cbz	r0, d653e <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d6536:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d653a:	f000 fd75 	bl	d7028 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d653e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6542:	2100      	movs	r1, #0
   d6544:	b280      	uxth	r0, r0
   d6546:	f001 fe44 	bl	d81d2 <digitalWrite>
   d654a:	e780      	b.n	d644e <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d654c:	4a1e      	ldr	r2, [pc, #120]	; (d65c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d654e:	4293      	cmp	r3, r2
   d6550:	d10e      	bne.n	d6570 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d6552:	491e      	ldr	r1, [pc, #120]	; (d65cc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d6554:	2203      	movs	r2, #3
   d6556:	4620      	mov	r0, r4
   d6558:	f7ff fe8b 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d655c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6560:	2b01      	cmp	r3, #1
   d6562:	bf0c      	ite	eq
   d6564:	219f      	moveq	r1, #159	; 0x9f
   d6566:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d6568:	4620      	mov	r0, r4
   d656a:	f7ff fe1b 	bl	d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d656e:	e795      	b.n	d649c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d6570:	4a17      	ldr	r2, [pc, #92]	; (d65d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d6572:	4293      	cmp	r3, r2
   d6574:	d192      	bne.n	d649c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d6576:	4917      	ldr	r1, [pc, #92]	; (d65d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d6578:	2203      	movs	r2, #3
   d657a:	4620      	mov	r0, r4
   d657c:	f7ff fe79 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d6580:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6584:	2b01      	cmp	r3, #1
   d6586:	bf0c      	ite	eq
   d6588:	2110      	moveq	r1, #16
   d658a:	21af      	movne	r1, #175	; 0xaf
   d658c:	e7ec      	b.n	d6568 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d658e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6592:	2101      	movs	r1, #1
   d6594:	b280      	uxth	r0, r0
   d6596:	f001 fe1c 	bl	d81d2 <digitalWrite>
   d659a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d659c:	2800      	cmp	r0, #0
   d659e:	d095      	beq.n	d64cc <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d65a0:	f000 fd29 	bl	d6ff6 <_ZN8SPIClass14endTransactionEv>
   d65a4:	e792      	b.n	d64cc <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d65a6:	bf00      	nop
   d65a8:	000d90fc 	.word	0x000d90fc
   d65ac:	000d8e3c 	.word	0x000d8e3c
   d65b0:	000d9344 	.word	0x000d9344
   d65b4:	000d9348 	.word	0x000d9348
   d65b8:	000d934c 	.word	0x000d934c
   d65bc:	00200080 	.word	0x00200080
   d65c0:	000d9356 	.word	0x000d9356
   d65c4:	000d9350 	.word	0x000d9350
   d65c8:	00400080 	.word	0x00400080
   d65cc:	000d935a 	.word	0x000d935a
   d65d0:	00100060 	.word	0x00100060
   d65d4:	000d935d 	.word	0x000d935d

000d65d8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d65d8:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d65da:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d65dc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d65e0:	db3d      	blt.n	d665e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d65e2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d65e6:	4294      	cmp	r4, r2
   d65e8:	dd39      	ble.n	d665e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d65ea:	2900      	cmp	r1, #0
      w += x;
   d65ec:	bfbe      	ittt	lt
   d65ee:	185b      	addlt	r3, r3, r1
   d65f0:	b21b      	sxthlt	r3, r3
      x  = 0;
   d65f2:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d65f4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d65f8:	18ce      	adds	r6, r1, r3
   d65fa:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d65fc:	bfc4      	itt	gt
   d65fe:	1a63      	subgt	r3, r4, r1
   d6600:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d6602:	2b00      	cmp	r3, #0
   d6604:	dd2b      	ble.n	d665e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d6606:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6608:	10d6      	asrs	r6, r2, #3
   d660a:	fb14 1106 	smlabb	r1, r4, r6, r1
   d660e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d6610:	f002 0007 	and.w	r0, r2, #7
   d6614:	2201      	movs	r2, #1
   d6616:	4082      	lsls	r2, r0
      switch(color) {
   d6618:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d661a:	b2d2      	uxtb	r2, r2
      switch(color) {
   d661c:	d016      	beq.n	d664c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d661e:	2d02      	cmp	r5, #2
   d6620:	d00b      	beq.n	d663a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d6622:	b9e5      	cbnz	r5, d665e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d6624:	43d2      	mvns	r2, r2
   d6626:	b2d2      	uxtb	r2, r2
   d6628:	440b      	add	r3, r1
   d662a:	4299      	cmp	r1, r3
   d662c:	d017      	beq.n	d665e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d662e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6632:	4010      	ands	r0, r2
   d6634:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6638:	e7f7      	b.n	d662a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d663a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d663c:	4299      	cmp	r1, r3
   d663e:	d00e      	beq.n	d665e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d6640:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6644:	4050      	eors	r0, r2
   d6646:	f801 0c01 	strb.w	r0, [r1, #-1]
   d664a:	e7f7      	b.n	d663c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d664c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d664e:	4299      	cmp	r1, r3
   d6650:	d005      	beq.n	d665e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d6652:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6656:	4310      	orrs	r0, r2
   d6658:	f801 0c01 	strb.w	r0, [r1, #-1]
   d665c:	e7f7      	b.n	d664e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d665e:	bd70      	pop	{r4, r5, r6, pc}

000d6660 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d6660:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d6662:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d6664:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d6668:	db76      	blt.n	d6758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d666a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d666e:	42a9      	cmp	r1, r5
   d6670:	da72      	bge.n	d6758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d6672:	2a00      	cmp	r2, #0
      __h += __y;
   d6674:	bfbc      	itt	lt
   d6676:	18d2      	addlt	r2, r2, r3
   d6678:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d667a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d667e:	bfb8      	it	lt
   d6680:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d6682:	18d7      	adds	r7, r2, r3
   d6684:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d6686:	bfc4      	itt	gt
   d6688:	1aa3      	subgt	r3, r4, r2
   d668a:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d668c:	2b00      	cmp	r3, #0
   d668e:	dd63      	ble.n	d6758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d6690:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d6694:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d6696:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d669a:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d669e:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d66a0:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d66a4:	d023      	beq.n	d66ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d66a6:	f1c2 0208 	rsb	r2, r2, #8
   d66aa:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d66ac:	4d2c      	ldr	r5, [pc, #176]	; (d6760 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d66ae:	4293      	cmp	r3, r2
   d66b0:	bf3c      	itt	cc
   d66b2:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d66b6:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d66ba:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d66bc:	bf3c      	itt	cc
   d66be:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d66c2:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d66c6:	2e01      	cmp	r6, #1
   d66c8:	d007      	beq.n	d66da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d66ca:	2e02      	cmp	r6, #2
   d66cc:	d02e      	beq.n	d672c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d66ce:	b94e      	cbnz	r6, d66e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d66d0:	f817 c001 	ldrb.w	ip, [r7, r1]
   d66d4:	ea2c 0505 	bic.w	r5, ip, r5
   d66d8:	e003      	b.n	d66e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d66da:	f817 c001 	ldrb.w	ip, [r7, r1]
   d66de:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d66e2:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d66e4:	4293      	cmp	r3, r2
   d66e6:	d337      	bcc.n	d6758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d66e8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d66ec:	440c      	add	r4, r1
        h -= mod;
   d66ee:	1a9a      	subs	r2, r3, r2
   d66f0:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d66f2:	2a07      	cmp	r2, #7
   d66f4:	d90e      	bls.n	d6714 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d66f6:	2e02      	cmp	r6, #2
   d66f8:	d11d      	bne.n	d6736 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d66fa:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d66fc:	7821      	ldrb	r1, [r4, #0]
   d66fe:	43c9      	mvns	r1, r1
   d6700:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d6702:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d6704:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d6708:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d670a:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d670c:	440c      	add	r4, r1
            } while(h >= 8);
   d670e:	d8f5      	bhi.n	d66fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d6710:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d6714:	b302      	cbz	r2, d6758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d6716:	4b13      	ldr	r3, [pc, #76]	; (d6764 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d6718:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d671a:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d671c:	d019      	beq.n	d6752 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d671e:	2e02      	cmp	r6, #2
   d6720:	d01b      	beq.n	d675a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d6722:	b9ce      	cbnz	r6, d6758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d6724:	7822      	ldrb	r2, [r4, #0]
   d6726:	ea22 0303 	bic.w	r3, r2, r3
   d672a:	e014      	b.n	d6756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d672c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d6730:	ea85 050c 	eor.w	r5, r5, ip
   d6734:	e7d5      	b.n	d66e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d6736:	2e00      	cmp	r6, #0
   d6738:	bf14      	ite	ne
   d673a:	25ff      	movne	r5, #255	; 0xff
   d673c:	2500      	moveq	r5, #0
   d673e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d6740:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d6742:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d6744:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d6748:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d674a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d674c:	440c      	add	r4, r1
            } while(h >= 8);
   d674e:	d8f7      	bhi.n	d6740 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d6750:	e7de      	b.n	d6710 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d6752:	7822      	ldrb	r2, [r4, #0]
   d6754:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d6756:	7023      	strb	r3, [r4, #0]
}
   d6758:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d675a:	7822      	ldrb	r2, [r4, #0]
   d675c:	4053      	eors	r3, r2
   d675e:	e7fa      	b.n	d6756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d6760:	000d9334 	.word	0x000d9334
   d6764:	000d933c 	.word	0x000d933c

000d6768 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6768:	b470      	push	{r4, r5, r6}
   d676a:	4614      	mov	r4, r2
  switch(rotation) {
   d676c:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d676e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d6772:	2a02      	cmp	r2, #2
   d6774:	d00d      	beq.n	d6792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d6776:	2a03      	cmp	r2, #3
   d6778:	d018      	beq.n	d67ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d677a:	2a01      	cmp	r2, #1
   d677c:	d111      	bne.n	d67a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d677e:	8902      	ldrh	r2, [r0, #8]
   d6780:	43e4      	mvns	r4, r4
   d6782:	4414      	add	r4, r2
   d6784:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d6786:	9603      	str	r6, [sp, #12]
   d6788:	460a      	mov	r2, r1
   d678a:	4621      	mov	r1, r4
}
   d678c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d678e:	f7ff bf67 	b.w	d6660 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d6792:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d6794:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d6796:	43e4      	mvns	r4, r4
    x -= (w-1);
   d6798:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d679a:	4414      	add	r4, r2
    x -= (w-1);
   d679c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d679e:	b224      	sxth	r4, r4
    x -= (w-1);
   d67a0:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d67a2:	9603      	str	r6, [sp, #12]
   d67a4:	4622      	mov	r2, r4
}
   d67a6:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d67a8:	f7ff bf16 	b.w	d65d8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d67ac:	8945      	ldrh	r5, [r0, #10]
   d67ae:	4419      	add	r1, r3
   d67b0:	1a69      	subs	r1, r5, r1
   d67b2:	b209      	sxth	r1, r1
    break;
   d67b4:	e7e7      	b.n	d6786 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d67b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d67b6:	b430      	push	{r4, r5}
   d67b8:	4614      	mov	r4, r2
  switch(rotation) {
   d67ba:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d67bc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d67c0:	2a02      	cmp	r2, #2
   d67c2:	d00d      	beq.n	d67e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d67c4:	2a03      	cmp	r2, #3
   d67c6:	d018      	beq.n	d67fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d67c8:	2a01      	cmp	r2, #1
   d67ca:	d111      	bne.n	d67f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d67cc:	18e2      	adds	r2, r4, r3
   d67ce:	8904      	ldrh	r4, [r0, #8]
   d67d0:	1aa4      	subs	r4, r4, r2
   d67d2:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d67d4:	9502      	str	r5, [sp, #8]
   d67d6:	460a      	mov	r2, r1
   d67d8:	4621      	mov	r1, r4
}
   d67da:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d67dc:	f7ff befc 	b.w	d65d8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d67e0:	8902      	ldrh	r2, [r0, #8]
   d67e2:	43c9      	mvns	r1, r1
   d67e4:	4411      	add	r1, r2
    y -= (h-1);
   d67e6:	18e2      	adds	r2, r4, r3
   d67e8:	8944      	ldrh	r4, [r0, #10]
   d67ea:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d67ec:	b209      	sxth	r1, r1
    y -= (h-1);
   d67ee:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d67f0:	9502      	str	r5, [sp, #8]
   d67f2:	4622      	mov	r2, r4
}
   d67f4:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d67f6:	f7ff bf33 	b.w	d6660 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d67fa:	8942      	ldrh	r2, [r0, #10]
   d67fc:	43c9      	mvns	r1, r1
   d67fe:	4411      	add	r1, r2
   d6800:	b209      	sxth	r1, r1
    break;
   d6802:	e7e7      	b.n	d67d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d6804 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d6804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6808:	4604      	mov	r4, r0
  TRANSACTION_START
   d680a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d680c:	2800      	cmp	r0, #0
   d680e:	d042      	beq.n	d6896 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d6810:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6812:	f001 f8a9 	bl	d7968 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d6816:	4947      	ldr	r1, [pc, #284]	; (d6934 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d6818:	2205      	movs	r2, #5
   d681a:	4620      	mov	r0, r4
   d681c:	f7ff fd29 	bl	d6272 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d6820:	7a21      	ldrb	r1, [r4, #8]
   d6822:	3901      	subs	r1, #1
   d6824:	4620      	mov	r0, r4
   d6826:	b2c9      	uxtb	r1, r1
   d6828:	f7ff fcbc 	bl	d61a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d682c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d6830:	1dde      	adds	r6, r3, #7
   d6832:	bf48      	it	mi
   d6834:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d6838:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d683c:	8923      	ldrh	r3, [r4, #8]
   d683e:	10f6      	asrs	r6, r6, #3
   d6840:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d6844:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d6848:	2800      	cmp	r0, #0
   d684a:	d03a      	beq.n	d68c2 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d684c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6850:	f001 f898 	bl	d7984 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d6854:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6856:	6803      	ldr	r3, [r0, #0]
   d6858:	2140      	movs	r1, #64	; 0x40
   d685a:	689b      	ldr	r3, [r3, #8]
   d685c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d685e:	2701      	movs	r7, #1
    while(count--) {
   d6860:	42b5      	cmp	r5, r6
   d6862:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6864:	d024      	beq.n	d68b0 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d6866:	2f1f      	cmp	r7, #31
   d6868:	d90c      	bls.n	d6884 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d686a:	f001 f892 	bl	d7992 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d686e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6872:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6874:	f001 f886 	bl	d7984 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d6878:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d687a:	6803      	ldr	r3, [r0, #0]
   d687c:	2140      	movs	r1, #64	; 0x40
   d687e:	689b      	ldr	r3, [r3, #8]
   d6880:	4798      	blx	r3
        bytesOut = 1;
   d6882:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d6884:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6886:	f815 1b01 	ldrb.w	r1, [r5], #1
   d688a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d688c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d688e:	689b      	ldr	r3, [r3, #8]
   d6890:	4798      	blx	r3
      bytesOut++;
   d6892:	b2ff      	uxtb	r7, r7
    while(count--) {
   d6894:	e7e4      	b.n	d6860 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d6896:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6898:	b118      	cbz	r0, d68a2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d689a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d689e:	f000 fbc3 	bl	d7028 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d68a2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d68a6:	2100      	movs	r1, #0
   d68a8:	b280      	uxth	r0, r0
   d68aa:	f001 fc92 	bl	d81d2 <digitalWrite>
   d68ae:	e7b2      	b.n	d6816 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d68b0:	f001 f86f 	bl	d7992 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d68b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d68b6:	b378      	cbz	r0, d6918 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d68b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d68ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d68be:	f001 b853 	b.w	d7968 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d68c2:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d68c6:	2101      	movs	r1, #1
   d68c8:	b280      	uxth	r0, r0
   d68ca:	f001 fc82 	bl	d81d2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d68ce:	42b5      	cmp	r5, r6
   d68d0:	d0f0      	beq.n	d68b4 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d68d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d68d4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d68d8:	b118      	cbz	r0, d68e2 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d68da:	4649      	mov	r1, r9
   d68dc:	f000 fc12 	bl	d7104 <_ZN8SPIClass8transferEh>
   d68e0:	e7f5      	b.n	d68ce <_ZN16Adafruit_SSD13067displayEv+0xca>
   d68e2:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d68e4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d68e8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d68ec:	ea09 0108 	and.w	r1, r9, r8
   d68f0:	b280      	uxth	r0, r0
   d68f2:	f001 fc6e 	bl	d81d2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d68f6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d68fa:	2101      	movs	r1, #1
   d68fc:	b280      	uxth	r0, r0
   d68fe:	f001 fc68 	bl	d81d2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d6902:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6906:	2100      	movs	r1, #0
   d6908:	b280      	uxth	r0, r0
   d690a:	f001 fc62 	bl	d81d2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d690e:	3f01      	subs	r7, #1
   d6910:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d6914:	d1e8      	bne.n	d68e8 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d6916:	e7da      	b.n	d68ce <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d6918:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d691c:	2101      	movs	r1, #1
   d691e:	b280      	uxth	r0, r0
   d6920:	f001 fc57 	bl	d81d2 <digitalWrite>
   d6924:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6926:	b118      	cbz	r0, d6930 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d6928:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d692c:	f000 bb63 	b.w	d6ff6 <_ZN8SPIClass14endTransactionEv>
}
   d6930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6934:	000d9360 	.word	0x000d9360

000d6938 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d6938:	f000 bd90 	b.w	d745c <delay>

000d693c <_Z11BlynkMillisv>:
   d693c:	f000 b880 	b.w	d6a40 <HAL_Timer_Get_Milli_Seconds>

000d6940 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d6940:	4770      	bx	lr

000d6942 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d6942:	4770      	bx	lr

000d6944 <BlynkNoOpCbk>:
{}
   d6944:	4770      	bx	lr
	...

000d6948 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d6948:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d694a:	bf5a      	itte	pl
   d694c:	4b02      	ldrpl	r3, [pc, #8]	; (d6958 <GetReadHandler+0x10>)
   d694e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d6952:	2000      	movmi	r0, #0
#endif
}
   d6954:	4770      	bx	lr
   d6956:	bf00      	nop
   d6958:	000d9368 	.word	0x000d9368

000d695c <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d695c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d695e:	bf5a      	itte	pl
   d6960:	4b02      	ldrpl	r3, [pc, #8]	; (d696c <GetWriteHandler+0x10>)
   d6962:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d6966:	2000      	movmi	r0, #0
#endif
}
   d6968:	4770      	bx	lr
   d696a:	bf00      	nop
   d696c:	000d9568 	.word	0x000d9568

000d6970 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <netdb_freeaddrinfo+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	689b      	ldr	r3, [r3, #8]
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	00030268 	.word	0x00030268

000d6980 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <netdb_getaddrinfo+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	68db      	ldr	r3, [r3, #12]
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	00030268 	.word	0x00030268

000d6990 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <HAL_Validate_Pin_Function+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	685b      	ldr	r3, [r3, #4]
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	0003022c 	.word	0x0003022c

000d69a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <HAL_Pin_Mode+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	689b      	ldr	r3, [r3, #8]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	0003022c 	.word	0x0003022c

000d69b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <HAL_Get_Pin_Mode+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	68db      	ldr	r3, [r3, #12]
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	0003022c 	.word	0x0003022c

000d69c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b02      	ldr	r3, [pc, #8]	; (d69cc <HAL_GPIO_Write+0xc>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	691b      	ldr	r3, [r3, #16]
   d69c8:	9301      	str	r3, [sp, #4]
   d69ca:	bd08      	pop	{r3, pc}
   d69cc:	0003022c 	.word	0x0003022c

000d69d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d69d0:	b508      	push	{r3, lr}
   d69d2:	4b02      	ldr	r3, [pc, #8]	; (d69dc <HAL_GPIO_Read+0xc>)
   d69d4:	681b      	ldr	r3, [r3, #0]
   d69d6:	695b      	ldr	r3, [r3, #20]
   d69d8:	9301      	str	r3, [sp, #4]
   d69da:	bd08      	pop	{r3, pc}
   d69dc:	0003022c 	.word	0x0003022c

000d69e0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <HAL_DAC_Write+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	0003022c 	.word	0x0003022c

000d69f0 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <hal_adc_read+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	0003022c 	.word	0x0003022c

000d6a00 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <hal_pwm_write_ext+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	0003022c 	.word	0x0003022c

000d6a10 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <if_index_to_name+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	695b      	ldr	r3, [r3, #20]
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	0003026c 	.word	0x0003026c

000d6a20 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <HAL_RNG_GetRandomNumber+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	685b      	ldr	r3, [r3, #4]
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	00030218 	.word	0x00030218

000d6a30 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <HAL_Delay_Microseconds+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	68db      	ldr	r3, [r3, #12]
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	00030218 	.word	0x00030218

000d6a40 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	695b      	ldr	r3, [r3, #20]
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	00030218 	.word	0x00030218

000d6a50 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6a50:	b508      	push	{r3, lr}
   d6a52:	4b02      	ldr	r3, [pc, #8]	; (d6a5c <os_mutex_create+0xc>)
   d6a54:	681b      	ldr	r3, [r3, #0]
   d6a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a58:	9301      	str	r3, [sp, #4]
   d6a5a:	bd08      	pop	{r3, pc}
   d6a5c:	00030248 	.word	0x00030248

000d6a60 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <os_mutex_destroy+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	00030248 	.word	0x00030248

000d6a70 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <os_mutex_lock+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	00030248 	.word	0x00030248

000d6a80 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <os_mutex_unlock+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030248 	.word	0x00030248

000d6a90 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <os_mutex_recursive_create+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030248 	.word	0x00030248

000d6aa0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <os_mutex_recursive_destroy+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	00030248 	.word	0x00030248

000d6ab0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <inet_inet_ntop+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	695b      	ldr	r3, [r3, #20]
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030264 	.word	0x00030264

000d6ac0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <inet_htonl+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	6a1b      	ldr	r3, [r3, #32]
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030264 	.word	0x00030264

000d6ad0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <inet_htons+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030264 	.word	0x00030264

000d6ae0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <hal_usart_init+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	681b      	ldr	r3, [r3, #0]
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	0003023c 	.word	0x0003023c

000d6af0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <hal_usart_write+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	68db      	ldr	r3, [r3, #12]
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	0003023c 	.word	0x0003023c

000d6b00 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <hal_usart_available+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	691b      	ldr	r3, [r3, #16]
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	0003023c 	.word	0x0003023c

000d6b10 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <hal_usart_read+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	695b      	ldr	r3, [r3, #20]
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	0003023c 	.word	0x0003023c

000d6b20 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <hal_usart_peek+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	699b      	ldr	r3, [r3, #24]
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	0003023c 	.word	0x0003023c

000d6b30 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <hal_usart_flush+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	69db      	ldr	r3, [r3, #28]
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	0003023c 	.word	0x0003023c

000d6b40 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <hal_usart_is_enabled+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	6a1b      	ldr	r3, [r3, #32]
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	0003023c 	.word	0x0003023c

000d6b50 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <hal_usart_available_data_for_write+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	0003023c 	.word	0x0003023c

000d6b60 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <hal_i2c_set_speed+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	681b      	ldr	r3, [r3, #0]
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	00030228 	.word	0x00030228

000d6b70 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <hal_i2c_begin+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	68db      	ldr	r3, [r3, #12]
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	00030228 	.word	0x00030228

000d6b80 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <hal_i2c_begin_transmission+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	699b      	ldr	r3, [r3, #24]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	00030228 	.word	0x00030228

000d6b90 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <hal_i2c_end_transmission+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	69db      	ldr	r3, [r3, #28]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	00030228 	.word	0x00030228

000d6ba0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <hal_i2c_write+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	6a1b      	ldr	r3, [r3, #32]
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	00030228 	.word	0x00030228

000d6bb0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <hal_i2c_available+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	00030228 	.word	0x00030228

000d6bc0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <hal_i2c_read+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	00030228 	.word	0x00030228

000d6bd0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <hal_i2c_peek+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	00030228 	.word	0x00030228

000d6be0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <hal_i2c_flush+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	00030228 	.word	0x00030228

000d6bf0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <hal_i2c_is_enabled+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	00030228 	.word	0x00030228

000d6c00 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <hal_i2c_init+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	00030228 	.word	0x00030228

000d6c10 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <sock_setsockopt+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	699b      	ldr	r3, [r3, #24]
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	00030238 	.word	0x00030238

000d6c20 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <sock_close+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	69db      	ldr	r3, [r3, #28]
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	00030238 	.word	0x00030238

000d6c30 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <sock_connect+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6a1b      	ldr	r3, [r3, #32]
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	00030238 	.word	0x00030238

000d6c40 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <sock_recv+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030238 	.word	0x00030238

000d6c50 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <sock_send+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030238 	.word	0x00030238

000d6c60 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <sock_socket+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030238 	.word	0x00030238

000d6c70 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <hal_spi_begin+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	681b      	ldr	r3, [r3, #0]
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030230 	.word	0x00030230

000d6c80 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <hal_spi_transfer+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	695b      	ldr	r3, [r3, #20]
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030230 	.word	0x00030230

000d6c90 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <hal_spi_init+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	69db      	ldr	r3, [r3, #28]
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030230 	.word	0x00030230

000d6ca0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <hal_spi_is_enabled+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	6a1b      	ldr	r3, [r3, #32]
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	00030230 	.word	0x00030230

000d6cb0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <hal_spi_info+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	00030230 	.word	0x00030230

000d6cc0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <hal_spi_set_settings+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	00030230 	.word	0x00030230

000d6cd0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <hal_spi_acquire+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	00030230 	.word	0x00030230

000d6ce0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <hal_spi_release+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	00030230 	.word	0x00030230

000d6cf0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <HAL_USB_USART_Init+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	681b      	ldr	r3, [r3, #0]
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	0003024c 	.word	0x0003024c

000d6d00 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <HAL_USB_USART_Begin+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	685b      	ldr	r3, [r3, #4]
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	0003024c 	.word	0x0003024c

000d6d10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <HAL_USB_USART_Available_Data+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	691b      	ldr	r3, [r3, #16]
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	0003024c 	.word	0x0003024c

000d6d20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	695b      	ldr	r3, [r3, #20]
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	0003024c 	.word	0x0003024c

000d6d30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <HAL_USB_USART_Receive_Data+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	699b      	ldr	r3, [r3, #24]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	0003024c 	.word	0x0003024c

000d6d40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <HAL_USB_USART_Send_Data+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	69db      	ldr	r3, [r3, #28]
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	0003024c 	.word	0x0003024c

000d6d50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <HAL_USB_USART_Flush_Data+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	6a1b      	ldr	r3, [r3, #32]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	0003024c 	.word	0x0003024c

000d6d60 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <panic_+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	00030260 	.word	0x00030260

000d6d70 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b02      	ldr	r3, [pc, #8]	; (d6d7c <log_message+0xc>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d78:	9301      	str	r3, [sp, #4]
   d6d7a:	bd08      	pop	{r3, pc}
   d6d7c:	00030260 	.word	0x00030260

000d6d80 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6d80:	b508      	push	{r3, lr}
   d6d82:	4b02      	ldr	r3, [pc, #8]	; (d6d8c <set_system_mode+0xc>)
   d6d84:	681b      	ldr	r3, [r3, #0]
   d6d86:	685b      	ldr	r3, [r3, #4]
   d6d88:	9301      	str	r3, [sp, #4]
   d6d8a:	bd08      	pop	{r3, pc}
   d6d8c:	00030220 	.word	0x00030220

000d6d90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6d90:	b508      	push	{r3, lr}
   d6d92:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <system_delay_ms+0xc>)
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	695b      	ldr	r3, [r3, #20]
   d6d98:	9301      	str	r3, [sp, #4]
   d6d9a:	bd08      	pop	{r3, pc}
   d6d9c:	00030220 	.word	0x00030220

000d6da0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b02      	ldr	r3, [pc, #8]	; (d6dac <system_thread_set_state+0xc>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6da8:	9301      	str	r3, [sp, #4]
   d6daa:	bd08      	pop	{r3, pc}
   d6dac:	00030220 	.word	0x00030220

000d6db0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6db0:	b508      	push	{r3, lr}
   d6db2:	4b03      	ldr	r3, [pc, #12]	; (d6dc0 <system_ctrl_set_app_request_handler+0x10>)
   d6db4:	681b      	ldr	r3, [r3, #0]
   d6db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6dba:	9301      	str	r3, [sp, #4]
   d6dbc:	bd08      	pop	{r3, pc}
   d6dbe:	0000      	.short	0x0000
   d6dc0:	00030220 	.word	0x00030220

000d6dc4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6dc4:	b508      	push	{r3, lr}
   d6dc6:	4b03      	ldr	r3, [pc, #12]	; (d6dd4 <system_ctrl_set_result+0x10>)
   d6dc8:	681b      	ldr	r3, [r3, #0]
   d6dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6dce:	9301      	str	r3, [sp, #4]
   d6dd0:	bd08      	pop	{r3, pc}
   d6dd2:	0000      	.short	0x0000
   d6dd4:	00030220 	.word	0x00030220

000d6dd8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <network_connect+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	685b      	ldr	r3, [r3, #4]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030240 	.word	0x00030240

000d6de8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <network_connecting+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	689b      	ldr	r3, [r3, #8]
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030240 	.word	0x00030240

000d6df8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <network_disconnect+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	68db      	ldr	r3, [r3, #12]
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030240 	.word	0x00030240

000d6e08 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <network_ready+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	691b      	ldr	r3, [r3, #16]
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030240 	.word	0x00030240

000d6e18 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <network_on+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	695b      	ldr	r3, [r3, #20]
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030240 	.word	0x00030240

000d6e28 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <network_off+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	699b      	ldr	r3, [r3, #24]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030240 	.word	0x00030240

000d6e38 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <network_listen+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	69db      	ldr	r3, [r3, #28]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030240 	.word	0x00030240

000d6e48 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <network_listening+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	6a1b      	ldr	r3, [r3, #32]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030240 	.word	0x00030240

000d6e58 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <network_set_listen_timeout+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030240 	.word	0x00030240

000d6e68 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <network_get_listen_timeout+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	00030240 	.word	0x00030240

000d6e78 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <network_is_on+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	00030240 	.word	0x00030240

000d6e88 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <network_is_off+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	00030240 	.word	0x00030240

000d6e98 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <spark_process+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	689b      	ldr	r3, [r3, #8]
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030244 	.word	0x00030244

000d6ea8 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <spark_deviceID+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	69db      	ldr	r3, [r3, #28]
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	00030244 	.word	0x00030244

000d6eb8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	00030244 	.word	0x00030244

000d6ec8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <malloc+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	681b      	ldr	r3, [r3, #0]
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	0003021c 	.word	0x0003021c

000d6ed8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <free+0xc>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	685b      	ldr	r3, [r3, #4]
   d6ee0:	9301      	str	r3, [sp, #4]
   d6ee2:	bd08      	pop	{r3, pc}
   d6ee4:	0003021c 	.word	0x0003021c

000d6ee8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6ee8:	b508      	push	{r3, lr}
   d6eea:	4b02      	ldr	r3, [pc, #8]	; (d6ef4 <realloc+0xc>)
   d6eec:	681b      	ldr	r3, [r3, #0]
   d6eee:	689b      	ldr	r3, [r3, #8]
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	bd08      	pop	{r3, pc}
   d6ef4:	0003021c 	.word	0x0003021c

000d6ef8 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6ef8:	b508      	push	{r3, lr}
   d6efa:	4b02      	ldr	r3, [pc, #8]	; (d6f04 <snprintf+0xc>)
   d6efc:	681b      	ldr	r3, [r3, #0]
   d6efe:	69db      	ldr	r3, [r3, #28]
   d6f00:	9301      	str	r3, [sp, #4]
   d6f02:	bd08      	pop	{r3, pc}
   d6f04:	0003021c 	.word	0x0003021c

000d6f08 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b02      	ldr	r3, [pc, #8]	; (d6f14 <vsnprintf+0xc>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f10:	9301      	str	r3, [sp, #4]
   d6f12:	bd08      	pop	{r3, pc}
   d6f14:	0003021c 	.word	0x0003021c

000d6f18 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6f18:	b508      	push	{r3, lr}
   d6f1a:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <__errno+0xc>)
   d6f1c:	681b      	ldr	r3, [r3, #0]
   d6f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f20:	9301      	str	r3, [sp, #4]
   d6f22:	bd08      	pop	{r3, pc}
   d6f24:	0003021c 	.word	0x0003021c

000d6f28 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6f28:	b508      	push	{r3, lr}
   d6f2a:	4b02      	ldr	r3, [pc, #8]	; (d6f34 <newlib_impure_ptr_callback+0xc>)
   d6f2c:	681b      	ldr	r3, [r3, #0]
   d6f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6f30:	9301      	str	r3, [sp, #4]
   d6f32:	bd08      	pop	{r3, pc}
   d6f34:	0003021c 	.word	0x0003021c

000d6f38 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f38:	2200      	movs	r2, #0
   d6f3a:	6840      	ldr	r0, [r0, #4]
   d6f3c:	4611      	mov	r1, r2
   d6f3e:	f7ff bf83 	b.w	d6e48 <network_listening>

000d6f42 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6f42:	2200      	movs	r2, #0
   d6f44:	6840      	ldr	r0, [r0, #4]
   d6f46:	4611      	mov	r1, r2
   d6f48:	f7ff bf8e 	b.w	d6e68 <network_get_listen_timeout>

000d6f4c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6f4c:	6840      	ldr	r0, [r0, #4]
   d6f4e:	2200      	movs	r2, #0
   d6f50:	f7ff bf82 	b.w	d6e58 <network_set_listen_timeout>

000d6f54 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f54:	6840      	ldr	r0, [r0, #4]
   d6f56:	2200      	movs	r2, #0
   d6f58:	f081 0101 	eor.w	r1, r1, #1
   d6f5c:	f7ff bf6c 	b.w	d6e38 <network_listen>

000d6f60 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6f60:	2300      	movs	r3, #0
   d6f62:	6840      	ldr	r0, [r0, #4]
   d6f64:	461a      	mov	r2, r3
   d6f66:	4619      	mov	r1, r3
   d6f68:	f7ff bf5e 	b.w	d6e28 <network_off>

000d6f6c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6f6c:	2300      	movs	r3, #0
   d6f6e:	6840      	ldr	r0, [r0, #4]
   d6f70:	461a      	mov	r2, r3
   d6f72:	4619      	mov	r1, r3
   d6f74:	f7ff bf50 	b.w	d6e18 <network_on>

000d6f78 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f78:	2200      	movs	r2, #0
   d6f7a:	6840      	ldr	r0, [r0, #4]
   d6f7c:	4611      	mov	r1, r2
   d6f7e:	f7ff bf43 	b.w	d6e08 <network_ready>

000d6f82 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6f82:	2200      	movs	r2, #0
   d6f84:	6840      	ldr	r0, [r0, #4]
   d6f86:	4611      	mov	r1, r2
   d6f88:	f7ff bf2e 	b.w	d6de8 <network_connecting>

000d6f8c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f8c:	6840      	ldr	r0, [r0, #4]
   d6f8e:	2200      	movs	r2, #0
   d6f90:	2102      	movs	r1, #2
   d6f92:	f7ff bf31 	b.w	d6df8 <network_disconnect>

000d6f96 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6f96:	2300      	movs	r3, #0
   d6f98:	6840      	ldr	r0, [r0, #4]
   d6f9a:	461a      	mov	r2, r3
   d6f9c:	f7ff bf1c 	b.w	d6dd8 <network_connect>

000d6fa0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6fa0:	4b02      	ldr	r3, [pc, #8]	; (d6fac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6fa2:	2203      	movs	r2, #3
   d6fa4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6fa6:	4a02      	ldr	r2, [pc, #8]	; (d6fb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6fa8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6faa:	4770      	bx	lr
   d6fac:	2003e650 	.word	0x2003e650
   d6fb0:	000d9770 	.word	0x000d9770

000d6fb4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6fb4:	2100      	movs	r1, #0
   d6fb6:	f7ff be8b 	b.w	d6cd0 <hal_spi_acquire>

000d6fba <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6fba:	2100      	movs	r1, #0
   d6fbc:	f7ff be90 	b.w	d6ce0 <hal_spi_release>

000d6fc0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6fc0:	b510      	push	{r4, lr}
   d6fc2:	4604      	mov	r4, r0
   d6fc4:	4608      	mov	r0, r1
{
    _spi = spi;
   d6fc6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6fc8:	f7ff fe62 	bl	d6c90 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6fcc:	2300      	movs	r3, #0
   d6fce:	6063      	str	r3, [r4, #4]
}
   d6fd0:	4620      	mov	r0, r4
   d6fd2:	bd10      	pop	{r4, pc}

000d6fd4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6fd4:	b510      	push	{r4, lr}
   d6fd6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6fd8:	7800      	ldrb	r0, [r0, #0]
   d6fda:	f7ff ffeb 	bl	d6fb4 <_ZN8SPIClass4lockEv.isra.0>
   d6fde:	b948      	cbnz	r0, d6ff4 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6fe0:	7820      	ldrb	r0, [r4, #0]
   d6fe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6fe6:	f7ff fe43 	bl	d6c70 <hal_spi_begin>
        unlock();
   d6fea:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6ff0:	f7ff bfe3 	b.w	d6fba <_ZN8SPIClass6unlockEv.isra.0>
}
   d6ff4:	bd10      	pop	{r4, pc}

000d6ff6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6ff6:	7800      	ldrb	r0, [r0, #0]
   d6ff8:	f7ff bfdf 	b.w	d6fba <_ZN8SPIClass6unlockEv.isra.0>

000d6ffc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6ffc:	0840      	lsrs	r0, r0, #1
{
   d6ffe:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7000:	6018      	str	r0, [r3, #0]
   d7002:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7004:	6818      	ldr	r0, [r3, #0]
   d7006:	4288      	cmp	r0, r1
   d7008:	b2e5      	uxtb	r5, r4
   d700a:	d906      	bls.n	d701a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d700c:	3401      	adds	r4, #1
   d700e:	2c08      	cmp	r4, #8
   d7010:	d002      	beq.n	d7018 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7012:	0840      	lsrs	r0, r0, #1
   d7014:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d7016:	e7f5      	b.n	d7004 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7018:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d701a:	4b02      	ldr	r3, [pc, #8]	; (d7024 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d701c:	5d5b      	ldrb	r3, [r3, r5]
   d701e:	7013      	strb	r3, [r2, #0]
}
   d7020:	bd30      	pop	{r4, r5, pc}
   d7022:	bf00      	nop
   d7024:	000d97a4 	.word	0x000d97a4

000d7028 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d7028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d702c:	4606      	mov	r6, r0
   d702e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d7030:	7800      	ldrb	r0, [r0, #0]
{
   d7032:	460c      	mov	r4, r1
    CHECK(lock());
   d7034:	f7ff ffbe 	bl	d6fb4 <_ZN8SPIClass4lockEv.isra.0>
   d7038:	2800      	cmp	r0, #0
   d703a:	db1b      	blt.n	d7074 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d703c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d703e:	2214      	movs	r2, #20
   d7040:	2100      	movs	r1, #0
   d7042:	a809      	add	r0, sp, #36	; 0x24
   d7044:	f001 faae 	bl	d85a4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7048:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d704a:	2200      	movs	r2, #0
   d704c:	a909      	add	r1, sp, #36	; 0x24
   d704e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d7050:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d7054:	f7ff fe2c 	bl	d6cb0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7058:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d705c:	b113      	cbz	r3, d7064 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d705e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7062:	b155      	cbz	r5, d707a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d7064:	2700      	movs	r7, #0
   d7066:	46b9      	mov	r9, r7
   d7068:	46b8      	mov	r8, r7
   d706a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d706c:	7923      	ldrb	r3, [r4, #4]
   d706e:	b15d      	cbz	r5, d7088 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d7070:	b1c3      	cbz	r3, d70a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d7072:	2000      	movs	r0, #0
}
   d7074:	b00f      	add	sp, #60	; 0x3c
   d7076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d707a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d707e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7082:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7086:	e7f1      	b.n	d706c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7088:	2b00      	cmp	r3, #0
   d708a:	d135      	bne.n	d70f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d708c:	68a3      	ldr	r3, [r4, #8]
   d708e:	4543      	cmp	r3, r8
   d7090:	d108      	bne.n	d70a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d7092:	f88d 9020 	strb.w	r9, [sp, #32]
   d7096:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d709a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d709e:	89a3      	ldrh	r3, [r4, #12]
   d70a0:	429a      	cmp	r2, r3
   d70a2:	d0e6      	beq.n	d7072 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d70a4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d70a6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d70a8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d70ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   d70ae:	ab04      	add	r3, sp, #16
   d70b0:	f10d 020f 	add.w	r2, sp, #15
   d70b4:	f7ff ffa2 	bl	d6ffc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d70b8:	7921      	ldrb	r1, [r4, #4]
   d70ba:	b985      	cbnz	r5, d70de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d70bc:	b989      	cbnz	r1, d70e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d70be:	68a3      	ldr	r3, [r4, #8]
   d70c0:	4543      	cmp	r3, r8
   d70c2:	d30e      	bcc.n	d70e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d70c4:	f88d 9020 	strb.w	r9, [sp, #32]
   d70c8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d70cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d70d0:	89a3      	ldrh	r3, [r4, #12]
   d70d2:	429a      	cmp	r2, r3
   d70d4:	d105      	bne.n	d70e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d70d6:	9b04      	ldr	r3, [sp, #16]
   d70d8:	4543      	cmp	r3, r8
   d70da:	d102      	bne.n	d70e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d70dc:	e7c9      	b.n	d7072 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d70de:	2900      	cmp	r1, #0
   d70e0:	d1f9      	bne.n	d70d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d70e2:	2300      	movs	r3, #0
   d70e4:	9301      	str	r3, [sp, #4]
   d70e6:	7b63      	ldrb	r3, [r4, #13]
   d70e8:	9300      	str	r3, [sp, #0]
   d70ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d70ee:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d70f0:	7830      	ldrb	r0, [r6, #0]
   d70f2:	f7ff fde5 	bl	d6cc0 <hal_spi_set_settings>
   d70f6:	e7bc      	b.n	d7072 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d70f8:	e9cd 5500 	strd	r5, r5, [sp]
   d70fc:	462b      	mov	r3, r5
   d70fe:	462a      	mov	r2, r5
   d7100:	2101      	movs	r1, #1
   d7102:	e7f5      	b.n	d70f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7104 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7104:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d7106:	7800      	ldrb	r0, [r0, #0]
   d7108:	f7ff fdba 	bl	d6c80 <hal_spi_transfer>
}
   d710c:	b2c0      	uxtb	r0, r0
   d710e:	bd08      	pop	{r3, pc}

000d7110 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7110:	b510      	push	{r4, lr}
   d7112:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7114:	6800      	ldr	r0, [r0, #0]
   d7116:	b118      	cbz	r0, d7120 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7118:	f7ff fede 	bl	d6ed8 <free>
            wakeupSource_ = nullptr;
   d711c:	2300      	movs	r3, #0
   d711e:	6023      	str	r3, [r4, #0]
        }
    }
   d7120:	bd10      	pop	{r4, pc}

000d7122 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7122:	b510      	push	{r4, lr}
   d7124:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7126:	f7ff fff3 	bl	d7110 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d712a:	4620      	mov	r0, r4
   d712c:	bd10      	pop	{r4, pc}
	...

000d7130 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7130:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7132:	4b09      	ldr	r3, [pc, #36]	; (d7158 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d7134:	4c09      	ldr	r4, [pc, #36]	; (d715c <_GLOBAL__sub_I_System+0x2c>)
   d7136:	2202      	movs	r2, #2
   d7138:	2000      	movs	r0, #0
   d713a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d713c:	4b08      	ldr	r3, [pc, #32]	; (d7160 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d713e:	6020      	str	r0, [r4, #0]
   d7140:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7142:	71a0      	strb	r0, [r4, #6]
   d7144:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7146:	f7ff fe1b 	bl	d6d80 <set_system_mode>
SystemClass System;
   d714a:	4620      	mov	r0, r4
   d714c:	4a05      	ldr	r2, [pc, #20]	; (d7164 <_GLOBAL__sub_I_System+0x34>)
   d714e:	4906      	ldr	r1, [pc, #24]	; (d7168 <_GLOBAL__sub_I_System+0x38>)
   d7150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7154:	f001 b8e6 	b.w	d8324 <__aeabi_atexit>
   d7158:	2003e664 	.word	0x2003e664
   d715c:	2003e658 	.word	0x2003e658
   d7160:	ffff0000 	.word	0xffff0000
   d7164:	2003e514 	.word	0x2003e514
   d7168:	000d7123 	.word	0x000d7123

000d716c <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d716c:	b570      	push	{r4, r5, r6, lr}
   d716e:	b086      	sub	sp, #24
   d7170:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d7172:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d7174:	4668      	mov	r0, sp
   d7176:	f000 faa5 	bl	d76c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d717a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d717c:	1d34      	adds	r4, r6, #4
   d717e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7180:	682b      	ldr	r3, [r5, #0]
   d7182:	7023      	strb	r3, [r4, #0]
    }
   d7184:	4630      	mov	r0, r6
   d7186:	b006      	add	sp, #24
   d7188:	bd70      	pop	{r4, r5, r6, pc}

000d718a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d718a:	b510      	push	{r4, lr}
   d718c:	4604      	mov	r4, r0
{
	free(buffer);
   d718e:	6800      	ldr	r0, [r0, #0]
   d7190:	f7ff fea2 	bl	d6ed8 <free>
}
   d7194:	4620      	mov	r0, r4
   d7196:	bd10      	pop	{r4, pc}

000d7198 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7198:	b510      	push	{r4, lr}
   d719a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d719c:	6800      	ldr	r0, [r0, #0]
   d719e:	b108      	cbz	r0, d71a4 <_ZN6String10invalidateEv+0xc>
   d71a0:	f7ff fe9a 	bl	d6ed8 <free>
	buffer = NULL;
   d71a4:	2300      	movs	r3, #0
	capacity = len = 0;
   d71a6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d71aa:	6023      	str	r3, [r4, #0]
}
   d71ac:	bd10      	pop	{r4, pc}

000d71ae <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d71ae:	b538      	push	{r3, r4, r5, lr}
   d71b0:	4604      	mov	r4, r0
   d71b2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d71b4:	6800      	ldr	r0, [r0, #0]
   d71b6:	3101      	adds	r1, #1
   d71b8:	f7ff fe96 	bl	d6ee8 <realloc>
	if (newbuffer) {
   d71bc:	b110      	cbz	r0, d71c4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d71be:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d71c2:	2001      	movs	r0, #1
	}
	return 0;
}
   d71c4:	bd38      	pop	{r3, r4, r5, pc}

000d71c6 <_ZN6String7reserveEj>:
{
   d71c6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d71c8:	6803      	ldr	r3, [r0, #0]
{
   d71ca:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d71cc:	b123      	cbz	r3, d71d8 <_ZN6String7reserveEj+0x12>
   d71ce:	6843      	ldr	r3, [r0, #4]
   d71d0:	428b      	cmp	r3, r1
   d71d2:	d301      	bcc.n	d71d8 <_ZN6String7reserveEj+0x12>
   d71d4:	2001      	movs	r0, #1
}
   d71d6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d71d8:	4620      	mov	r0, r4
   d71da:	f7ff ffe8 	bl	d71ae <_ZN6String12changeBufferEj>
   d71de:	2800      	cmp	r0, #0
   d71e0:	d0f9      	beq.n	d71d6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d71e2:	68a3      	ldr	r3, [r4, #8]
   d71e4:	2b00      	cmp	r3, #0
   d71e6:	d1f5      	bne.n	d71d4 <_ZN6String7reserveEj+0xe>
   d71e8:	6822      	ldr	r2, [r4, #0]
   d71ea:	7013      	strb	r3, [r2, #0]
   d71ec:	e7f2      	b.n	d71d4 <_ZN6String7reserveEj+0xe>

000d71ee <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d71ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d71f0:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d71f2:	4611      	mov	r1, r2
   d71f4:	9201      	str	r2, [sp, #4]
{
   d71f6:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d71f8:	f7ff ffe5 	bl	d71c6 <_ZN6String7reserveEj>
   d71fc:	9a01      	ldr	r2, [sp, #4]
   d71fe:	b928      	cbnz	r0, d720c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7200:	4620      	mov	r0, r4
   d7202:	f7ff ffc9 	bl	d7198 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7206:	4620      	mov	r0, r4
   d7208:	b003      	add	sp, #12
   d720a:	bd30      	pop	{r4, r5, pc}
	len = length;
   d720c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d720e:	4629      	mov	r1, r5
   d7210:	6820      	ldr	r0, [r4, #0]
   d7212:	f001 f9b9 	bl	d8588 <memcpy>
	buffer[len] = 0;
   d7216:	6822      	ldr	r2, [r4, #0]
   d7218:	68a3      	ldr	r3, [r4, #8]
   d721a:	2100      	movs	r1, #0
   d721c:	54d1      	strb	r1, [r2, r3]
	return *this;
   d721e:	e7f2      	b.n	d7206 <_ZN6String4copyEPKcj+0x18>

000d7220 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7220:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7222:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7224:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7228:	4604      	mov	r4, r0
	len = 0;
   d722a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d722c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d722e:	b141      	cbz	r1, d7242 <_ZN6StringC1EPKc+0x22>
   d7230:	4608      	mov	r0, r1
   d7232:	9101      	str	r1, [sp, #4]
   d7234:	f001 f9ec 	bl	d8610 <strlen>
   d7238:	9901      	ldr	r1, [sp, #4]
   d723a:	4602      	mov	r2, r0
   d723c:	4620      	mov	r0, r4
   d723e:	f7ff ffd6 	bl	d71ee <_ZN6String4copyEPKcj>
}
   d7242:	4620      	mov	r0, r4
   d7244:	b002      	add	sp, #8
   d7246:	bd10      	pop	{r4, pc}

000d7248 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7248:	b513      	push	{r0, r1, r4, lr}
   d724a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d724c:	b159      	cbz	r1, d7266 <_ZN6StringaSEPKc+0x1e>
   d724e:	4608      	mov	r0, r1
   d7250:	9101      	str	r1, [sp, #4]
   d7252:	f001 f9dd 	bl	d8610 <strlen>
   d7256:	9901      	ldr	r1, [sp, #4]
   d7258:	4602      	mov	r2, r0
   d725a:	4620      	mov	r0, r4
   d725c:	f7ff ffc7 	bl	d71ee <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7260:	4620      	mov	r0, r4
   d7262:	b002      	add	sp, #8
   d7264:	bd10      	pop	{r4, pc}
	else invalidate();
   d7266:	f7ff ff97 	bl	d7198 <_ZN6String10invalidateEv>
   d726a:	e7f9      	b.n	d7260 <_ZN6StringaSEPKc+0x18>

000d726c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d726c:	b510      	push	{r4, lr}
   d726e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7270:	6800      	ldr	r0, [r0, #0]
   d7272:	b108      	cbz	r0, d7278 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7274:	f7ff fc14 	bl	d6aa0 <os_mutex_recursive_destroy>
    }
   d7278:	4620      	mov	r0, r4
   d727a:	bd10      	pop	{r4, pc}

000d727c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d727c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d727e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7280:	4604      	mov	r4, r0
      if (_M_manager)
   d7282:	b113      	cbz	r3, d728a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7284:	2203      	movs	r2, #3
   d7286:	4601      	mov	r1, r0
   d7288:	4798      	blx	r3
    }
   d728a:	4620      	mov	r0, r4
   d728c:	bd10      	pop	{r4, pc}
	...

000d7290 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7290:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7292:	4c06      	ldr	r4, [pc, #24]	; (d72ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7294:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7296:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7298:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d729a:	f7ff fbf9 	bl	d6a90 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d729e:	4620      	mov	r0, r4
   d72a0:	4a03      	ldr	r2, [pc, #12]	; (d72b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d72a2:	4904      	ldr	r1, [pc, #16]	; (d72b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d72a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d72a8:	f001 b83c 	b.w	d8324 <__aeabi_atexit>
   d72ac:	2003e668 	.word	0x2003e668
   d72b0:	2003e514 	.word	0x2003e514
   d72b4:	000d726d 	.word	0x000d726d

000d72b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d72b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72ba:	4606      	mov	r6, r0
   d72bc:	460d      	mov	r5, r1
  size_t n = 0;
   d72be:	188f      	adds	r7, r1, r2
   d72c0:	2400      	movs	r4, #0
  while (size--) {
   d72c2:	42bd      	cmp	r5, r7
   d72c4:	d00c      	beq.n	d72e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d72c6:	6833      	ldr	r3, [r6, #0]
   d72c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d72cc:	689b      	ldr	r3, [r3, #8]
   d72ce:	4630      	mov	r0, r6
   d72d0:	4798      	blx	r3
     if (chunk>=0)
   d72d2:	1e03      	subs	r3, r0, #0
   d72d4:	db01      	blt.n	d72da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d72d6:	441c      	add	r4, r3
  while (size--) {
   d72d8:	e7f3      	b.n	d72c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d72da:	2c00      	cmp	r4, #0
   d72dc:	bf08      	it	eq
   d72de:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d72e0:	4620      	mov	r0, r4
   d72e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d72e4:	b513      	push	{r0, r1, r4, lr}
   d72e6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d72e8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d72ea:	b159      	cbz	r1, d7304 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d72ec:	9101      	str	r1, [sp, #4]
   d72ee:	f001 f98f 	bl	d8610 <strlen>
   d72f2:	6823      	ldr	r3, [r4, #0]
   d72f4:	9901      	ldr	r1, [sp, #4]
   d72f6:	68db      	ldr	r3, [r3, #12]
   d72f8:	4602      	mov	r2, r0
   d72fa:	4620      	mov	r0, r4
    }
   d72fc:	b002      	add	sp, #8
   d72fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7302:	4718      	bx	r3
    }
   d7304:	b002      	add	sp, #8
   d7306:	bd10      	pop	{r4, pc}

000d7308 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7308:	b508      	push	{r3, lr}
  return write(str);
   d730a:	f7ff ffeb 	bl	d72e4 <_ZN5Print5writeEPKc>
}
   d730e:	bd08      	pop	{r3, pc}

000d7310 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7310:	6803      	ldr	r3, [r0, #0]
   d7312:	689b      	ldr	r3, [r3, #8]
   d7314:	4718      	bx	r3

000d7316 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7316:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7318:	210d      	movs	r1, #13
{
   d731a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d731c:	f7ff fff8 	bl	d7310 <_ZN5Print5printEc>
  n += print('\n');
   d7320:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7322:	4604      	mov	r4, r0
  n += print('\n');
   d7324:	4628      	mov	r0, r5
   d7326:	f7ff fff3 	bl	d7310 <_ZN5Print5printEc>
  return n;
}
   d732a:	4420      	add	r0, r4
   d732c:	bd38      	pop	{r3, r4, r5, pc}

000d732e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d732e:	b538      	push	{r3, r4, r5, lr}
   d7330:	4605      	mov	r5, r0
  return write(str);
   d7332:	f7ff ffd7 	bl	d72e4 <_ZN5Print5writeEPKc>
   d7336:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7338:	4628      	mov	r0, r5
   d733a:	f7ff ffec 	bl	d7316 <_ZN5Print7printlnEv>
  return n;
}
   d733e:	4420      	add	r0, r4
   d7340:	bd38      	pop	{r3, r4, r5, pc}

000d7342 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7342:	b530      	push	{r4, r5, lr}
   d7344:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7346:	2300      	movs	r3, #0
   d7348:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d734c:	2a01      	cmp	r2, #1
   d734e:	bf98      	it	ls
   d7350:	220a      	movls	r2, #10
   d7352:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7354:	460d      	mov	r5, r1
   d7356:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d735a:	fb01 5312 	mls	r3, r1, r2, r5
   d735e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7362:	2b09      	cmp	r3, #9
   d7364:	bf94      	ite	ls
   d7366:	3330      	addls	r3, #48	; 0x30
   d7368:	3337      	addhi	r3, #55	; 0x37
   d736a:	b2db      	uxtb	r3, r3
  } while(n);
   d736c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d736e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7372:	d9ef      	bls.n	d7354 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7374:	4621      	mov	r1, r4
   d7376:	f7ff ffb5 	bl	d72e4 <_ZN5Print5writeEPKc>
}
   d737a:	b00b      	add	sp, #44	; 0x2c
   d737c:	bd30      	pop	{r4, r5, pc}

000d737e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7382:	b086      	sub	sp, #24
   d7384:	af00      	add	r7, sp, #0
   d7386:	4605      	mov	r5, r0
   d7388:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d738a:	1d38      	adds	r0, r7, #4
   d738c:	2114      	movs	r1, #20
{
   d738e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7390:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7392:	f7ff fdb9 	bl	d6f08 <vsnprintf>

    if (n<bufsize)
   d7396:	2813      	cmp	r0, #19
   d7398:	d80e      	bhi.n	d73b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d739a:	1d39      	adds	r1, r7, #4
   d739c:	4628      	mov	r0, r5
   d739e:	f7ff ffa1 	bl	d72e4 <_ZN5Print5writeEPKc>
   d73a2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d73a4:	b11e      	cbz	r6, d73ae <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d73a6:	4628      	mov	r0, r5
   d73a8:	f7ff ffb5 	bl	d7316 <_ZN5Print7printlnEv>
   d73ac:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d73ae:	4620      	mov	r0, r4
   d73b0:	3718      	adds	r7, #24
   d73b2:	46bd      	mov	sp, r7
   d73b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d73b8:	f100 0308 	add.w	r3, r0, #8
   d73bc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d73c0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d73c2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d73c6:	4622      	mov	r2, r4
   d73c8:	1c41      	adds	r1, r0, #1
   d73ca:	683b      	ldr	r3, [r7, #0]
   d73cc:	4668      	mov	r0, sp
   d73ce:	f7ff fd9b 	bl	d6f08 <vsnprintf>
  return write(str);
   d73d2:	4669      	mov	r1, sp
   d73d4:	4628      	mov	r0, r5
   d73d6:	f7ff ff85 	bl	d72e4 <_ZN5Print5writeEPKc>
   d73da:	4604      	mov	r4, r0
   d73dc:	46c5      	mov	sp, r8
   d73de:	e7e1      	b.n	d73a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d73e0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d73e0:	b510      	push	{r4, lr}
   d73e2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d73e4:	f7ff fb2c 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d73e8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d73ea:	6823      	ldr	r3, [r4, #0]
   d73ec:	4620      	mov	r0, r4
   d73ee:	695b      	ldr	r3, [r3, #20]
   d73f0:	4798      	blx	r3
    if (c >= 0) return c;
   d73f2:	2800      	cmp	r0, #0
   d73f4:	da08      	bge.n	d7408 <_ZN6Stream9timedReadEv+0x28>
   d73f6:	f7ff fb23 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d73fa:	68e3      	ldr	r3, [r4, #12]
   d73fc:	1ac0      	subs	r0, r0, r3
   d73fe:	68a3      	ldr	r3, [r4, #8]
   d7400:	4298      	cmp	r0, r3
   d7402:	d3f2      	bcc.n	d73ea <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d7404:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7408:	bd10      	pop	{r4, pc}

000d740a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d740a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d740c:	4606      	mov	r6, r0
   d740e:	460d      	mov	r5, r1
   d7410:	4617      	mov	r7, r2
  size_t count = 0;
   d7412:	2400      	movs	r4, #0
  while (count < length) {
   d7414:	42bc      	cmp	r4, r7
   d7416:	d007      	beq.n	d7428 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d7418:	4630      	mov	r0, r6
   d741a:	f7ff ffe1 	bl	d73e0 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d741e:	1e03      	subs	r3, r0, #0
   d7420:	db02      	blt.n	d7428 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d7422:	552b      	strb	r3, [r5, r4]
    count++;
   d7424:	3401      	adds	r4, #1
  while (count < length) {
   d7426:	e7f5      	b.n	d7414 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d7428:	4620      	mov	r0, r4
   d742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d742c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d742c:	2300      	movs	r3, #0
   d742e:	6840      	ldr	r0, [r0, #4]
   d7430:	461a      	mov	r2, r3
   d7432:	4619      	mov	r1, r3
   d7434:	f7ff bcf0 	b.w	d6e18 <network_on>

000d7438 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7438:	4b01      	ldr	r3, [pc, #4]	; (d7440 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d743a:	4a02      	ldr	r2, [pc, #8]	; (d7444 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d743c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d743e:	4770      	bx	lr
   d7440:	2003e66c 	.word	0x2003e66c
   d7444:	000d97b4 	.word	0x000d97b4

000d7448 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7448:	4b02      	ldr	r3, [pc, #8]	; (d7454 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d744a:	681a      	ldr	r2, [r3, #0]
   d744c:	4b02      	ldr	r3, [pc, #8]	; (d7458 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d744e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7450:	4770      	bx	lr
   d7452:	bf00      	nop
   d7454:	2003e4ac 	.word	0x2003e4ac
   d7458:	2003e670 	.word	0x2003e670

000d745c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d745c:	2100      	movs	r1, #0
   d745e:	f7ff bc97 	b.w	d6d90 <system_delay_ms>

000d7462 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7462:	b510      	push	{r4, lr}
   d7464:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7466:	f7ff ff09 	bl	d727c <_ZNSt14_Function_baseD1Ev>
   d746a:	4620      	mov	r0, r4
   d746c:	bd10      	pop	{r4, pc}
	...

000d7470 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7470:	4803      	ldr	r0, [pc, #12]	; (d7480 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7472:	4a04      	ldr	r2, [pc, #16]	; (d7484 <_GLOBAL__sub_I_RGB+0x14>)
   d7474:	4904      	ldr	r1, [pc, #16]	; (d7488 <_GLOBAL__sub_I_RGB+0x18>)
   d7476:	2300      	movs	r3, #0
   d7478:	6083      	str	r3, [r0, #8]
   d747a:	f000 bf53 	b.w	d8324 <__aeabi_atexit>
   d747e:	bf00      	nop
   d7480:	2003e674 	.word	0x2003e674
   d7484:	2003e514 	.word	0x2003e514
   d7488:	000d7463 	.word	0x000d7463

000d748c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d748c:	4b01      	ldr	r3, [pc, #4]	; (d7494 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d748e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7490:	4770      	bx	lr
   d7492:	bf00      	nop
   d7494:	2003e4b0 	.word	0x2003e4b0

000d7498 <serialEventRun>:
{
   d7498:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d749a:	4b0b      	ldr	r3, [pc, #44]	; (d74c8 <serialEventRun+0x30>)
   d749c:	b143      	cbz	r3, d74b0 <serialEventRun+0x18>
   d749e:	f000 f97d 	bl	d779c <_Z16_fetch_usbserialv>
   d74a2:	6803      	ldr	r3, [r0, #0]
   d74a4:	691b      	ldr	r3, [r3, #16]
   d74a6:	4798      	blx	r3
   d74a8:	2800      	cmp	r0, #0
   d74aa:	dd01      	ble.n	d74b0 <serialEventRun+0x18>
        serialEvent();
   d74ac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d74b0:	4b06      	ldr	r3, [pc, #24]	; (d74cc <serialEventRun+0x34>)
   d74b2:	b143      	cbz	r3, d74c6 <serialEventRun+0x2e>
   d74b4:	f000 f9f0 	bl	d7898 <_Z22__fetch_global_Serial1v>
   d74b8:	6803      	ldr	r3, [r0, #0]
   d74ba:	691b      	ldr	r3, [r3, #16]
   d74bc:	4798      	blx	r3
   d74be:	2800      	cmp	r0, #0
   d74c0:	dd01      	ble.n	d74c6 <serialEventRun+0x2e>
        serialEvent1();
   d74c2:	f3af 8000 	nop.w
}
   d74c6:	bd08      	pop	{r3, pc}
	...

000d74d0 <_post_loop>:
{
   d74d0:	b508      	push	{r3, lr}
	serialEventRun();
   d74d2:	f7ff ffe1 	bl	d7498 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d74d6:	f7ff fab3 	bl	d6a40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d74da:	4b01      	ldr	r3, [pc, #4]	; (d74e0 <_post_loop+0x10>)
   d74dc:	6018      	str	r0, [r3, #0]
}
   d74de:	bd08      	pop	{r3, pc}
   d74e0:	2003e7d4 	.word	0x2003e7d4

000d74e4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d74e4:	4802      	ldr	r0, [pc, #8]	; (d74f0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d74e6:	4a03      	ldr	r2, [pc, #12]	; (d74f4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d74e8:	4903      	ldr	r1, [pc, #12]	; (d74f8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d74ea:	1a12      	subs	r2, r2, r0
   d74ec:	f001 b84c 	b.w	d8588 <memcpy>
   d74f0:	2003f400 	.word	0x2003f400
   d74f4:	2003f404 	.word	0x2003f404
   d74f8:	000d9b90 	.word	0x000d9b90

000d74fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d74fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d74fe:	2300      	movs	r3, #0
   d7500:	9300      	str	r3, [sp, #0]
   d7502:	461a      	mov	r2, r3
   d7504:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7508:	f7ff fc5c 	bl	d6dc4 <system_ctrl_set_result>
}
   d750c:	b003      	add	sp, #12
   d750e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7514 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7514:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7516:	8843      	ldrh	r3, [r0, #2]
   d7518:	2b0a      	cmp	r3, #10
   d751a:	d008      	beq.n	d752e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d751c:	2b50      	cmp	r3, #80	; 0x50
   d751e:	d10b      	bne.n	d7538 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7520:	4b09      	ldr	r3, [pc, #36]	; (d7548 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7522:	681b      	ldr	r3, [r3, #0]
   d7524:	b14b      	cbz	r3, d753a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7526:	b003      	add	sp, #12
   d7528:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d752c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d752e:	f7ff ffe5 	bl	d74fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7532:	b003      	add	sp, #12
   d7534:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7538:	2300      	movs	r3, #0
   d753a:	9300      	str	r3, [sp, #0]
   d753c:	461a      	mov	r2, r3
   d753e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7542:	f7ff fc3f 	bl	d6dc4 <system_ctrl_set_result>
}
   d7546:	e7f4      	b.n	d7532 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7548:	2003e688 	.word	0x2003e688

000d754c <module_user_init_hook>:
{
   d754c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d754e:	4c12      	ldr	r4, [pc, #72]	; (d7598 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7550:	4812      	ldr	r0, [pc, #72]	; (d759c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7552:	4d13      	ldr	r5, [pc, #76]	; (d75a0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7554:	2100      	movs	r1, #0
   d7556:	f7ff fce7 	bl	d6f28 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d755a:	6823      	ldr	r3, [r4, #0]
   d755c:	42ab      	cmp	r3, r5
   d755e:	4b11      	ldr	r3, [pc, #68]	; (d75a4 <module_user_init_hook+0x58>)
   d7560:	bf0c      	ite	eq
   d7562:	2201      	moveq	r2, #1
   d7564:	2200      	movne	r2, #0
   d7566:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7568:	d002      	beq.n	d7570 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d756a:	f7ff ffbb 	bl	d74e4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d756e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7570:	f7ff fa56 	bl	d6a20 <HAL_RNG_GetRandomNumber>
   d7574:	4604      	mov	r4, r0
    srand(seed);
   d7576:	f001 f81d 	bl	d85b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d757a:	4b0b      	ldr	r3, [pc, #44]	; (d75a8 <module_user_init_hook+0x5c>)
   d757c:	b113      	cbz	r3, d7584 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d757e:	4620      	mov	r0, r4
   d7580:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7584:	2100      	movs	r1, #0
   d7586:	4808      	ldr	r0, [pc, #32]	; (d75a8 <module_user_init_hook+0x5c>)
   d7588:	f7ff fc96 	bl	d6eb8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d758c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7590:	4806      	ldr	r0, [pc, #24]	; (d75ac <module_user_init_hook+0x60>)
   d7592:	2100      	movs	r1, #0
   d7594:	f7ff bc0c 	b.w	d6db0 <system_ctrl_set_app_request_handler>
   d7598:	2003f400 	.word	0x2003f400
   d759c:	000d748d 	.word	0x000d748d
   d75a0:	9a271c1e 	.word	0x9a271c1e
   d75a4:	2003e684 	.word	0x2003e684
   d75a8:	00000000 	.word	0x00000000
   d75ac:	000d7515 	.word	0x000d7515

000d75b0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d75b0:	4770      	bx	lr

000d75b2 <_ZN9IPAddressD0Ev>:
   d75b2:	b510      	push	{r4, lr}
   d75b4:	2118      	movs	r1, #24
   d75b6:	4604      	mov	r4, r0
   d75b8:	f000 feb9 	bl	d832e <_ZdlPvj>
   d75bc:	4620      	mov	r0, r4
   d75be:	bd10      	pop	{r4, pc}

000d75c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d75c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d75c2:	7d03      	ldrb	r3, [r0, #20]
   d75c4:	2b06      	cmp	r3, #6
{
   d75c6:	b08d      	sub	sp, #52	; 0x34
   d75c8:	460e      	mov	r6, r1
   d75ca:	f100 0704 	add.w	r7, r0, #4
   d75ce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d75d2:	d012      	beq.n	d75fa <_ZNK9IPAddress7printToER5Print+0x3a>
   d75d4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d75d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d75dc:	220a      	movs	r2, #10
   d75de:	4630      	mov	r0, r6
   d75e0:	f7ff feaf 	bl	d7342 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d75e4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d75e6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d75e8:	d019      	beq.n	d761e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d75ea:	2c00      	cmp	r4, #0
   d75ec:	d0f4      	beq.n	d75d8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d75ee:	212e      	movs	r1, #46	; 0x2e
   d75f0:	4630      	mov	r0, r6
   d75f2:	f7ff fe8d 	bl	d7310 <_ZN5Print5printEc>
   d75f6:	4404      	add	r4, r0
   d75f8:	e7ee      	b.n	d75d8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d75fa:	232f      	movs	r3, #47	; 0x2f
   d75fc:	466a      	mov	r2, sp
   d75fe:	4639      	mov	r1, r7
   d7600:	200a      	movs	r0, #10
		buf[0] = 0;
   d7602:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7606:	f7ff fa53 	bl	d6ab0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d760a:	4668      	mov	r0, sp
   d760c:	f001 f800 	bl	d8610 <strlen>
   d7610:	6833      	ldr	r3, [r6, #0]
   d7612:	4602      	mov	r2, r0
   d7614:	68db      	ldr	r3, [r3, #12]
   d7616:	4669      	mov	r1, sp
   d7618:	4630      	mov	r0, r6
   d761a:	4798      	blx	r3
   d761c:	4604      	mov	r4, r0
    }
    return n;
}
   d761e:	4620      	mov	r0, r4
   d7620:	b00d      	add	sp, #52	; 0x34
   d7622:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7624 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7624:	b510      	push	{r4, lr}
   d7626:	4b05      	ldr	r3, [pc, #20]	; (d763c <_ZN9IPAddressC1Ev+0x18>)
   d7628:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d762a:	2211      	movs	r2, #17
   d762c:	f840 3b04 	str.w	r3, [r0], #4
   d7630:	2100      	movs	r1, #0
   d7632:	f000 ffb7 	bl	d85a4 <memset>
}
   d7636:	4620      	mov	r0, r4
   d7638:	bd10      	pop	{r4, pc}
   d763a:	bf00      	nop
   d763c:	000d97dc 	.word	0x000d97dc

000d7640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7640:	4603      	mov	r3, r0
   d7642:	4a07      	ldr	r2, [pc, #28]	; (d7660 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7644:	b510      	push	{r4, lr}
   d7646:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d764a:	f101 0210 	add.w	r2, r1, #16
   d764e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7652:	f843 4b04 	str.w	r4, [r3], #4
   d7656:	4291      	cmp	r1, r2
   d7658:	d1f9      	bne.n	d764e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d765a:	780a      	ldrb	r2, [r1, #0]
   d765c:	701a      	strb	r2, [r3, #0]
}
   d765e:	bd10      	pop	{r4, pc}
   d7660:	000d97dc 	.word	0x000d97dc

000d7664 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7664:	7d03      	ldrb	r3, [r0, #20]
   d7666:	2b04      	cmp	r3, #4
   d7668:	d104      	bne.n	d7674 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d766a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d766c:	3800      	subs	r0, #0
   d766e:	bf18      	it	ne
   d7670:	2001      	movne	r0, #1
   d7672:	4770      	bx	lr
    } else if (version() == 6) {
   d7674:	2b06      	cmp	r3, #6
   d7676:	d107      	bne.n	d7688 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7678:	6843      	ldr	r3, [r0, #4]
   d767a:	b93b      	cbnz	r3, d768c <_ZNK9IPAddresscvbEv+0x28>
   d767c:	6883      	ldr	r3, [r0, #8]
   d767e:	b92b      	cbnz	r3, d768c <_ZNK9IPAddresscvbEv+0x28>
   d7680:	68c3      	ldr	r3, [r0, #12]
   d7682:	b91b      	cbnz	r3, d768c <_ZNK9IPAddresscvbEv+0x28>
   d7684:	6900      	ldr	r0, [r0, #16]
   d7686:	e7f1      	b.n	d766c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7688:	2000      	movs	r0, #0
   d768a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d768c:	2001      	movs	r0, #1
}
   d768e:	4770      	bx	lr

000d7690 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7690:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7692:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7696:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d769a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d769e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d76a2:	2304      	movs	r3, #4
   d76a4:	6041      	str	r1, [r0, #4]
   d76a6:	7503      	strb	r3, [r0, #20]
}
   d76a8:	bd10      	pop	{r4, pc}
	...

000d76ac <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d76ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d76ae:	4d04      	ldr	r5, [pc, #16]	; (d76c0 <_ZN9IPAddressC1Ehhhh+0x14>)
   d76b0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d76b2:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d76b6:	9500      	str	r5, [sp, #0]
   d76b8:	f7ff ffea 	bl	d7690 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d76bc:	b003      	add	sp, #12
   d76be:	bd30      	pop	{r4, r5, pc}
   d76c0:	000d97dc 	.word	0x000d97dc

000d76c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d76c4:	b513      	push	{r0, r1, r4, lr}
   d76c6:	4b05      	ldr	r3, [pc, #20]	; (d76dc <_ZN9IPAddressC1EPKh+0x18>)
   d76c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d76ca:	78cb      	ldrb	r3, [r1, #3]
   d76cc:	9300      	str	r3, [sp, #0]
   d76ce:	788b      	ldrb	r3, [r1, #2]
   d76d0:	784a      	ldrb	r2, [r1, #1]
   d76d2:	7809      	ldrb	r1, [r1, #0]
   d76d4:	f7ff ffdc 	bl	d7690 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d76d8:	b002      	add	sp, #8
   d76da:	bd10      	pop	{r4, pc}
   d76dc:	000d97dc 	.word	0x000d97dc

000d76e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d76e0:	7441      	strb	r1, [r0, #17]
}
   d76e2:	4770      	bx	lr

000d76e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d76e4:	4770      	bx	lr

000d76e6 <_ZN9USBSerial4readEv>:
{
   d76e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d76e8:	2100      	movs	r1, #0
   d76ea:	7c00      	ldrb	r0, [r0, #16]
   d76ec:	f7ff fb20 	bl	d6d30 <HAL_USB_USART_Receive_Data>
}
   d76f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d76f4:	bd08      	pop	{r3, pc}

000d76f6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d76f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d76f8:	2101      	movs	r1, #1
   d76fa:	7c00      	ldrb	r0, [r0, #16]
   d76fc:	f7ff fb18 	bl	d6d30 <HAL_USB_USART_Receive_Data>
}
   d7700:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7704:	bd08      	pop	{r3, pc}

000d7706 <_ZN9USBSerial17availableForWriteEv>:
{
   d7706:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7708:	7c00      	ldrb	r0, [r0, #16]
   d770a:	f7ff fb09 	bl	d6d20 <HAL_USB_USART_Available_Data_For_Write>
}
   d770e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7712:	bd08      	pop	{r3, pc}

000d7714 <_ZN9USBSerial9availableEv>:
{
   d7714:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7716:	7c00      	ldrb	r0, [r0, #16]
   d7718:	f7ff fafa 	bl	d6d10 <HAL_USB_USART_Available_Data>
}
   d771c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7720:	bd08      	pop	{r3, pc}

000d7722 <_ZN9USBSerial5writeEh>:
{
   d7722:	b513      	push	{r0, r1, r4, lr}
   d7724:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7726:	7c00      	ldrb	r0, [r0, #16]
{
   d7728:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d772a:	f7ff faf9 	bl	d6d20 <HAL_USB_USART_Available_Data_For_Write>
   d772e:	2800      	cmp	r0, #0
   d7730:	9901      	ldr	r1, [sp, #4]
   d7732:	dc01      	bgt.n	d7738 <_ZN9USBSerial5writeEh+0x16>
   d7734:	7c60      	ldrb	r0, [r4, #17]
   d7736:	b120      	cbz	r0, d7742 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7738:	7c20      	ldrb	r0, [r4, #16]
   d773a:	f7ff fb01 	bl	d6d40 <HAL_USB_USART_Send_Data>
   d773e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7742:	b002      	add	sp, #8
   d7744:	bd10      	pop	{r4, pc}

000d7746 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7746:	7c00      	ldrb	r0, [r0, #16]
   d7748:	f7ff bb02 	b.w	d6d50 <HAL_USB_USART_Flush_Data>

000d774c <_ZN9USBSerialD0Ev>:
   d774c:	b510      	push	{r4, lr}
   d774e:	2114      	movs	r1, #20
   d7750:	4604      	mov	r4, r0
   d7752:	f000 fdec 	bl	d832e <_ZdlPvj>
   d7756:	4620      	mov	r0, r4
   d7758:	bd10      	pop	{r4, pc}
	...

000d775c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d775c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d775e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7762:	4604      	mov	r4, r0
   d7764:	4608      	mov	r0, r1
   d7766:	2100      	movs	r1, #0
   d7768:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d776c:	4b04      	ldr	r3, [pc, #16]	; (d7780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d776e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7770:	2301      	movs	r3, #1
  _serial = serial;
   d7772:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7774:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7776:	4611      	mov	r1, r2
   d7778:	f7ff faba 	bl	d6cf0 <HAL_USB_USART_Init>
}
   d777c:	4620      	mov	r0, r4
   d777e:	bd10      	pop	{r4, pc}
   d7780:	000d97f0 	.word	0x000d97f0

000d7784 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7784:	7c00      	ldrb	r0, [r0, #16]
   d7786:	2200      	movs	r2, #0
   d7788:	f7ff baba 	b.w	d6d00 <HAL_USB_USART_Begin>

000d778c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d778c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d778e:	2214      	movs	r2, #20
{
   d7790:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7792:	2100      	movs	r1, #0
   d7794:	f000 ff06 	bl	d85a4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7798:	4620      	mov	r0, r4
   d779a:	bd10      	pop	{r4, pc}

000d779c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d779c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d779e:	4c10      	ldr	r4, [pc, #64]	; (d77e0 <_Z16_fetch_usbserialv+0x44>)
{
   d77a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d77a2:	a803      	add	r0, sp, #12
   d77a4:	f7ff fff2 	bl	d778c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77a8:	7821      	ldrb	r1, [r4, #0]
   d77aa:	f3bf 8f5b 	dmb	ish
   d77ae:	f011 0101 	ands.w	r1, r1, #1
   d77b2:	d111      	bne.n	d77d8 <_Z16_fetch_usbserialv+0x3c>
   d77b4:	4620      	mov	r0, r4
   d77b6:	9101      	str	r1, [sp, #4]
   d77b8:	f7fc fc7e 	bl	d40b8 <__cxa_guard_acquire>
   d77bc:	9901      	ldr	r1, [sp, #4]
   d77be:	b158      	cbz	r0, d77d8 <_Z16_fetch_usbserialv+0x3c>
   d77c0:	aa03      	add	r2, sp, #12
   d77c2:	4808      	ldr	r0, [pc, #32]	; (d77e4 <_Z16_fetch_usbserialv+0x48>)
   d77c4:	f7ff ffca 	bl	d775c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d77c8:	4620      	mov	r0, r4
   d77ca:	f7fc fc7a 	bl	d40c2 <__cxa_guard_release>
   d77ce:	4a06      	ldr	r2, [pc, #24]	; (d77e8 <_Z16_fetch_usbserialv+0x4c>)
   d77d0:	4906      	ldr	r1, [pc, #24]	; (d77ec <_Z16_fetch_usbserialv+0x50>)
   d77d2:	4804      	ldr	r0, [pc, #16]	; (d77e4 <_Z16_fetch_usbserialv+0x48>)
   d77d4:	f000 fda6 	bl	d8324 <__aeabi_atexit>
	return _usbserial;
}
   d77d8:	4802      	ldr	r0, [pc, #8]	; (d77e4 <_Z16_fetch_usbserialv+0x48>)
   d77da:	b008      	add	sp, #32
   d77dc:	bd10      	pop	{r4, pc}
   d77de:	bf00      	nop
   d77e0:	2003e68c 	.word	0x2003e68c
   d77e4:	2003e690 	.word	0x2003e690
   d77e8:	2003e514 	.word	0x2003e514
   d77ec:	000d76e5 	.word	0x000d76e5

000d77f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d77f0:	4770      	bx	lr

000d77f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d77f2:	7441      	strb	r1, [r0, #17]
}
   d77f4:	4770      	bx	lr

000d77f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d77f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d77f8:	7c00      	ldrb	r0, [r0, #16]
   d77fa:	f7ff f9a9 	bl	d6b50 <hal_usart_available_data_for_write>
}
   d77fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7802:	bd08      	pop	{r3, pc}

000d7804 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7804:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7806:	7c00      	ldrb	r0, [r0, #16]
   d7808:	f7ff f97a 	bl	d6b00 <hal_usart_available>
}
   d780c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7810:	bd08      	pop	{r3, pc}

000d7812 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7812:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7814:	7c00      	ldrb	r0, [r0, #16]
   d7816:	f7ff f983 	bl	d6b20 <hal_usart_peek>
}
   d781a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d781e:	bd08      	pop	{r3, pc}

000d7820 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7820:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7822:	7c00      	ldrb	r0, [r0, #16]
   d7824:	f7ff f974 	bl	d6b10 <hal_usart_read>
}
   d7828:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d782c:	bd08      	pop	{r3, pc}

000d782e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d782e:	7c00      	ldrb	r0, [r0, #16]
   d7830:	f7ff b97e 	b.w	d6b30 <hal_usart_flush>

000d7834 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7834:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7836:	7c45      	ldrb	r5, [r0, #17]
{
   d7838:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d783a:	b12d      	cbz	r5, d7848 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d783c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d783e:	b003      	add	sp, #12
   d7840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7844:	f7ff b954 	b.w	d6af0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7848:	7c00      	ldrb	r0, [r0, #16]
   d784a:	9101      	str	r1, [sp, #4]
   d784c:	f7ff f980 	bl	d6b50 <hal_usart_available_data_for_write>
   d7850:	2800      	cmp	r0, #0
   d7852:	9901      	ldr	r1, [sp, #4]
   d7854:	dcf2      	bgt.n	d783c <_ZN11USARTSerial5writeEh+0x8>
}
   d7856:	4628      	mov	r0, r5
   d7858:	b003      	add	sp, #12
   d785a:	bd30      	pop	{r4, r5, pc}

000d785c <_ZN11USARTSerialD0Ev>:
   d785c:	b510      	push	{r4, lr}
   d785e:	2114      	movs	r1, #20
   d7860:	4604      	mov	r4, r0
   d7862:	f000 fd64 	bl	d832e <_ZdlPvj>
   d7866:	4620      	mov	r0, r4
   d7868:	bd10      	pop	{r4, pc}
	...

000d786c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d786c:	b510      	push	{r4, lr}
   d786e:	f04f 0c00 	mov.w	ip, #0
   d7872:	4604      	mov	r4, r0
   d7874:	4608      	mov	r0, r1
   d7876:	4611      	mov	r1, r2
   d7878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d787c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7880:	4a04      	ldr	r2, [pc, #16]	; (d7894 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7882:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7884:	2201      	movs	r2, #1
  _serial = serial;
   d7886:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7888:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d788a:	461a      	mov	r2, r3
   d788c:	f7ff f928 	bl	d6ae0 <hal_usart_init>
}
   d7890:	4620      	mov	r0, r4
   d7892:	bd10      	pop	{r4, pc}
   d7894:	000d9820 	.word	0x000d9820

000d7898 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7898:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d789a:	4c0e      	ldr	r4, [pc, #56]	; (d78d4 <_Z22__fetch_global_Serial1v+0x3c>)
   d789c:	7821      	ldrb	r1, [r4, #0]
   d789e:	f3bf 8f5b 	dmb	ish
   d78a2:	f011 0101 	ands.w	r1, r1, #1
   d78a6:	d112      	bne.n	d78ce <_Z22__fetch_global_Serial1v+0x36>
   d78a8:	4620      	mov	r0, r4
   d78aa:	9101      	str	r1, [sp, #4]
   d78ac:	f7fc fc04 	bl	d40b8 <__cxa_guard_acquire>
   d78b0:	9901      	ldr	r1, [sp, #4]
   d78b2:	b160      	cbz	r0, d78ce <_Z22__fetch_global_Serial1v+0x36>
   d78b4:	4a08      	ldr	r2, [pc, #32]	; (d78d8 <_Z22__fetch_global_Serial1v+0x40>)
   d78b6:	4b09      	ldr	r3, [pc, #36]	; (d78dc <_Z22__fetch_global_Serial1v+0x44>)
   d78b8:	4809      	ldr	r0, [pc, #36]	; (d78e0 <_Z22__fetch_global_Serial1v+0x48>)
   d78ba:	f7ff ffd7 	bl	d786c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d78be:	4620      	mov	r0, r4
   d78c0:	f7fc fbff 	bl	d40c2 <__cxa_guard_release>
   d78c4:	4a07      	ldr	r2, [pc, #28]	; (d78e4 <_Z22__fetch_global_Serial1v+0x4c>)
   d78c6:	4908      	ldr	r1, [pc, #32]	; (d78e8 <_Z22__fetch_global_Serial1v+0x50>)
   d78c8:	4805      	ldr	r0, [pc, #20]	; (d78e0 <_Z22__fetch_global_Serial1v+0x48>)
   d78ca:	f000 fd2b 	bl	d8324 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78ce:	4804      	ldr	r0, [pc, #16]	; (d78e0 <_Z22__fetch_global_Serial1v+0x48>)
   d78d0:	b002      	add	sp, #8
   d78d2:	bd10      	pop	{r4, pc}
   d78d4:	2003e6a4 	.word	0x2003e6a4
   d78d8:	2003e6a8 	.word	0x2003e6a8
   d78dc:	2003e72c 	.word	0x2003e72c
   d78e0:	2003e7b0 	.word	0x2003e7b0
   d78e4:	2003e514 	.word	0x2003e514
   d78e8:	000d77f1 	.word	0x000d77f1

000d78ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d78ec:	4770      	bx	lr

000d78ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d78ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78f0:	4606      	mov	r6, r0
   d78f2:	4615      	mov	r5, r2
   d78f4:	460c      	mov	r4, r1
   d78f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d78f8:	42bc      	cmp	r4, r7
   d78fa:	d006      	beq.n	d790a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d78fc:	6833      	ldr	r3, [r6, #0]
   d78fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7902:	689b      	ldr	r3, [r3, #8]
   d7904:	4630      	mov	r0, r6
   d7906:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7908:	e7f6      	b.n	d78f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d790a:	4628      	mov	r0, r5
   d790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d790e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d790e:	7c00      	ldrb	r0, [r0, #16]
   d7910:	2200      	movs	r2, #0
   d7912:	f7ff b945 	b.w	d6ba0 <hal_i2c_write>

000d7916 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7916:	7c00      	ldrb	r0, [r0, #16]
   d7918:	2100      	movs	r1, #0
   d791a:	f7ff b949 	b.w	d6bb0 <hal_i2c_available>

000d791e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d791e:	7c00      	ldrb	r0, [r0, #16]
   d7920:	2100      	movs	r1, #0
   d7922:	f7ff b94d 	b.w	d6bc0 <hal_i2c_read>

000d7926 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7926:	7c00      	ldrb	r0, [r0, #16]
   d7928:	2100      	movs	r1, #0
   d792a:	f7ff b951 	b.w	d6bd0 <hal_i2c_peek>

000d792e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d792e:	7c00      	ldrb	r0, [r0, #16]
   d7930:	2100      	movs	r1, #0
   d7932:	f7ff b955 	b.w	d6be0 <hal_i2c_flush>

000d7936 <_ZN7TwoWireD0Ev>:
   d7936:	b510      	push	{r4, lr}
   d7938:	2114      	movs	r1, #20
   d793a:	4604      	mov	r4, r0
   d793c:	f000 fcf7 	bl	d832e <_ZdlPvj>
   d7940:	4620      	mov	r0, r4
   d7942:	bd10      	pop	{r4, pc}

000d7944 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7944:	b510      	push	{r4, lr}
   d7946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d794a:	4604      	mov	r4, r0
   d794c:	4608      	mov	r0, r1
   d794e:	2100      	movs	r1, #0
   d7950:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7954:	4b03      	ldr	r3, [pc, #12]	; (d7964 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7956:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7958:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d795a:	4611      	mov	r1, r2
   d795c:	f7ff f950 	bl	d6c00 <hal_i2c_init>
}
   d7960:	4620      	mov	r0, r4
   d7962:	bd10      	pop	{r4, pc}
   d7964:	000d9850 	.word	0x000d9850

000d7968 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d7968:	7c00      	ldrb	r0, [r0, #16]
   d796a:	2200      	movs	r2, #0
   d796c:	f7ff b8f8 	b.w	d6b60 <hal_i2c_set_speed>

000d7970 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7970:	2300      	movs	r3, #0
   d7972:	7c00      	ldrb	r0, [r0, #16]
   d7974:	461a      	mov	r2, r3
   d7976:	4619      	mov	r1, r3
   d7978:	f7ff b8fa 	b.w	d6b70 <hal_i2c_begin>

000d797c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d797c:	7c00      	ldrb	r0, [r0, #16]
   d797e:	2200      	movs	r2, #0
   d7980:	f7ff b8fe 	b.w	d6b80 <hal_i2c_begin_transmission>

000d7984 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7984:	b2c9      	uxtb	r1, r1
   d7986:	f7ff bff9 	b.w	d797c <_ZN7TwoWire17beginTransmissionEh>

000d798a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d798a:	7c00      	ldrb	r0, [r0, #16]
   d798c:	2200      	movs	r2, #0
   d798e:	f7ff b8ff 	b.w	d6b90 <hal_i2c_end_transmission>

000d7992 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7992:	2101      	movs	r1, #1
   d7994:	f7ff bff9 	b.w	d798a <_ZN7TwoWire15endTransmissionEh>

000d7998 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7998:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d799a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d799c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d79a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d79a2:	2201      	movs	r2, #1
   d79a4:	f04f 33ff 	mov.w	r3, #4294967295
   d79a8:	f10d 0107 	add.w	r1, sp, #7
   d79ac:	47a0      	blx	r4
}
   d79ae:	b002      	add	sp, #8
   d79b0:	bd10      	pop	{r4, pc}

000d79b2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d79b2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d79b4:	6803      	ldr	r3, [r0, #0]
   d79b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d79b8:	f04f 33ff 	mov.w	r3, #4294967295
   d79bc:	46a4      	mov	ip, r4
}
   d79be:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d79c2:	4760      	bx	ip

000d79c4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d79c4:	b513      	push	{r0, r1, r4, lr}
   d79c6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d79c8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d79ca:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d79ce:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d79d0:	f10d 0107 	add.w	r1, sp, #7
   d79d4:	2201      	movs	r2, #1
   d79d6:	47a0      	blx	r4
}
   d79d8:	b002      	add	sp, #8
   d79da:	bd10      	pop	{r4, pc}

000d79dc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d79dc:	4770      	bx	lr

000d79de <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d79de:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d79e0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d79e6:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d79e8:	da10      	bge.n	d7a0c <_ZN9TCPClient9connectedEv+0x2e>
   d79ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d79ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d79f2:	429a      	cmp	r2, r3
   d79f4:	d10a      	bne.n	d7a0c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d79f6:	6803      	ldr	r3, [r0, #0]
   d79f8:	691b      	ldr	r3, [r3, #16]
   d79fa:	4798      	blx	r3
        if (!rv) {
   d79fc:	4604      	mov	r4, r0
   d79fe:	b928      	cbnz	r0, d7a0c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7a00:	682b      	ldr	r3, [r5, #0]
   d7a02:	4628      	mov	r0, r5
   d7a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7a06:	4798      	blx	r3
        rv = available();
   d7a08:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7a0a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7a0c:	2001      	movs	r0, #1
   d7a0e:	e7fc      	b.n	d7a0a <_ZN9TCPClient9connectedEv+0x2c>

000d7a10 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7a10:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7a12:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7a14:	43c0      	mvns	r0, r0
   d7a16:	0fc0      	lsrs	r0, r0, #31
   d7a18:	4770      	bx	lr

000d7a1a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7a1a:	4770      	bx	lr

000d7a1c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7a1c:	4b06      	ldr	r3, [pc, #24]	; (d7a38 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7a1e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7a20:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d7a22:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7a26:	d005      	beq.n	d7a34 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7a28:	4608      	mov	r0, r1
   d7a2a:	f000 fc85 	bl	d8338 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7a2e:	2800      	cmp	r0, #0
	return nullptr;
   d7a30:	bf08      	it	eq
   d7a32:	2400      	moveq	r4, #0
      }
   d7a34:	4620      	mov	r0, r4
   d7a36:	bd10      	pop	{r4, pc}
   d7a38:	000d97ac 	.word	0x000d97ac

000d7a3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7a3c:	b510      	push	{r4, lr}
   d7a3e:	21ac      	movs	r1, #172	; 0xac
   d7a40:	4604      	mov	r4, r0
   d7a42:	f000 fc74 	bl	d832e <_ZdlPvj>
   d7a46:	4620      	mov	r0, r4
   d7a48:	bd10      	pop	{r4, pc}

000d7a4a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7a4a:	f7fc bb26 	b.w	d409a <_ZdlPv>

000d7a4e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7a52:	f04f 0800 	mov.w	r8, #0
   d7a56:	b086      	sub	sp, #24
   d7a58:	461d      	mov	r5, r3
   d7a5a:	f8c0 8004 	str.w	r8, [r0, #4]
   d7a5e:	4604      	mov	r4, r0
   d7a60:	460e      	mov	r6, r1
   d7a62:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7a64:	4641      	mov	r1, r8
   d7a66:	2210      	movs	r2, #16
   d7a68:	a802      	add	r0, sp, #8
   d7a6a:	f000 fd9b 	bl	d85a4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7a6e:	1c6b      	adds	r3, r5, #1
   d7a70:	d009      	beq.n	d7a86 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7a76:	fbb5 f3f0 	udiv	r3, r5, r0
   d7a7a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7a7e:	fb00 5313 	mls	r3, r0, r3, r5
   d7a82:	4358      	muls	r0, r3
   d7a84:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7a86:	6960      	ldr	r0, [r4, #20]
   d7a88:	2310      	movs	r3, #16
   d7a8a:	9300      	str	r3, [sp, #0]
   d7a8c:	6800      	ldr	r0, [r0, #0]
   d7a8e:	ab02      	add	r3, sp, #8
   d7a90:	f241 0205 	movw	r2, #4101	; 0x1005
   d7a94:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7a98:	f7ff f8ba 	bl	d6c10 <sock_setsockopt>
    if (ret < 0) {
   d7a9c:	2800      	cmp	r0, #0
   d7a9e:	da07      	bge.n	d7ab0 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7aa0:	f7ff fa3a 	bl	d6f18 <__errno>
   d7aa4:	6803      	ldr	r3, [r0, #0]
   d7aa6:	6063      	str	r3, [r4, #4]
        return 0;
   d7aa8:	2000      	movs	r0, #0
}
   d7aaa:	b006      	add	sp, #24
   d7aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7ab0:	6960      	ldr	r0, [r4, #20]
   d7ab2:	2300      	movs	r3, #0
   d7ab4:	6800      	ldr	r0, [r0, #0]
   d7ab6:	463a      	mov	r2, r7
   d7ab8:	4631      	mov	r1, r6
   d7aba:	f7ff f8c9 	bl	d6c50 <sock_send>
    if (ret < 0) {
   d7abe:	1e03      	subs	r3, r0, #0
   d7ac0:	dbee      	blt.n	d7aa0 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7ac2:	4618      	mov	r0, r3
   d7ac4:	e7f1      	b.n	d7aaa <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7ac8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7ac8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d7aca:	6984      	ldr	r4, [r0, #24]
   d7acc:	4b0a      	ldr	r3, [pc, #40]	; (d7af8 <_ZN9TCPClientD1Ev+0x30>)
   d7ace:	6003      	str	r3, [r0, #0]
   d7ad0:	4605      	mov	r5, r0
   d7ad2:	b17c      	cbz	r4, d7af4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7ad4:	6863      	ldr	r3, [r4, #4]
   d7ad6:	3b01      	subs	r3, #1
   d7ad8:	6063      	str	r3, [r4, #4]
   d7ada:	b95b      	cbnz	r3, d7af4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7adc:	6823      	ldr	r3, [r4, #0]
   d7ade:	4620      	mov	r0, r4
   d7ae0:	689b      	ldr	r3, [r3, #8]
   d7ae2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7ae4:	68a3      	ldr	r3, [r4, #8]
   d7ae6:	3b01      	subs	r3, #1
   d7ae8:	60a3      	str	r3, [r4, #8]
   d7aea:	b91b      	cbnz	r3, d7af4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7aec:	6823      	ldr	r3, [r4, #0]
   d7aee:	4620      	mov	r0, r4
   d7af0:	68db      	ldr	r3, [r3, #12]
   d7af2:	4798      	blx	r3
   d7af4:	4628      	mov	r0, r5
   d7af6:	bd38      	pop	{r3, r4, r5, pc}
   d7af8:	000d98ac 	.word	0x000d98ac

000d7afc <_ZN9TCPClientD0Ev>:
   d7afc:	b510      	push	{r4, lr}
   d7afe:	4604      	mov	r4, r0
   d7b00:	f7ff ffe2 	bl	d7ac8 <_ZN9TCPClientD1Ev>
   d7b04:	4620      	mov	r0, r4
   d7b06:	211c      	movs	r1, #28
   d7b08:	f000 fc11 	bl	d832e <_ZdlPvj>
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	bd10      	pop	{r4, pc}

000d7b10 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7b10:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7b12:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7b14:	4b05      	ldr	r3, [pc, #20]	; (d7b2c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7b16:	4604      	mov	r4, r0
   d7b18:	358c      	adds	r5, #140	; 0x8c
   d7b1a:	f844 3b04 	str.w	r3, [r4], #4
   d7b1e:	4606      	mov	r6, r0
   d7b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b24:	682b      	ldr	r3, [r5, #0]
   d7b26:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7b28:	4630      	mov	r0, r6
   d7b2a:	bd70      	pop	{r4, r5, r6, pc}
   d7b2c:	000d97dc 	.word	0x000d97dc

000d7b30 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7b30:	b510      	push	{r4, lr}
   d7b32:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7b34:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b38:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7b3c:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7b3e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7b40:	d005      	beq.n	d7b4e <_ZN9TCPClient4peekEv+0x1e>
   d7b42:	6963      	ldr	r3, [r4, #20]
   d7b44:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7b48:	4413      	add	r3, r2
   d7b4a:	7918      	ldrb	r0, [r3, #4]
}
   d7b4c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7b4e:	6803      	ldr	r3, [r0, #0]
   d7b50:	691b      	ldr	r3, [r3, #16]
   d7b52:	4798      	blx	r3
   d7b54:	2800      	cmp	r0, #0
   d7b56:	d1f4      	bne.n	d7b42 <_ZN9TCPClient4peekEv+0x12>
   d7b58:	f04f 30ff 	mov.w	r0, #4294967295
   d7b5c:	e7f6      	b.n	d7b4c <_ZN9TCPClient4peekEv+0x1c>

000d7b5e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7b5e:	b510      	push	{r4, lr}
   d7b60:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7b62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7b6a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7b6c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7b6e:	d008      	beq.n	d7b82 <_ZN9TCPClient4readEv+0x24>
   d7b70:	6963      	ldr	r3, [r4, #20]
   d7b72:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7b76:	1c51      	adds	r1, r2, #1
   d7b78:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7b7c:	4413      	add	r3, r2
   d7b7e:	7918      	ldrb	r0, [r3, #4]
}
   d7b80:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7b82:	6803      	ldr	r3, [r0, #0]
   d7b84:	691b      	ldr	r3, [r3, #16]
   d7b86:	4798      	blx	r3
   d7b88:	2800      	cmp	r0, #0
   d7b8a:	d1f1      	bne.n	d7b70 <_ZN9TCPClient4readEv+0x12>
   d7b8c:	f04f 30ff 	mov.w	r0, #4294967295
   d7b90:	e7f6      	b.n	d7b80 <_ZN9TCPClient4readEv+0x22>

000d7b92 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b94:	6943      	ldr	r3, [r0, #20]
   d7b96:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7b98:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7b9c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7ba0:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7ba2:	4605      	mov	r5, r0
   d7ba4:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7ba6:	d016      	beq.n	d7bd6 <_ZN9TCPClient4readEPhj+0x44>
   d7ba8:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7baa:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7bae:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7bb2:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7bb4:	42bc      	cmp	r4, r7
   d7bb6:	bf28      	it	cs
   d7bb8:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7bba:	3304      	adds	r3, #4
   d7bbc:	4622      	mov	r2, r4
   d7bbe:	4419      	add	r1, r3
   d7bc0:	4630      	mov	r0, r6
   d7bc2:	f000 fce1 	bl	d8588 <memcpy>
   d7bc6:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7bc8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7bcc:	4423      	add	r3, r4
   d7bce:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7bd2:	4620      	mov	r0, r4
   d7bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7bd6:	6803      	ldr	r3, [r0, #0]
   d7bd8:	691b      	ldr	r3, [r3, #16]
   d7bda:	4798      	blx	r3
   d7bdc:	2800      	cmp	r0, #0
   d7bde:	d1e3      	bne.n	d7ba8 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7be0:	f04f 34ff 	mov.w	r4, #4294967295
   d7be4:	e7f5      	b.n	d7bd2 <_ZN9TCPClient4readEPhj+0x40>

000d7be6 <_ZN9TCPClient12flush_bufferEv>:
   d7be6:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7be8:	2300      	movs	r3, #0
   d7bea:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7bee:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7bf0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7bf4:	4770      	bx	lr

000d7bf6 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7bfa:	461f      	mov	r7, r3
    stop();
   d7bfc:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7bfe:	460c      	mov	r4, r1
    stop();
   d7c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7c02:	b08a      	sub	sp, #40	; 0x28
   d7c04:	4605      	mov	r5, r0
   d7c06:	4616      	mov	r6, r2
    stop();
   d7c08:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7c0a:	7d23      	ldrb	r3, [r4, #20]
   d7c0c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7c10:	2b04      	cmp	r3, #4
   d7c12:	bf0c      	ite	eq
   d7c14:	2002      	moveq	r0, #2
   d7c16:	200a      	movne	r0, #10
   d7c18:	2206      	movs	r2, #6
   d7c1a:	2101      	movs	r1, #1
   d7c1c:	f7ff f820 	bl	d6c60 <sock_socket>
   d7c20:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7c24:	696b      	ldr	r3, [r5, #20]
   d7c26:	681b      	ldr	r3, [r3, #0]
   d7c28:	2b00      	cmp	r3, #0
   d7c2a:	da08      	bge.n	d7c3e <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7c2c:	682b      	ldr	r3, [r5, #0]
   d7c2e:	4628      	mov	r0, r5
   d7c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c32:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7c34:	4798      	blx	r3
}
   d7c36:	4620      	mov	r0, r4
   d7c38:	b00a      	add	sp, #40	; 0x28
   d7c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7c3e:	4628      	mov	r0, r5
   d7c40:	f7ff ffd1 	bl	d7be6 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7c44:	b1b7      	cbz	r7, d7c74 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7c46:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c48:	a903      	add	r1, sp, #12
   d7c4a:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7c4c:	9303      	str	r3, [sp, #12]
   d7c4e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c52:	f7fe fedd 	bl	d6a10 <if_index_to_name>
   d7c56:	2800      	cmp	r0, #0
   d7c58:	d1e8      	bne.n	d7c2c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7c5a:	6968      	ldr	r0, [r5, #20]
   d7c5c:	2306      	movs	r3, #6
   d7c5e:	9300      	str	r3, [sp, #0]
   d7c60:	6800      	ldr	r0, [r0, #0]
   d7c62:	ab03      	add	r3, sp, #12
   d7c64:	f241 020b 	movw	r2, #4107	; 0x100b
   d7c68:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c6c:	f7fe ffd0 	bl	d6c10 <sock_setsockopt>
   d7c70:	2800      	cmp	r0, #0
   d7c72:	d1db      	bne.n	d7c2c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7c74:	221c      	movs	r2, #28
   d7c76:	2100      	movs	r1, #0
   d7c78:	a803      	add	r0, sp, #12
   d7c7a:	f000 fc93 	bl	d85a4 <memset>
    if (ip.version() == 4) {
   d7c7e:	7d23      	ldrb	r3, [r4, #20]
   d7c80:	2b04      	cmp	r3, #4
   d7c82:	d11d      	bne.n	d7cc0 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7c84:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7c88:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7c8a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7c8e:	f7fe ff1f 	bl	d6ad0 <inet_htons>
   d7c92:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7c96:	6860      	ldr	r0, [r4, #4]
   d7c98:	f7fe ff12 	bl	d6ac0 <inet_htonl>
   d7c9c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7c9e:	696b      	ldr	r3, [r5, #20]
   d7ca0:	221c      	movs	r2, #28
   d7ca2:	6818      	ldr	r0, [r3, #0]
   d7ca4:	a903      	add	r1, sp, #12
   d7ca6:	f7fe ffc3 	bl	d6c30 <sock_connect>
   d7caa:	2800      	cmp	r0, #0
   d7cac:	d1be      	bne.n	d7c2c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7cae:	3404      	adds	r4, #4
   d7cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7cb2:	696d      	ldr	r5, [r5, #20]
   d7cb4:	358c      	adds	r5, #140	; 0x8c
   d7cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7cb8:	6823      	ldr	r3, [r4, #0]
   d7cba:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7cbc:	2401      	movs	r4, #1
   d7cbe:	e7ba      	b.n	d7c36 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7cc0:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7cc4:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7cc6:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7cca:	f7fe ff01 	bl	d6ad0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7cce:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7cd0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7cd4:	1d23      	adds	r3, r4, #4
   d7cd6:	f104 0714 	add.w	r7, r4, #20
   d7cda:	6818      	ldr	r0, [r3, #0]
   d7cdc:	6859      	ldr	r1, [r3, #4]
   d7cde:	4632      	mov	r2, r6
   d7ce0:	c203      	stmia	r2!, {r0, r1}
   d7ce2:	3308      	adds	r3, #8
   d7ce4:	42bb      	cmp	r3, r7
   d7ce6:	4616      	mov	r6, r2
   d7ce8:	d1f7      	bne.n	d7cda <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7cea:	e7d8      	b.n	d7c9e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d7cec <_ZN9TCPClient9availableEv>:
{
   d7cec:	b530      	push	{r4, r5, lr}
   d7cee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7cf0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7cf4:	b08b      	sub	sp, #44	; 0x2c
   d7cf6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7cf8:	b12b      	cbz	r3, d7d06 <_ZN9TCPClient9availableEv+0x1a>
   d7cfa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7cfe:	429a      	cmp	r2, r3
   d7d00:	d101      	bne.n	d7d06 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7d02:	f7ff ff70 	bl	d7be6 <_ZN9TCPClient12flush_bufferEv>
   d7d06:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7d08:	6808      	ldr	r0, [r1, #0]
   d7d0a:	2800      	cmp	r0, #0
   d7d0c:	db18      	blt.n	d7d40 <_ZN9TCPClient9availableEv+0x54>
   d7d0e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7d12:	2d7f      	cmp	r5, #127	; 0x7f
   d7d14:	d814      	bhi.n	d7d40 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7d16:	3104      	adds	r1, #4
   d7d18:	2308      	movs	r3, #8
   d7d1a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7d1e:	4429      	add	r1, r5
   d7d20:	f7fe ff8e 	bl	d6c40 <sock_recv>
            if (ret > 0) {
   d7d24:	2800      	cmp	r0, #0
   d7d26:	dd13      	ble.n	d7d50 <_ZN9TCPClient9availableEv+0x64>
   d7d28:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7d2a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d2e:	b90a      	cbnz	r2, d7d34 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7d30:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7d34:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7d36:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d3a:	4410      	add	r0, r2
   d7d3c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7d40:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7d42:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7d46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d7d4a:	1ac0      	subs	r0, r0, r3
   d7d4c:	b00b      	add	sp, #44	; 0x2c
   d7d4e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7d50:	f7ff f8e2 	bl	d6f18 <__errno>
   d7d54:	6803      	ldr	r3, [r0, #0]
   d7d56:	2b0b      	cmp	r3, #11
   d7d58:	d0f2      	beq.n	d7d40 <_ZN9TCPClient9availableEv+0x54>
   d7d5a:	f7ff f8dd 	bl	d6f18 <__errno>
   d7d5e:	6803      	ldr	r3, [r0, #0]
   d7d60:	2b0b      	cmp	r3, #11
   d7d62:	d0ed      	beq.n	d7d40 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7d64:	2320      	movs	r3, #32
   d7d66:	2500      	movs	r5, #0
   d7d68:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7d6c:	f7ff f8d4 	bl	d6f18 <__errno>
   d7d70:	6803      	ldr	r3, [r0, #0]
   d7d72:	9301      	str	r3, [sp, #4]
   d7d74:	4b08      	ldr	r3, [pc, #32]	; (d7d98 <_ZN9TCPClient9availableEv+0xac>)
   d7d76:	4909      	ldr	r1, [pc, #36]	; (d7d9c <_ZN9TCPClient9availableEv+0xb0>)
   d7d78:	9300      	str	r3, [sp, #0]
   d7d7a:	aa02      	add	r2, sp, #8
   d7d7c:	462b      	mov	r3, r5
   d7d7e:	2032      	movs	r0, #50	; 0x32
   d7d80:	f7fe fff6 	bl	d6d70 <log_message>
                    sock_close(d_->sock);
   d7d84:	6963      	ldr	r3, [r4, #20]
   d7d86:	6818      	ldr	r0, [r3, #0]
   d7d88:	f7fe ff4a 	bl	d6c20 <sock_close>
   d7d8c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7d8e:	f04f 32ff 	mov.w	r2, #4294967295
   d7d92:	601a      	str	r2, [r3, #0]
   d7d94:	e7d4      	b.n	d7d40 <_ZN9TCPClient9availableEv+0x54>
   d7d96:	bf00      	nop
   d7d98:	000d9877 	.word	0x000d9877
   d7d9c:	000d9870 	.word	0x000d9870

000d7da0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7da0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7da2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7da4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7da6:	6818      	ldr	r0, [r3, #0]
   d7da8:	2800      	cmp	r0, #0
   d7daa:	db01      	blt.n	d7db0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7dac:	f7fe ff38 	bl	d6c20 <sock_close>
   d7db0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7db2:	f04f 32ff 	mov.w	r2, #4294967295
   d7db6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7db8:	6960      	ldr	r0, [r4, #20]
   d7dba:	2211      	movs	r2, #17
   d7dbc:	2100      	movs	r1, #0
   d7dbe:	308c      	adds	r0, #140	; 0x8c
   d7dc0:	f000 fbf0 	bl	d85a4 <memset>
    flush_buffer();
   d7dc4:	4620      	mov	r0, r4
}
   d7dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7dca:	f7ff bf0c 	b.w	d7be6 <_ZN9TCPClient12flush_bufferEv>

000d7dce <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7dce:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7dd0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7dd2:	4604      	mov	r4, r0
          total(0) {
   d7dd4:	6001      	str	r1, [r0, #0]
   d7dd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7dda:	3088      	adds	r0, #136	; 0x88
   d7ddc:	f7ff fc22 	bl	d7624 <_ZN9IPAddressC1Ev>
}
   d7de0:	4620      	mov	r0, r4
   d7de2:	bd10      	pop	{r4, pc}

000d7de4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7de6:	2300      	movs	r3, #0
   d7de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7dec:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7df0:	4a0e      	ldr	r2, [pc, #56]	; (d7e2c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7df2:	6103      	str	r3, [r0, #16]
   d7df4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7df6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7df8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7dfa:	20ac      	movs	r0, #172	; 0xac
   d7dfc:	9101      	str	r1, [sp, #4]
   d7dfe:	f7fc f948 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7e02:	1e05      	subs	r5, r0, #0
   d7e04:	f105 060c 	add.w	r6, r5, #12
   d7e08:	d008      	beq.n	d7e1c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d7e0a:	2301      	movs	r3, #1
   d7e0c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7e10:	4b07      	ldr	r3, [pc, #28]	; (d7e30 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7e12:	9901      	ldr	r1, [sp, #4]
   d7e14:	602b      	str	r3, [r5, #0]
   d7e16:	4630      	mov	r0, r6
   d7e18:	f7ff ffd9 	bl	d7dce <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7e1c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7e1e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7e22:	f7ff fee0 	bl	d7be6 <_ZN9TCPClient12flush_bufferEv>
}
   d7e26:	b002      	add	sp, #8
   d7e28:	bd70      	pop	{r4, r5, r6, pc}
   d7e2a:	bf00      	nop
   d7e2c:	000d98ac 	.word	0x000d98ac
   d7e30:	000d9890 	.word	0x000d9890

000d7e34 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7e34:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7e36:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d7e3a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7e3c:	f7ff ffd2 	bl	d7de4 <_ZN9TCPClientC1Ei>
}
   d7e40:	4620      	mov	r0, r4
   d7e42:	bd10      	pop	{r4, pc}

000d7e44 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7e44:	b510      	push	{r4, lr}
   d7e46:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7e48:	6800      	ldr	r0, [r0, #0]
   d7e4a:	2800      	cmp	r0, #0
   d7e4c:	db01      	blt.n	d7e52 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7e4e:	f7fe fee7 	bl	d6c20 <sock_close>
    }
}
   d7e52:	4620      	mov	r0, r4
   d7e54:	bd10      	pop	{r4, pc}

000d7e56 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d7e56:	300c      	adds	r0, #12
   d7e58:	f7ff bff4 	b.w	d7e44 <_ZN9TCPClient4DataD1Ev>

000d7e5c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7e60:	4698      	mov	r8, r3
    stop();
   d7e62:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7e64:	b093      	sub	sp, #76	; 0x4c
   d7e66:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7e68:	2400      	movs	r4, #0
    stop();
   d7e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7e6c:	4606      	mov	r6, r0
   d7e6e:	4617      	mov	r7, r2
    stop();
   d7e70:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7e72:	4628      	mov	r0, r5
   d7e74:	466b      	mov	r3, sp
   d7e76:	4622      	mov	r2, r4
   d7e78:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7e7a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7e7c:	f7fe fd80 	bl	d6980 <netdb_getaddrinfo>
   d7e80:	4605      	mov	r5, r0
   d7e82:	2800      	cmp	r0, #0
   d7e84:	d163      	bne.n	d7f4e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7e86:	9b00      	ldr	r3, [sp, #0]
   d7e88:	2b00      	cmp	r3, #0
   d7e8a:	d04b      	beq.n	d7f24 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7e8c:	695b      	ldr	r3, [r3, #20]
   d7e8e:	2b00      	cmp	r3, #0
   d7e90:	d048      	beq.n	d7f24 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7e92:	a806      	add	r0, sp, #24
   d7e94:	f7ff fbc6 	bl	d7624 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7e98:	9b00      	ldr	r3, [sp, #0]
   d7e9a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7e9c:	7863      	ldrb	r3, [r4, #1]
   d7e9e:	2b02      	cmp	r3, #2
   d7ea0:	d104      	bne.n	d7eac <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7ea2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7ea4:	a806      	add	r0, sp, #24
   d7ea6:	f7ff f961 	bl	d716c <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d7eaa:	e026      	b.n	d7efa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7eac:	2b0a      	cmp	r3, #10
   d7eae:	d124      	bne.n	d7efa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7eb0:	2211      	movs	r2, #17
   d7eb2:	4629      	mov	r1, r5
   d7eb4:	a801      	add	r0, sp, #4
   d7eb6:	f000 fb75 	bl	d85a4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7eba:	68a3      	ldr	r3, [r4, #8]
   d7ebc:	2b00      	cmp	r3, #0
   d7ebe:	d038      	beq.n	d7f32 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7ec0:	f104 0308 	add.w	r3, r4, #8
   d7ec4:	f10d 0c04 	add.w	ip, sp, #4
   d7ec8:	3418      	adds	r4, #24
   d7eca:	6818      	ldr	r0, [r3, #0]
   d7ecc:	6859      	ldr	r1, [r3, #4]
   d7ece:	4662      	mov	r2, ip
   d7ed0:	c203      	stmia	r2!, {r0, r1}
   d7ed2:	3308      	adds	r3, #8
   d7ed4:	42a3      	cmp	r3, r4
   d7ed6:	4694      	mov	ip, r2
   d7ed8:	d1f7      	bne.n	d7eca <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7eda:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7edc:	a901      	add	r1, sp, #4
   d7ede:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7ee0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7ee4:	f7ff fbac 	bl	d7640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d7ee8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7eec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7ef0:	ac07      	add	r4, sp, #28
   d7ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ef4:	f8dc 3000 	ldr.w	r3, [ip]
   d7ef8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7efa:	a806      	add	r0, sp, #24
   d7efc:	f7ff fbb2 	bl	d7664 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7f00:	b180      	cbz	r0, d7f24 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7f02:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7f04:	ad07      	add	r5, sp, #28
   d7f06:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7f0a:	4b12      	ldr	r3, [pc, #72]	; (d7f54 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7f0c:	930c      	str	r3, [sp, #48]	; 0x30
   d7f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f10:	ac0d      	add	r4, sp, #52	; 0x34
   d7f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f14:	682b      	ldr	r3, [r5, #0]
   d7f16:	7023      	strb	r3, [r4, #0]
   d7f18:	463a      	mov	r2, r7
   d7f1a:	4643      	mov	r3, r8
   d7f1c:	a90c      	add	r1, sp, #48	; 0x30
   d7f1e:	4630      	mov	r0, r6
   d7f20:	47c8      	blx	r9
   d7f22:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7f24:	9800      	ldr	r0, [sp, #0]
   d7f26:	f7fe fd23 	bl	d6970 <netdb_freeaddrinfo>
}
   d7f2a:	4628      	mov	r0, r5
   d7f2c:	b013      	add	sp, #76	; 0x4c
   d7f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7f32:	68e3      	ldr	r3, [r4, #12]
   d7f34:	2b00      	cmp	r3, #0
   d7f36:	d1c3      	bne.n	d7ec0 <_ZN9TCPClient7connectEPKctm+0x64>
   d7f38:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7f3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7f40:	f7fe fdbe 	bl	d6ac0 <inet_htonl>
   d7f44:	4581      	cmp	r9, r0
   d7f46:	d1bb      	bne.n	d7ec0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7f48:	f104 0114 	add.w	r1, r4, #20
   d7f4c:	e7aa      	b.n	d7ea4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7f4e:	4625      	mov	r5, r4
   d7f50:	e7e8      	b.n	d7f24 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7f52:	bf00      	nop
   d7f54:	000d97dc 	.word	0x000d97dc

000d7f58 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7f58:	2200      	movs	r2, #0
   d7f5a:	6840      	ldr	r0, [r0, #4]
   d7f5c:	4611      	mov	r1, r2
   d7f5e:	f7fe bf53 	b.w	d6e08 <network_ready>

000d7f62 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7f62:	2200      	movs	r2, #0
   d7f64:	6840      	ldr	r0, [r0, #4]
   d7f66:	4611      	mov	r1, r2
   d7f68:	f7fe bf6e 	b.w	d6e48 <network_listening>

000d7f6c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7f6c:	2200      	movs	r2, #0
   d7f6e:	6840      	ldr	r0, [r0, #4]
   d7f70:	4611      	mov	r1, r2
   d7f72:	f7fe bf79 	b.w	d6e68 <network_get_listen_timeout>

000d7f76 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7f76:	6840      	ldr	r0, [r0, #4]
   d7f78:	2200      	movs	r2, #0
   d7f7a:	f7fe bf6d 	b.w	d6e58 <network_set_listen_timeout>

000d7f7e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7f7e:	6840      	ldr	r0, [r0, #4]
   d7f80:	2200      	movs	r2, #0
   d7f82:	f081 0101 	eor.w	r1, r1, #1
   d7f86:	f7fe bf57 	b.w	d6e38 <network_listen>

000d7f8a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7f8a:	2300      	movs	r3, #0
   d7f8c:	6840      	ldr	r0, [r0, #4]
   d7f8e:	461a      	mov	r2, r3
   d7f90:	4619      	mov	r1, r3
   d7f92:	f7fe bf49 	b.w	d6e28 <network_off>

000d7f96 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7f96:	2200      	movs	r2, #0
   d7f98:	6840      	ldr	r0, [r0, #4]
   d7f9a:	4611      	mov	r1, r2
   d7f9c:	f7fe bf24 	b.w	d6de8 <network_connecting>

000d7fa0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7fa0:	6840      	ldr	r0, [r0, #4]
   d7fa2:	2200      	movs	r2, #0
   d7fa4:	2102      	movs	r1, #2
   d7fa6:	f7fe bf27 	b.w	d6df8 <network_disconnect>

000d7faa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7faa:	2300      	movs	r3, #0
   d7fac:	6840      	ldr	r0, [r0, #4]
   d7fae:	461a      	mov	r2, r3
   d7fb0:	f7fe bf12 	b.w	d6dd8 <network_connect>

000d7fb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7fb4:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7fb6:	2204      	movs	r2, #4
   d7fb8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7fba:	4a02      	ldr	r2, [pc, #8]	; (d7fc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7fbc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7fbe:	4770      	bx	lr
   d7fc0:	2003e7c4 	.word	0x2003e7c4
   d7fc4:	000d98f8 	.word	0x000d98f8

000d7fc8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7fc8:	2300      	movs	r3, #0
   d7fca:	6840      	ldr	r0, [r0, #4]
   d7fcc:	461a      	mov	r2, r3
   d7fce:	f7fe bf03 	b.w	d6dd8 <network_connect>

000d7fd2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7fd2:	6840      	ldr	r0, [r0, #4]
   d7fd4:	2200      	movs	r2, #0
   d7fd6:	2102      	movs	r1, #2
   d7fd8:	f7fe bf0e 	b.w	d6df8 <network_disconnect>

000d7fdc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7fdc:	2200      	movs	r2, #0
   d7fde:	6840      	ldr	r0, [r0, #4]
   d7fe0:	4611      	mov	r1, r2
   d7fe2:	f7fe bf01 	b.w	d6de8 <network_connecting>

000d7fe6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7fe6:	2200      	movs	r2, #0
   d7fe8:	6840      	ldr	r0, [r0, #4]
   d7fea:	4611      	mov	r1, r2
   d7fec:	f7fe bf0c 	b.w	d6e08 <network_ready>

000d7ff0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7ff0:	2300      	movs	r3, #0
   d7ff2:	6840      	ldr	r0, [r0, #4]
   d7ff4:	461a      	mov	r2, r3
   d7ff6:	4619      	mov	r1, r3
   d7ff8:	f7fe bf0e 	b.w	d6e18 <network_on>

000d7ffc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7ffc:	2300      	movs	r3, #0
   d7ffe:	6840      	ldr	r0, [r0, #4]
   d8000:	461a      	mov	r2, r3
   d8002:	4619      	mov	r1, r3
   d8004:	f7fe bf10 	b.w	d6e28 <network_off>

000d8008 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8008:	6840      	ldr	r0, [r0, #4]
   d800a:	2100      	movs	r1, #0
   d800c:	f7fe bf34 	b.w	d6e78 <network_is_on>

000d8010 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8010:	6840      	ldr	r0, [r0, #4]
   d8012:	2100      	movs	r1, #0
   d8014:	f7fe bf38 	b.w	d6e88 <network_is_off>

000d8018 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8018:	6840      	ldr	r0, [r0, #4]
   d801a:	2200      	movs	r2, #0
   d801c:	f081 0101 	eor.w	r1, r1, #1
   d8020:	f7fe bf0a 	b.w	d6e38 <network_listen>

000d8024 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8024:	6840      	ldr	r0, [r0, #4]
   d8026:	2200      	movs	r2, #0
   d8028:	f7fe bf16 	b.w	d6e58 <network_set_listen_timeout>

000d802c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d802c:	2200      	movs	r2, #0
   d802e:	6840      	ldr	r0, [r0, #4]
   d8030:	4611      	mov	r1, r2
   d8032:	f7fe bf19 	b.w	d6e68 <network_get_listen_timeout>

000d8036 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8036:	2200      	movs	r2, #0
   d8038:	6840      	ldr	r0, [r0, #4]
   d803a:	4611      	mov	r1, r2
   d803c:	f7fe bf04 	b.w	d6e48 <network_listening>

000d8040 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8044:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8046:	b095      	sub	sp, #84	; 0x54
   d8048:	4616      	mov	r6, r2
   d804a:	460d      	mov	r5, r1
   d804c:	4607      	mov	r7, r0
    IPAddress addr;
   d804e:	f7ff fae9 	bl	d7624 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8052:	4621      	mov	r1, r4
   d8054:	2218      	movs	r2, #24
   d8056:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8058:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d805a:	f000 faa3 	bl	d85a4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d805e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8060:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8064:	4621      	mov	r1, r4
   d8066:	466b      	mov	r3, sp
   d8068:	aa0c      	add	r2, sp, #48	; 0x30
   d806a:	4630      	mov	r0, r6
   d806c:	f7fe fc88 	bl	d6980 <netdb_getaddrinfo>
    if (!r) {
   d8070:	4604      	mov	r4, r0
   d8072:	2800      	cmp	r0, #0
   d8074:	d14c      	bne.n	d8110 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8076:	4602      	mov	r2, r0
   d8078:	2101      	movs	r1, #1
   d807a:	6868      	ldr	r0, [r5, #4]
   d807c:	f7fe fec4 	bl	d6e08 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8080:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8082:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8084:	4622      	mov	r2, r4
   d8086:	6868      	ldr	r0, [r5, #4]
   d8088:	f7fe febe 	bl	d6e08 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d808c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d808e:	4681      	mov	r9, r0
        bool ok = false;
   d8090:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8092:	2e00      	cmp	r6, #0
   d8094:	d03c      	beq.n	d8110 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8096:	2900      	cmp	r1, #0
   d8098:	d13a      	bne.n	d8110 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d809a:	6873      	ldr	r3, [r6, #4]
   d809c:	2b02      	cmp	r3, #2
   d809e:	d003      	beq.n	d80a8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d80a0:	2b0a      	cmp	r3, #10
   d80a2:	d011      	beq.n	d80c8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d80a4:	69f6      	ldr	r6, [r6, #28]
   d80a6:	e7f4      	b.n	d8092 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d80a8:	f1b8 0f00 	cmp.w	r8, #0
   d80ac:	d00a      	beq.n	d80c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d80ae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d80b0:	a806      	add	r0, sp, #24
   d80b2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d80b4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d80b6:	f7ff fb05 	bl	d76c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d80ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80bc:	1d3c      	adds	r4, r7, #4
   d80be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80c0:	682b      	ldr	r3, [r5, #0]
   d80c2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d80c4:	4641      	mov	r1, r8
   d80c6:	e7ed      	b.n	d80a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d80c8:	f1b9 0f00 	cmp.w	r9, #0
   d80cc:	d101      	bne.n	d80d2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d80ce:	4649      	mov	r1, r9
   d80d0:	e7e8      	b.n	d80a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d80d2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d80d4:	2210      	movs	r2, #16
   d80d6:	a801      	add	r0, sp, #4
   d80d8:	f000 fa64 	bl	d85a4 <memset>
                    a.v = 6;
   d80dc:	2306      	movs	r3, #6
   d80de:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d80e2:	ad01      	add	r5, sp, #4
   d80e4:	f104 0308 	add.w	r3, r4, #8
   d80e8:	3418      	adds	r4, #24
   d80ea:	6818      	ldr	r0, [r3, #0]
   d80ec:	6859      	ldr	r1, [r3, #4]
   d80ee:	462a      	mov	r2, r5
   d80f0:	c203      	stmia	r2!, {r0, r1}
   d80f2:	3308      	adds	r3, #8
   d80f4:	42a3      	cmp	r3, r4
   d80f6:	4615      	mov	r5, r2
   d80f8:	d1f7      	bne.n	d80ea <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d80fa:	a901      	add	r1, sp, #4
   d80fc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d80fe:	ad07      	add	r5, sp, #28
   d8100:	f7ff fa9e 	bl	d7640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8106:	1d3c      	adds	r4, r7, #4
   d8108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d810a:	682b      	ldr	r3, [r5, #0]
   d810c:	7023      	strb	r3, [r4, #0]
   d810e:	e7de      	b.n	d80ce <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8110:	9800      	ldr	r0, [sp, #0]
   d8112:	f7fe fc2d 	bl	d6970 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8116:	4638      	mov	r0, r7
   d8118:	b015      	add	sp, #84	; 0x54
   d811a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8120 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8120:	4b02      	ldr	r3, [pc, #8]	; (d812c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8122:	4a03      	ldr	r2, [pc, #12]	; (d8130 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8124:	601a      	str	r2, [r3, #0]
   d8126:	2200      	movs	r2, #0
   d8128:	605a      	str	r2, [r3, #4]

} // spark
   d812a:	4770      	bx	lr
   d812c:	2003e7cc 	.word	0x2003e7cc
   d8130:	000d9934 	.word	0x000d9934

000d8134 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8134:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8136:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8138:	d902      	bls.n	d8140 <pinAvailable+0xc>
    return false;
   d813a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d813c:	b002      	add	sp, #8
   d813e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8140:	f1a0 030b 	sub.w	r3, r0, #11
   d8144:	2b02      	cmp	r3, #2
   d8146:	d81a      	bhi.n	d817e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8148:	4c17      	ldr	r4, [pc, #92]	; (d81a8 <pinAvailable+0x74>)
   d814a:	7821      	ldrb	r1, [r4, #0]
   d814c:	f3bf 8f5b 	dmb	ish
   d8150:	f011 0101 	ands.w	r1, r1, #1
   d8154:	d10b      	bne.n	d816e <pinAvailable+0x3a>
   d8156:	4620      	mov	r0, r4
   d8158:	9101      	str	r1, [sp, #4]
   d815a:	f7fb ffad 	bl	d40b8 <__cxa_guard_acquire>
   d815e:	9901      	ldr	r1, [sp, #4]
   d8160:	b128      	cbz	r0, d816e <pinAvailable+0x3a>
   d8162:	4812      	ldr	r0, [pc, #72]	; (d81ac <pinAvailable+0x78>)
   d8164:	f7fe ff2c 	bl	d6fc0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8168:	4620      	mov	r0, r4
   d816a:	f7fb ffaa 	bl	d40c2 <__cxa_guard_release>
   d816e:	4b0f      	ldr	r3, [pc, #60]	; (d81ac <pinAvailable+0x78>)
   d8170:	7818      	ldrb	r0, [r3, #0]
   d8172:	f7fe fd95 	bl	d6ca0 <hal_spi_is_enabled>
   d8176:	2800      	cmp	r0, #0
   d8178:	d1df      	bne.n	d813a <pinAvailable+0x6>
  return true; // 'pin' is available
   d817a:	2001      	movs	r0, #1
   d817c:	e7de      	b.n	d813c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d817e:	2801      	cmp	r0, #1
   d8180:	d809      	bhi.n	d8196 <pinAvailable+0x62>
   d8182:	f000 f8a7 	bl	d82d4 <_Z19__fetch_global_Wirev>
   d8186:	2100      	movs	r1, #0
   d8188:	7c00      	ldrb	r0, [r0, #16]
   d818a:	f7fe fd31 	bl	d6bf0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d818e:	f080 0001 	eor.w	r0, r0, #1
   d8192:	b2c0      	uxtb	r0, r0
   d8194:	e7d2      	b.n	d813c <pinAvailable+0x8>
   d8196:	3809      	subs	r0, #9
   d8198:	2801      	cmp	r0, #1
   d819a:	d8ee      	bhi.n	d817a <pinAvailable+0x46>
   d819c:	f7ff fb7c 	bl	d7898 <_Z22__fetch_global_Serial1v>
   d81a0:	7c00      	ldrb	r0, [r0, #16]
   d81a2:	f7fe fccd 	bl	d6b40 <hal_usart_is_enabled>
   d81a6:	e7f2      	b.n	d818e <pinAvailable+0x5a>
   d81a8:	2003e644 	.word	0x2003e644
   d81ac:	2003e648 	.word	0x2003e648

000d81b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d81b0:	2823      	cmp	r0, #35	; 0x23
{
   d81b2:	b538      	push	{r3, r4, r5, lr}
   d81b4:	4604      	mov	r4, r0
   d81b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d81b8:	d80a      	bhi.n	d81d0 <pinMode+0x20>
   d81ba:	29ff      	cmp	r1, #255	; 0xff
   d81bc:	d008      	beq.n	d81d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d81be:	f7ff ffb9 	bl	d8134 <pinAvailable>
   d81c2:	b128      	cbz	r0, d81d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d81c4:	4629      	mov	r1, r5
   d81c6:	4620      	mov	r0, r4
}
   d81c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d81cc:	f7fe bbe8 	b.w	d69a0 <HAL_Pin_Mode>
}
   d81d0:	bd38      	pop	{r3, r4, r5, pc}

000d81d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d81d2:	b538      	push	{r3, r4, r5, lr}
   d81d4:	4604      	mov	r4, r0
   d81d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d81d8:	f7fe fbea 	bl	d69b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d81dc:	28ff      	cmp	r0, #255	; 0xff
   d81de:	d010      	beq.n	d8202 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d81e0:	2806      	cmp	r0, #6
   d81e2:	d804      	bhi.n	d81ee <digitalWrite+0x1c>
   d81e4:	234d      	movs	r3, #77	; 0x4d
   d81e6:	fa23 f000 	lsr.w	r0, r3, r0
   d81ea:	07c3      	lsls	r3, r0, #31
   d81ec:	d409      	bmi.n	d8202 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d81ee:	4620      	mov	r0, r4
   d81f0:	f7ff ffa0 	bl	d8134 <pinAvailable>
   d81f4:	b128      	cbz	r0, d8202 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d81f6:	4629      	mov	r1, r5
   d81f8:	4620      	mov	r0, r4
}
   d81fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d81fe:	f7fe bbdf 	b.w	d69c0 <HAL_GPIO_Write>
}
   d8202:	bd38      	pop	{r3, r4, r5, pc}

000d8204 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8204:	b510      	push	{r4, lr}
   d8206:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8208:	f7fe fbd2 	bl	d69b0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d820c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d820e:	b2db      	uxtb	r3, r3
   d8210:	2b01      	cmp	r3, #1
   d8212:	d908      	bls.n	d8226 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8214:	4620      	mov	r0, r4
   d8216:	f7ff ff8d 	bl	d8134 <pinAvailable>
   d821a:	b120      	cbz	r0, d8226 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d821c:	4620      	mov	r0, r4
}
   d821e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d8222:	f7fe bbd5 	b.w	d69d0 <HAL_GPIO_Read>
}
   d8226:	2000      	movs	r0, #0
   d8228:	bd10      	pop	{r4, pc}

000d822a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d822a:	280d      	cmp	r0, #13
{
   d822c:	b510      	push	{r4, lr}
   d822e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8230:	bf9c      	itt	ls
   d8232:	340e      	addls	r4, #14
   d8234:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8236:	4620      	mov	r0, r4
   d8238:	f7ff ff7c 	bl	d8134 <pinAvailable>
   d823c:	b150      	cbz	r0, d8254 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d823e:	2103      	movs	r1, #3
   d8240:	4620      	mov	r0, r4
   d8242:	f7fe fba5 	bl	d6990 <HAL_Validate_Pin_Function>
   d8246:	2803      	cmp	r0, #3
   d8248:	d104      	bne.n	d8254 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d824a:	4620      	mov	r0, r4
}
   d824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8250:	f7fe bbce 	b.w	d69f0 <hal_adc_read>
}
   d8254:	2000      	movs	r0, #0
   d8256:	bd10      	pop	{r4, pc}

000d8258 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d8258:	b538      	push	{r3, r4, r5, lr}
   d825a:	4604      	mov	r4, r0
   d825c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d825e:	f7ff ff69 	bl	d8134 <pinAvailable>
   d8262:	b1f0      	cbz	r0, d82a2 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d8264:	2104      	movs	r1, #4
   d8266:	4620      	mov	r0, r4
   d8268:	f7fe fb92 	bl	d6990 <HAL_Validate_Pin_Function>
   d826c:	2804      	cmp	r0, #4
   d826e:	d105      	bne.n	d827c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d8270:	b2a9      	uxth	r1, r5
   d8272:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d8274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d8278:	f7fe bbb2 	b.w	d69e0 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d827c:	2102      	movs	r1, #2
   d827e:	4620      	mov	r0, r4
   d8280:	f7fe fb86 	bl	d6990 <HAL_Validate_Pin_Function>
   d8284:	2802      	cmp	r0, #2
   d8286:	d10c      	bne.n	d82a2 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d8288:	4620      	mov	r0, r4
   d828a:	f7fe fb91 	bl	d69b0 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d828e:	2801      	cmp	r0, #1
   d8290:	d001      	beq.n	d8296 <_Z11analogWritetm+0x3e>
   d8292:	2804      	cmp	r0, #4
   d8294:	d105      	bne.n	d82a2 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d8296:	4629      	mov	r1, r5
   d8298:	4620      	mov	r0, r4
}
   d829a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d829e:	f7fe bbaf 	b.w	d6a00 <hal_pwm_write_ext>
}
   d82a2:	bd38      	pop	{r3, r4, r5, pc}

000d82a4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d82a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d82a6:	2300      	movs	r3, #0
   d82a8:	2520      	movs	r5, #32
   d82aa:	8043      	strh	r3, [r0, #2]
   d82ac:	2314      	movs	r3, #20
{
   d82ae:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d82b0:	8003      	strh	r3, [r0, #0]
   d82b2:	6085      	str	r5, [r0, #8]
   d82b4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82b6:	4906      	ldr	r1, [pc, #24]	; (d82d0 <_Z17acquireWireBufferv+0x2c>)
   d82b8:	4628      	mov	r0, r5
   d82ba:	f000 f83a 	bl	d8332 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82be:	4904      	ldr	r1, [pc, #16]	; (d82d0 <_Z17acquireWireBufferv+0x2c>)
	};
   d82c0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82c2:	4628      	mov	r0, r5
   d82c4:	f000 f835 	bl	d8332 <_ZnajRKSt9nothrow_t>
	};
   d82c8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d82ca:	4620      	mov	r0, r4
   d82cc:	bd38      	pop	{r3, r4, r5, pc}
   d82ce:	bf00      	nop
   d82d0:	000d9968 	.word	0x000d9968

000d82d4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d82d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82d6:	4d0f      	ldr	r5, [pc, #60]	; (d8314 <_Z19__fetch_global_Wirev+0x40>)
   d82d8:	7829      	ldrb	r1, [r5, #0]
   d82da:	f3bf 8f5b 	dmb	ish
   d82de:	f011 0401 	ands.w	r4, r1, #1
{
   d82e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82e4:	d113      	bne.n	d830e <_Z19__fetch_global_Wirev+0x3a>
   d82e6:	4628      	mov	r0, r5
   d82e8:	f7fb fee6 	bl	d40b8 <__cxa_guard_acquire>
   d82ec:	b178      	cbz	r0, d830e <_Z19__fetch_global_Wirev+0x3a>
   d82ee:	a801      	add	r0, sp, #4
   d82f0:	f7ff ffd8 	bl	d82a4 <_Z17acquireWireBufferv>
   d82f4:	aa01      	add	r2, sp, #4
   d82f6:	4621      	mov	r1, r4
   d82f8:	4807      	ldr	r0, [pc, #28]	; (d8318 <_Z19__fetch_global_Wirev+0x44>)
   d82fa:	f7ff fb23 	bl	d7944 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d82fe:	4628      	mov	r0, r5
   d8300:	f7fb fedf 	bl	d40c2 <__cxa_guard_release>
   d8304:	4a05      	ldr	r2, [pc, #20]	; (d831c <_Z19__fetch_global_Wirev+0x48>)
   d8306:	4906      	ldr	r1, [pc, #24]	; (d8320 <_Z19__fetch_global_Wirev+0x4c>)
   d8308:	4803      	ldr	r0, [pc, #12]	; (d8318 <_Z19__fetch_global_Wirev+0x44>)
   d830a:	f000 f80b 	bl	d8324 <__aeabi_atexit>
	return wire;
}
   d830e:	4802      	ldr	r0, [pc, #8]	; (d8318 <_Z19__fetch_global_Wirev+0x44>)
   d8310:	b007      	add	sp, #28
   d8312:	bd30      	pop	{r4, r5, pc}
   d8314:	2003e7d8 	.word	0x2003e7d8
   d8318:	2003e7dc 	.word	0x2003e7dc
   d831c:	2003e514 	.word	0x2003e514
   d8320:	000d78ed 	.word	0x000d78ed

000d8324 <__aeabi_atexit>:
   d8324:	460b      	mov	r3, r1
   d8326:	4601      	mov	r1, r0
   d8328:	4618      	mov	r0, r3
   d832a:	f000 b91f 	b.w	d856c <__cxa_atexit>

000d832e <_ZdlPvj>:
   d832e:	f7fb beb4 	b.w	d409a <_ZdlPv>

000d8332 <_ZnajRKSt9nothrow_t>:
   d8332:	f7fb beb0 	b.w	d4096 <_Znaj>
	...

000d8338 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8338:	4901      	ldr	r1, [pc, #4]	; (d8340 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d833a:	f000 b8f9 	b.w	d8530 <_ZNKSt9type_infoeqERKS_>
   d833e:	bf00      	nop
   d8340:	000d9984 	.word	0x000d9984

000d8344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8344:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8346:	2400      	movs	r4, #0
   d8348:	2310      	movs	r3, #16
   d834a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d834e:	6803      	ldr	r3, [r0, #0]
   d8350:	9400      	str	r4, [sp, #0]
   d8352:	699e      	ldr	r6, [r3, #24]
   d8354:	f88d 4004 	strb.w	r4, [sp, #4]
   d8358:	4615      	mov	r5, r2
   d835a:	466b      	mov	r3, sp
   d835c:	6812      	ldr	r2, [r2, #0]
   d835e:	47b0      	blx	r6
   d8360:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8364:	f003 0306 	and.w	r3, r3, #6
   d8368:	2b06      	cmp	r3, #6
   d836a:	bf03      	ittte	eq
   d836c:	9b00      	ldreq	r3, [sp, #0]
   d836e:	602b      	streq	r3, [r5, #0]
   d8370:	2001      	moveq	r0, #1
   d8372:	4620      	movne	r0, r4
   d8374:	b004      	add	sp, #16
   d8376:	bd70      	pop	{r4, r5, r6, pc}

000d8378 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8378:	9800      	ldr	r0, [sp, #0]
   d837a:	4290      	cmp	r0, r2
   d837c:	bf14      	ite	ne
   d837e:	2001      	movne	r0, #1
   d8380:	2006      	moveq	r0, #6
   d8382:	4770      	bx	lr

000d8384 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8384:	b510      	push	{r4, lr}
   d8386:	4b03      	ldr	r3, [pc, #12]	; (d8394 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8388:	6003      	str	r3, [r0, #0]
   d838a:	4604      	mov	r4, r0
   d838c:	f000 f8cd 	bl	d852a <_ZNSt9type_infoD1Ev>
   d8390:	4620      	mov	r0, r4
   d8392:	bd10      	pop	{r4, pc}
   d8394:	000d99c4 	.word	0x000d99c4

000d8398 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8398:	b510      	push	{r4, lr}
   d839a:	4604      	mov	r4, r0
   d839c:	f7ff fff2 	bl	d8384 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d83a0:	4620      	mov	r0, r4
   d83a2:	2108      	movs	r1, #8
   d83a4:	f7ff ffc3 	bl	d832e <_ZdlPvj>
   d83a8:	4620      	mov	r0, r4
   d83aa:	bd10      	pop	{r4, pc}

000d83ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d83ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d83b0:	461f      	mov	r7, r3
   d83b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d83b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d83ba:	4598      	cmp	r8, r3
   d83bc:	4606      	mov	r6, r0
   d83be:	4615      	mov	r5, r2
   d83c0:	d107      	bne.n	d83d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d83c2:	9907      	ldr	r1, [sp, #28]
   d83c4:	f000 f8b4 	bl	d8530 <_ZNKSt9type_infoeqERKS_>
   d83c8:	b118      	cbz	r0, d83d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d83ca:	7165      	strb	r5, [r4, #5]
   d83cc:	2000      	movs	r0, #0
   d83ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d83d2:	4639      	mov	r1, r7
   d83d4:	4630      	mov	r0, r6
   d83d6:	f000 f8ab 	bl	d8530 <_ZNKSt9type_infoeqERKS_>
   d83da:	2800      	cmp	r0, #0
   d83dc:	d0f6      	beq.n	d83cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d83de:	2301      	movs	r3, #1
   d83e0:	f8c4 8000 	str.w	r8, [r4]
   d83e4:	7125      	strb	r5, [r4, #4]
   d83e6:	71a3      	strb	r3, [r4, #6]
   d83e8:	e7f0      	b.n	d83cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d83ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d83ea:	b538      	push	{r3, r4, r5, lr}
   d83ec:	4615      	mov	r5, r2
   d83ee:	461c      	mov	r4, r3
   d83f0:	f000 f89e 	bl	d8530 <_ZNKSt9type_infoeqERKS_>
   d83f4:	b120      	cbz	r0, d8400 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d83f6:	2308      	movs	r3, #8
   d83f8:	60e3      	str	r3, [r4, #12]
   d83fa:	2306      	movs	r3, #6
   d83fc:	6025      	str	r5, [r4, #0]
   d83fe:	7123      	strb	r3, [r4, #4]
   d8400:	bd38      	pop	{r3, r4, r5, pc}

000d8402 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8402:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8404:	4605      	mov	r5, r0
   d8406:	460c      	mov	r4, r1
   d8408:	9201      	str	r2, [sp, #4]
   d840a:	461e      	mov	r6, r3
   d840c:	f000 f890 	bl	d8530 <_ZNKSt9type_infoeqERKS_>
   d8410:	b950      	cbnz	r0, d8428 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8412:	2e03      	cmp	r6, #3
   d8414:	d808      	bhi.n	d8428 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8416:	6823      	ldr	r3, [r4, #0]
   d8418:	9a01      	ldr	r2, [sp, #4]
   d841a:	695b      	ldr	r3, [r3, #20]
   d841c:	4629      	mov	r1, r5
   d841e:	4620      	mov	r0, r4
   d8420:	b002      	add	sp, #8
   d8422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8426:	4718      	bx	r3
   d8428:	b002      	add	sp, #8
   d842a:	bd70      	pop	{r4, r5, r6, pc}

000d842c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d842c:	b510      	push	{r4, lr}
   d842e:	4b03      	ldr	r3, [pc, #12]	; (d843c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8430:	6003      	str	r3, [r0, #0]
   d8432:	4604      	mov	r4, r0
   d8434:	f7ff ffa6 	bl	d8384 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8438:	4620      	mov	r0, r4
   d843a:	bd10      	pop	{r4, pc}
   d843c:	000d9a24 	.word	0x000d9a24

000d8440 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8440:	b510      	push	{r4, lr}
   d8442:	4604      	mov	r4, r0
   d8444:	f7ff fff2 	bl	d842c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8448:	4620      	mov	r0, r4
   d844a:	210c      	movs	r1, #12
   d844c:	f7ff ff6f 	bl	d832e <_ZdlPvj>
   d8450:	4620      	mov	r0, r4
   d8452:	bd10      	pop	{r4, pc}

000d8454 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8456:	9f08      	ldr	r7, [sp, #32]
   d8458:	4297      	cmp	r7, r2
   d845a:	4605      	mov	r5, r0
   d845c:	460e      	mov	r6, r1
   d845e:	4614      	mov	r4, r2
   d8460:	d00a      	beq.n	d8478 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8462:	68a8      	ldr	r0, [r5, #8]
   d8464:	6802      	ldr	r2, [r0, #0]
   d8466:	9708      	str	r7, [sp, #32]
   d8468:	6a15      	ldr	r5, [r2, #32]
   d846a:	4631      	mov	r1, r6
   d846c:	4622      	mov	r2, r4
   d846e:	46ac      	mov	ip, r5
   d8470:	b003      	add	sp, #12
   d8472:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8476:	4760      	bx	ip
   d8478:	4619      	mov	r1, r3
   d847a:	9301      	str	r3, [sp, #4]
   d847c:	f000 f858 	bl	d8530 <_ZNKSt9type_infoeqERKS_>
   d8480:	9b01      	ldr	r3, [sp, #4]
   d8482:	2800      	cmp	r0, #0
   d8484:	d0ed      	beq.n	d8462 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8486:	2006      	movs	r0, #6
   d8488:	b003      	add	sp, #12
   d848a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d848c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d848c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8490:	460d      	mov	r5, r1
   d8492:	4619      	mov	r1, r3
   d8494:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8498:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d849c:	4681      	mov	r9, r0
   d849e:	4617      	mov	r7, r2
   d84a0:	4698      	mov	r8, r3
   d84a2:	f000 f845 	bl	d8530 <_ZNKSt9type_infoeqERKS_>
   d84a6:	b190      	cbz	r0, d84ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d84a8:	2d00      	cmp	r5, #0
   d84aa:	6034      	str	r4, [r6, #0]
   d84ac:	7137      	strb	r7, [r6, #4]
   d84ae:	db09      	blt.n	d84c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d84b0:	1961      	adds	r1, r4, r5
   d84b2:	458a      	cmp	sl, r1
   d84b4:	bf0c      	ite	eq
   d84b6:	2106      	moveq	r1, #6
   d84b8:	2101      	movne	r1, #1
   d84ba:	71b1      	strb	r1, [r6, #6]
   d84bc:	2000      	movs	r0, #0
   d84be:	b001      	add	sp, #4
   d84c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d84c4:	3502      	adds	r5, #2
   d84c6:	d1f9      	bne.n	d84bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d84c8:	2301      	movs	r3, #1
   d84ca:	71b3      	strb	r3, [r6, #6]
   d84cc:	e7f6      	b.n	d84bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d84ce:	4554      	cmp	r4, sl
   d84d0:	d106      	bne.n	d84e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d84d2:	4659      	mov	r1, fp
   d84d4:	4648      	mov	r0, r9
   d84d6:	f000 f82b 	bl	d8530 <_ZNKSt9type_infoeqERKS_>
   d84da:	b108      	cbz	r0, d84e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d84dc:	7177      	strb	r7, [r6, #5]
   d84de:	e7ed      	b.n	d84bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d84e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d84e4:	6803      	ldr	r3, [r0, #0]
   d84e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d84ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d84ee:	69dc      	ldr	r4, [r3, #28]
   d84f0:	463a      	mov	r2, r7
   d84f2:	4643      	mov	r3, r8
   d84f4:	4629      	mov	r1, r5
   d84f6:	46a4      	mov	ip, r4
   d84f8:	b001      	add	sp, #4
   d84fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d84fe:	4760      	bx	ip

000d8500 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8504:	4607      	mov	r7, r0
   d8506:	460c      	mov	r4, r1
   d8508:	4615      	mov	r5, r2
   d850a:	461e      	mov	r6, r3
   d850c:	f7ff ff6d 	bl	d83ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8510:	b948      	cbnz	r0, d8526 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8512:	68b8      	ldr	r0, [r7, #8]
   d8514:	6803      	ldr	r3, [r0, #0]
   d8516:	699f      	ldr	r7, [r3, #24]
   d8518:	462a      	mov	r2, r5
   d851a:	4633      	mov	r3, r6
   d851c:	4621      	mov	r1, r4
   d851e:	46bc      	mov	ip, r7
   d8520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8524:	4760      	bx	ip
   d8526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d852a <_ZNSt9type_infoD1Ev>:
   d852a:	4770      	bx	lr

000d852c <_ZNKSt9type_info14__is_pointer_pEv>:
   d852c:	2000      	movs	r0, #0
   d852e:	4770      	bx	lr

000d8530 <_ZNKSt9type_infoeqERKS_>:
   d8530:	4281      	cmp	r1, r0
   d8532:	b508      	push	{r3, lr}
   d8534:	d00e      	beq.n	d8554 <_ZNKSt9type_infoeqERKS_+0x24>
   d8536:	6840      	ldr	r0, [r0, #4]
   d8538:	7803      	ldrb	r3, [r0, #0]
   d853a:	2b2a      	cmp	r3, #42	; 0x2a
   d853c:	d00c      	beq.n	d8558 <_ZNKSt9type_infoeqERKS_+0x28>
   d853e:	6849      	ldr	r1, [r1, #4]
   d8540:	780b      	ldrb	r3, [r1, #0]
   d8542:	2b2a      	cmp	r3, #42	; 0x2a
   d8544:	bf08      	it	eq
   d8546:	3101      	addeq	r1, #1
   d8548:	f000 f858 	bl	d85fc <strcmp>
   d854c:	fab0 f080 	clz	r0, r0
   d8550:	0940      	lsrs	r0, r0, #5
   d8552:	bd08      	pop	{r3, pc}
   d8554:	2001      	movs	r0, #1
   d8556:	e7fc      	b.n	d8552 <_ZNKSt9type_infoeqERKS_+0x22>
   d8558:	2000      	movs	r0, #0
   d855a:	e7fa      	b.n	d8552 <_ZNKSt9type_infoeqERKS_+0x22>

000d855c <atoi>:
   d855c:	220a      	movs	r2, #10
   d855e:	2100      	movs	r1, #0
   d8560:	f000 b8ec 	b.w	d873c <strtol>

000d8564 <atol>:
   d8564:	220a      	movs	r2, #10
   d8566:	2100      	movs	r1, #0
   d8568:	f000 b8e8 	b.w	d873c <strtol>

000d856c <__cxa_atexit>:
   d856c:	b510      	push	{r4, lr}
   d856e:	4c05      	ldr	r4, [pc, #20]	; (d8584 <__cxa_atexit+0x18>)
   d8570:	4613      	mov	r3, r2
   d8572:	b12c      	cbz	r4, d8580 <__cxa_atexit+0x14>
   d8574:	460a      	mov	r2, r1
   d8576:	4601      	mov	r1, r0
   d8578:	2002      	movs	r0, #2
   d857a:	f3af 8000 	nop.w
   d857e:	bd10      	pop	{r4, pc}
   d8580:	4620      	mov	r0, r4
   d8582:	e7fc      	b.n	d857e <__cxa_atexit+0x12>
   d8584:	00000000 	.word	0x00000000

000d8588 <memcpy>:
   d8588:	440a      	add	r2, r1
   d858a:	4291      	cmp	r1, r2
   d858c:	f100 33ff 	add.w	r3, r0, #4294967295
   d8590:	d100      	bne.n	d8594 <memcpy+0xc>
   d8592:	4770      	bx	lr
   d8594:	b510      	push	{r4, lr}
   d8596:	f811 4b01 	ldrb.w	r4, [r1], #1
   d859a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d859e:	4291      	cmp	r1, r2
   d85a0:	d1f9      	bne.n	d8596 <memcpy+0xe>
   d85a2:	bd10      	pop	{r4, pc}

000d85a4 <memset>:
   d85a4:	4402      	add	r2, r0
   d85a6:	4603      	mov	r3, r0
   d85a8:	4293      	cmp	r3, r2
   d85aa:	d100      	bne.n	d85ae <memset+0xa>
   d85ac:	4770      	bx	lr
   d85ae:	f803 1b01 	strb.w	r1, [r3], #1
   d85b2:	e7f9      	b.n	d85a8 <memset+0x4>

000d85b4 <srand>:
   d85b4:	b538      	push	{r3, r4, r5, lr}
   d85b6:	4b0d      	ldr	r3, [pc, #52]	; (d85ec <srand+0x38>)
   d85b8:	681d      	ldr	r5, [r3, #0]
   d85ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d85bc:	4604      	mov	r4, r0
   d85be:	b97b      	cbnz	r3, d85e0 <srand+0x2c>
   d85c0:	2018      	movs	r0, #24
   d85c2:	f7fe fc81 	bl	d6ec8 <malloc>
   d85c6:	4a0a      	ldr	r2, [pc, #40]	; (d85f0 <srand+0x3c>)
   d85c8:	4b0a      	ldr	r3, [pc, #40]	; (d85f4 <srand+0x40>)
   d85ca:	63a8      	str	r0, [r5, #56]	; 0x38
   d85cc:	e9c0 2300 	strd	r2, r3, [r0]
   d85d0:	4b09      	ldr	r3, [pc, #36]	; (d85f8 <srand+0x44>)
   d85d2:	6083      	str	r3, [r0, #8]
   d85d4:	230b      	movs	r3, #11
   d85d6:	8183      	strh	r3, [r0, #12]
   d85d8:	2201      	movs	r2, #1
   d85da:	2300      	movs	r3, #0
   d85dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d85e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d85e2:	2200      	movs	r2, #0
   d85e4:	611c      	str	r4, [r3, #16]
   d85e6:	615a      	str	r2, [r3, #20]
   d85e8:	bd38      	pop	{r3, r4, r5, pc}
   d85ea:	bf00      	nop
   d85ec:	2003e4b0 	.word	0x2003e4b0
   d85f0:	abcd330e 	.word	0xabcd330e
   d85f4:	e66d1234 	.word	0xe66d1234
   d85f8:	0005deec 	.word	0x0005deec

000d85fc <strcmp>:
   d85fc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8600:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8604:	2a01      	cmp	r2, #1
   d8606:	bf28      	it	cs
   d8608:	429a      	cmpcs	r2, r3
   d860a:	d0f7      	beq.n	d85fc <strcmp>
   d860c:	1ad0      	subs	r0, r2, r3
   d860e:	4770      	bx	lr

000d8610 <strlen>:
   d8610:	4603      	mov	r3, r0
   d8612:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8616:	2a00      	cmp	r2, #0
   d8618:	d1fb      	bne.n	d8612 <strlen+0x2>
   d861a:	1a18      	subs	r0, r3, r0
   d861c:	3801      	subs	r0, #1
   d861e:	4770      	bx	lr

000d8620 <strncpy>:
   d8620:	b510      	push	{r4, lr}
   d8622:	3901      	subs	r1, #1
   d8624:	4603      	mov	r3, r0
   d8626:	b132      	cbz	r2, d8636 <strncpy+0x16>
   d8628:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d862c:	f803 4b01 	strb.w	r4, [r3], #1
   d8630:	3a01      	subs	r2, #1
   d8632:	2c00      	cmp	r4, #0
   d8634:	d1f7      	bne.n	d8626 <strncpy+0x6>
   d8636:	441a      	add	r2, r3
   d8638:	2100      	movs	r1, #0
   d863a:	4293      	cmp	r3, r2
   d863c:	d100      	bne.n	d8640 <strncpy+0x20>
   d863e:	bd10      	pop	{r4, pc}
   d8640:	f803 1b01 	strb.w	r1, [r3], #1
   d8644:	e7f9      	b.n	d863a <strncpy+0x1a>
	...

000d8648 <_strtol_l.isra.0>:
   d8648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d864c:	4e3a      	ldr	r6, [pc, #232]	; (d8738 <_strtol_l.isra.0+0xf0>)
   d864e:	4686      	mov	lr, r0
   d8650:	468c      	mov	ip, r1
   d8652:	4660      	mov	r0, ip
   d8654:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8658:	5da5      	ldrb	r5, [r4, r6]
   d865a:	f015 0508 	ands.w	r5, r5, #8
   d865e:	d1f8      	bne.n	d8652 <_strtol_l.isra.0+0xa>
   d8660:	2c2d      	cmp	r4, #45	; 0x2d
   d8662:	d133      	bne.n	d86cc <_strtol_l.isra.0+0x84>
   d8664:	f89c 4000 	ldrb.w	r4, [ip]
   d8668:	f04f 0801 	mov.w	r8, #1
   d866c:	f100 0c02 	add.w	ip, r0, #2
   d8670:	2b00      	cmp	r3, #0
   d8672:	d05c      	beq.n	d872e <_strtol_l.isra.0+0xe6>
   d8674:	2b10      	cmp	r3, #16
   d8676:	d10c      	bne.n	d8692 <_strtol_l.isra.0+0x4a>
   d8678:	2c30      	cmp	r4, #48	; 0x30
   d867a:	d10a      	bne.n	d8692 <_strtol_l.isra.0+0x4a>
   d867c:	f89c 0000 	ldrb.w	r0, [ip]
   d8680:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8684:	2858      	cmp	r0, #88	; 0x58
   d8686:	d14d      	bne.n	d8724 <_strtol_l.isra.0+0xdc>
   d8688:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d868c:	2310      	movs	r3, #16
   d868e:	f10c 0c02 	add.w	ip, ip, #2
   d8692:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8696:	3f01      	subs	r7, #1
   d8698:	2600      	movs	r6, #0
   d869a:	fbb7 f9f3 	udiv	r9, r7, r3
   d869e:	4630      	mov	r0, r6
   d86a0:	fb03 7a19 	mls	sl, r3, r9, r7
   d86a4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d86a8:	2d09      	cmp	r5, #9
   d86aa:	d818      	bhi.n	d86de <_strtol_l.isra.0+0x96>
   d86ac:	462c      	mov	r4, r5
   d86ae:	42a3      	cmp	r3, r4
   d86b0:	dd24      	ble.n	d86fc <_strtol_l.isra.0+0xb4>
   d86b2:	1c75      	adds	r5, r6, #1
   d86b4:	d007      	beq.n	d86c6 <_strtol_l.isra.0+0x7e>
   d86b6:	4581      	cmp	r9, r0
   d86b8:	d31d      	bcc.n	d86f6 <_strtol_l.isra.0+0xae>
   d86ba:	d101      	bne.n	d86c0 <_strtol_l.isra.0+0x78>
   d86bc:	45a2      	cmp	sl, r4
   d86be:	db1a      	blt.n	d86f6 <_strtol_l.isra.0+0xae>
   d86c0:	fb00 4003 	mla	r0, r0, r3, r4
   d86c4:	2601      	movs	r6, #1
   d86c6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d86ca:	e7eb      	b.n	d86a4 <_strtol_l.isra.0+0x5c>
   d86cc:	2c2b      	cmp	r4, #43	; 0x2b
   d86ce:	bf08      	it	eq
   d86d0:	f89c 4000 	ldrbeq.w	r4, [ip]
   d86d4:	46a8      	mov	r8, r5
   d86d6:	bf08      	it	eq
   d86d8:	f100 0c02 	addeq.w	ip, r0, #2
   d86dc:	e7c8      	b.n	d8670 <_strtol_l.isra.0+0x28>
   d86de:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d86e2:	2d19      	cmp	r5, #25
   d86e4:	d801      	bhi.n	d86ea <_strtol_l.isra.0+0xa2>
   d86e6:	3c37      	subs	r4, #55	; 0x37
   d86e8:	e7e1      	b.n	d86ae <_strtol_l.isra.0+0x66>
   d86ea:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d86ee:	2d19      	cmp	r5, #25
   d86f0:	d804      	bhi.n	d86fc <_strtol_l.isra.0+0xb4>
   d86f2:	3c57      	subs	r4, #87	; 0x57
   d86f4:	e7db      	b.n	d86ae <_strtol_l.isra.0+0x66>
   d86f6:	f04f 36ff 	mov.w	r6, #4294967295
   d86fa:	e7e4      	b.n	d86c6 <_strtol_l.isra.0+0x7e>
   d86fc:	1c73      	adds	r3, r6, #1
   d86fe:	d106      	bne.n	d870e <_strtol_l.isra.0+0xc6>
   d8700:	2322      	movs	r3, #34	; 0x22
   d8702:	f8ce 3000 	str.w	r3, [lr]
   d8706:	4638      	mov	r0, r7
   d8708:	b942      	cbnz	r2, d871c <_strtol_l.isra.0+0xd4>
   d870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d870e:	f1b8 0f00 	cmp.w	r8, #0
   d8712:	d000      	beq.n	d8716 <_strtol_l.isra.0+0xce>
   d8714:	4240      	negs	r0, r0
   d8716:	2a00      	cmp	r2, #0
   d8718:	d0f7      	beq.n	d870a <_strtol_l.isra.0+0xc2>
   d871a:	b10e      	cbz	r6, d8720 <_strtol_l.isra.0+0xd8>
   d871c:	f10c 31ff 	add.w	r1, ip, #4294967295
   d8720:	6011      	str	r1, [r2, #0]
   d8722:	e7f2      	b.n	d870a <_strtol_l.isra.0+0xc2>
   d8724:	2430      	movs	r4, #48	; 0x30
   d8726:	2b00      	cmp	r3, #0
   d8728:	d1b3      	bne.n	d8692 <_strtol_l.isra.0+0x4a>
   d872a:	2308      	movs	r3, #8
   d872c:	e7b1      	b.n	d8692 <_strtol_l.isra.0+0x4a>
   d872e:	2c30      	cmp	r4, #48	; 0x30
   d8730:	d0a4      	beq.n	d867c <_strtol_l.isra.0+0x34>
   d8732:	230a      	movs	r3, #10
   d8734:	e7ad      	b.n	d8692 <_strtol_l.isra.0+0x4a>
   d8736:	bf00      	nop
   d8738:	000d9a5e 	.word	0x000d9a5e

000d873c <strtol>:
   d873c:	4613      	mov	r3, r2
   d873e:	460a      	mov	r2, r1
   d8740:	4601      	mov	r1, r0
   d8742:	4802      	ldr	r0, [pc, #8]	; (d874c <strtol+0x10>)
   d8744:	6800      	ldr	r0, [r0, #0]
   d8746:	f7ff bf7f 	b.w	d8648 <_strtol_l.isra.0>
   d874a:	bf00      	nop
   d874c:	2003e4b0 	.word	0x2003e4b0

000d8750 <dynalib_user>:
   d8750:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d8760:	00000000 25007325 6c250069 736b0069     ....%s.%i.%li.ks
   d8770:	6e690061 74756f00 6d777000 00776400     a.in.out.pwm.dw.
   d8780:	63007761 50486274 4c5a6539 6d76556e     aw.ctbHP9eZLnUvm
   d8790:	717a586a 4179676e 4e33634b 4a645a6a     jXzqngyAKc3NjZdJ
   d87a0:	0031644b 73657270 20646573 72700041     Kd1.pressed A.pr
   d87b0:	65737365 00422064 73657270 20646573     essed B.pressed 
   d87c0:	616c0043 68742e62 6c637765 6d6f632e     C.lab.thewcl.com
	...

000d87d1 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d87d1:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d87e1:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d87f1:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d8801:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d8811:	32203920 20313230 333a3531 36303a34      9 2021 15:34:06
   d8821:	00000000 54514d04 06000454 7349514d     .....MQTT...MQIs
   d8831:	64037064 75616665 0020746c 0042534d     dp.default .MSB.
   d8841:	0042534c 4950533c 74746553 73676e69     LSB.<SPISettings
   d8851:	66656420 746c7561 533c003e 65534950      default>.<SPISe
   d8861:	6e697474 25207367 20752573 4d207325     ttings %s%u %s M
   d8871:	2545444f                                 ODE%u>.

000d8878 <_ZL4font>:
   d8878:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d8888:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d8898:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d88a8:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d88b8:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d88c8:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d88d8:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d88e8:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d88f8:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d8908:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d8918:	00000000 5f000000 07000000 14000700     ......._........
   d8928:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d8938:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d8948:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d8958:	08080800 00000808 20006060 02040810     ........``. ....
   d8968:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d8978:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d8988:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d8998:	00001e29 00000014 00003440 22140800     ).......@4....."
   d89a8:	14141441 41001414 02081422 06095901     A......A"....Y..
   d89b8:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d89c8:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d89d8:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d89e8:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d89f8:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d8a08:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d8a18:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d8a28:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d8a38:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d8a48:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d8a58:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d8a68:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d8a78:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d8a88:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d8a98:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d8aa8:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d8ab8:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d8ac8:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d8ad8:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d8ae8:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d8af8:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d8b08:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   d8b18:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d8b28:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d8b38:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   d8b48:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d8b58:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   d8b68:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   d8b78:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   d8b88:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d8b98:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d8ba8:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d8bb8:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d8bc8:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d8bd8:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d8be8:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   d8bf8:	00ff0000 ff101010 14141400 101000ff     ................
   d8c08:	10ff00ff f010f010 fc141414 f7141400     ................
   d8c18:	0000ff00 14ff00ff fc04f414 10171414     ................
   d8c28:	1f10101f 14141f10 10001f14 00f01010     ................
   d8c38:	1f000000 10101010 1010101f 0010f010     ................
   d8c48:	10ff0000 10101010 10101010 000010ff     ................
   d8c58:	0014ff00 ff00ff00 101f0000 fc000017     ................
   d8c68:	1414f404 14171017 f404f414 00ff0000     ................
   d8c78:	141414f7 14141414 14f700f7 14171414     ................
   d8c88:	101f1010 1414141f 101014f4 00f010f0     ................
   d8c98:	1f101f00 1f000000 00000014 000014fc     ................
   d8ca8:	10f010f0 ff10ff10 ff141414 10101014     ................
   d8cb8:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   d8cc8:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   d8cd8:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   d8ce8:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   d8cf8:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   d8d08:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   d8d18:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   d8d28:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   d8d38:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   d8d48:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   d8d58:	00000018 30001010 0101ff40 01011f00     .......0@.......
   d8d68:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000d8d78 <_ZTV12Adafruit_GFX>:
	...
   d8d88:	000d5d29 000d72b9 000d40a5 000d5731     )]...r...@..1W..
   d8d98:	000d5733 000d5765 000d5741 000d5753     3W..eW..AW..SW..
   d8da8:	000d5675 000d5731 000d595d 000d58d7     uV..1W..]Y...X..
   d8db8:	000d577d 000d57bb 000d57f5 000d583b     }W...W...W..;X..
   d8dc8:	000d58d9 000d5857                       .X..WX..

000d8dd0 <_ZTV16OledWingAdafruit>:
	...
   d8dd8:	000d5e39 000d5e59 000d5d29 000d72b9     9^..Y^..)]...r..
   d8de8:	000d6069 000d5731 000d5733 000d5765     i`..1W..3W..eW..
   d8df8:	000d5741 000d5753 000d5675 000d5731     AW..SW..uV..1W..
   d8e08:	000d595d 000d6223 000d67b7 000d6769     ]Y..#b...g..ig..
   d8e18:	000d57f5 000d583b 000d58d9 000d5857     .W..;X...X..WX..

000d8e28 <_ZTVN8particle11SPISettingsE>:
	...
   d8e30:	000d5621 000d5611 000d5613              !V...V...V..

000d8e3c <_ZL12splash1_data>:
   d8e3c:	00000000 00800100 00000000 00000000     ................
   d8e4c:	00008003 00000000 07000000 000000c0     ................
   d8e5c:	00000000 c0070000 00000000 00000000     ................
   d8e6c:	00c00f00 00000000 00000000 0000e01f     ................
   d8e7c:	00000000 1f000000 000000e0 00000000     ................
   d8e8c:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   d8ea4:	0000f07f 00000000 7ff81f00 000000f0     ................
   d8eb4:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   d8ec4:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   d8ed4:	00000000 f9ff0f00 0000c0ff 00000000     ................
   d8ee4:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   d8ef4:	00000000 fc030000 80ffff73 00000000     ........s.......
   d8f04:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   d8f14:	000000ff 00000000 fc1ffe7f 00000000     ................
   d8f24:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   d8f34:	0000e0ff 00000000 ff191f00 000000c0     ................
   d8f44:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   d8f54:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   d8f64:	00000000 fcffff00 00000000 00000000     ................
   d8f74:	00feffff 00000000 ff000000 0000feff     ................
   d8f84:	00000000 efff0100 000000fe 00000000     ................
   d8f94:	fecfff01 00000000 03000000 00fe07ff     ................
   d8fa4:	00000000 fc030000 0000fe07 00000000     ................
   d8fb4:	03f00300 000000fe 00000000 fe008001     ................
	...
   d8fcc:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   d8fe4:	0000000c 07000000 00fc0080 00c00300     ................
   d8ff4:	80070000 0000fc01 0000c003 01800700     ................
   d9004:	030000fc 000000c0 e0018007 1e000000     ................
   d9014:	07000000 00e00180 001e0000 9ff7e37f     ................
   d9024:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   d9034:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   d9044:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   d9054:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   d9064:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   d9074:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   d9084:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   d9094:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   d90a4:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   d90b4:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   d90c4:	ffffff00 ffffffff c0ffffff ffffffff     ................
   d90d4:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   d90e4:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   d90f4:	5b6bfdff c0fd6adb                       ..k[.j..

000d90fc <_ZL12splash2_data>:
   d90fc:	00600000 00000000 00000000 00000000     ..`.............
   d910c:	0000e000 00000000 00000000 01000000     ................
   d911c:	000000e0 00000000 00000000 f0010000     ................
	...
   d9138:	00f00300 00000000 00000000 00000000     ................
   d9148:	0000f007 00000000 00000000 07000000     ................
   d9158:	000000f8 00000000 00000000 f80f0000     ................
   d9168:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   d9178:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   d9188:	00c00300 010000fe ffff00e0 000000f8     ................
   d9198:	f000c003 0f000000 7ffe7f00 030000c0     ................
   d91a8:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   d91b8:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   d91c8:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   d91d8:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   d91e8:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   d91f8:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   d9208:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   d9218:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   d9228:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   d9238:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   d9248:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   d9258:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   d9268:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   d9278:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   d9290:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   d92a0:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   d92b0:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   d92c0:	ff7f000f a5feffff 198d9dad 060000e0     ................
   d92d0:	ffff7f00 adb5feff e07eb5ed              ..........~.

000d92dc <_ZTV16Adafruit_SSD1306>:
	...
   d92e4:	000d603d 000d6055 000d5d29 000d72b9     =`..U`..)]...r..
   d92f4:	000d6069 000d5731 000d5733 000d5765     i`..1W..3W..eW..
   d9304:	000d5741 000d5753 000d5675 000d5731     AW..SW..uV..1W..
   d9314:	000d595d 000d6223 000d67b7 000d6769     ]Y..#b...g..ig..
   d9324:	000d57f5 000d583b 000d58d9 000d5857     .W..;X...X..WX..

000d9334 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d9334:	e0c08000 fefcf8f0                       ........

000d933c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d933c:	07030100 7f3f1f0f                       ......?.

000d9344 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d9344:	a880d5ae                                ....

000d9348 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d9348:	8d4000d3                                ..@.

000d934c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d934c:	c8a10020                                 ...

000d9350 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d9350:	a6a440db                                 .@....

000d9356 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d9356:	8f8102da                                ....

000d935a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d935a:	                                         ...

000d935d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d935d:	                                         ...

000d9360 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d9360:	21ff0022 00000000                       "..!....

000d9368 <_ZL22BlynkReadHandlerVector>:
   d9368:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9378:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9388:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9398:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d93a8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d93b8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d93c8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d93d8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d93e8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d93f8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9408:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9418:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9428:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9438:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9448:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9458:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9468:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9478:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9488:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9498:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d94a8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d94b8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d94c8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d94d8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d94e8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d94f8:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9508:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9518:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9528:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9538:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9548:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..
   d9558:	000d6941 000d6941 000d6941 000d6941     Ai..Ai..Ai..Ai..

000d9568 <_ZL23BlynkWriteHandlerVector>:
   d9568:	000d6943 000d4265 000d6943 000d6943     Ci..eB..Ci..Ci..
   d9578:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9588:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9598:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d95a8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d95b8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d95c8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d95d8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d95e8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d95f8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9608:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9618:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9628:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9638:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9648:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9658:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9668:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9678:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9688:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9698:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d96a8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d96b8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d96c8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d96d8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d96e8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d96f8:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9708:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9718:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9728:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9738:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9748:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..
   d9758:	000d6943 000d6943 000d6943 000d6943     Ci..Ci..Ci..Ci..

000d9768 <_ZTVN5spark13EthernetClassE>:
	...
   d9770:	000d6f97 000d6f8d 000d6f83 000d6f79     .o...o...o..yo..
   d9780:	000d6f6d 000d6f61 000d8009 000d8011     mo..ao..........
   d9790:	000d6f55 000d6f4d 000d6f43 000d6f39     Uo..Mo..Co..9o..
   d97a0:	000d8041                                A...

000d97a4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d97a4:	18100800 38302820                       .... (08

000d97ac <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d97b4:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d97c4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d97d4 <_ZTV9IPAddress>:
	...
   d97dc:	000d75c1 000d75b1 000d75b3              .u...u...u..

000d97e8 <_ZTV9USBSerial>:
	...
   d97f0:	000d76e5 000d774d 000d7723 000d72b9     .v..Mw..#w...r..
   d9800:	000d7715 000d76e7 000d76f7 000d7747     .w...v...v..Gw..
   d9810:	000d7707 000d76e1                       .w...v..

000d9818 <_ZTV11USARTSerial>:
	...
   d9820:	000d77f1 000d785d 000d7835 000d72b9     .w..]x..5x...r..
   d9830:	000d7805 000d7821 000d7813 000d782f     .x..!x...x../x..
   d9840:	000d77f3 000d77f7                       .w...w..

000d9848 <_ZTV7TwoWire>:
	...
   d9850:	000d78ed 000d7937 000d790f 000d78ef     .x..7y...y...x..
   d9860:	000d7917 000d791f 000d7927 000d792f     .y...y..'y../y..
   d9870:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d9880:	203d2072 00006425                       r = %d..

000d9888 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9890:	000d7a1b 000d7a3d 000d7e57 000d7a4b     .z..=z..W~..Kz..
   d98a0:	000d7a1d                                .z..

000d98a4 <_ZTV9TCPClient>:
	...
   d98ac:	000d7ac9 000d7afd 000d7999 000d79b3     .z...z...y...y..
   d98bc:	000d7ced 000d7b5f 000d7b31 000d79dd     .|.._{..1{...y..
   d98cc:	000d7bf7 000d7e5d 000d7b93 000d7da1     .{..]~...{...}..
   d98dc:	000d79df 000d7a11 000d79c5 000d7a4f     .y...z...y..Oz..
   d98ec:	000d7b11                                .{..

000d98f0 <_ZTVN5spark9WiFiClassE>:
	...
   d98f8:	000d7fab 000d7fa1 000d7f97 000d7f59     ............Y...
   d9908:	000d742d 000d7f8b 000d8009 000d8011     -t..............
   d9918:	000d7f7f 000d7f77 000d7f6d 000d7f63     ....w...m...c...
   d9928:	000d8041                                A...

000d992c <_ZTVN5spark12NetworkClassE>:
	...
   d9934:	000d7fc9 000d7fd3 000d7fdd 000d7fe7     ................
   d9944:	000d7ff1 000d7ffd 000d8009 000d8011     ................
   d9954:	000d8019 000d8025 000d802d 000d8037     ....%...-...7...
   d9964:	000d8041                                A...

000d9968 <_ZSt7nothrow>:
	...

000d9969 <_ZTSSt19_Sp_make_shared_tag>:
   d9969:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d9979:	5f646572 00676174                        red_tag....

000d9984 <_ZTISt19_Sp_make_shared_tag>:
   d9984:	000d99c4 000d9969                       ....i...

000d998c <_ZTIN10__cxxabiv117__class_type_infoE>:
   d998c:	000d9a24 000d9998 000d9a48              $.......H...

000d9998 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9998:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d99a8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d99b8:	00000045                                E...

000d99bc <_ZTVN10__cxxabiv117__class_type_infoE>:
   d99bc:	00000000 000d998c 000d8385 000d8399     ................
   d99cc:	000d852d 000d852d 000d8403 000d8345     -...-.......E...
   d99dc:	000d83eb 000d83ad 000d8379              ........y...

000d99e8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d99e8:	000d9a24 000d99f4 000d998c              $...........

000d99f4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d99f4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d9a04:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d9a14:	456f666e 00000000                       nfoE....

000d9a1c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9a1c:	00000000 000d99e8 000d842d 000d8441     ........-...A...
   d9a2c:	000d852d 000d852d 000d8403 000d8345     -...-.......E...
   d9a3c:	000d8501 000d848d 000d8455              ........U...

000d9a48 <_ZTISt9type_info>:
   d9a48:	000d99c4 000d9a50                       ....P...

000d9a50 <_ZTSSt9type_info>:
   d9a50:	74397453 5f657079 6f666e69               St9type_info.

000d9a5d <_ctype_>:
   d9a5d:	20202000 20202020 28282020 20282828     .         ((((( 
   d9a6d:	20202020 20202020 20202020 20202020                     
   d9a7d:	10108820 10101010 10101010 10101010      ...............
   d9a8d:	04040410 04040404 10040404 10101010     ................
   d9a9d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9aad:	01010101 01010101 01010101 10101010     ................
   d9abd:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9acd:	02020202 02020202 02020202 10101010     ................
   d9add:	00000020 00000000 00000000 00000000      ...............
	...

000d9b5e <link_const_variable_data_end>:
	...

000d9b60 <link_constructors_location>:
   d9b60:	000d4c45 	.word	0x000d4c45
   d9b64:	000d6fa1 	.word	0x000d6fa1
   d9b68:	000d7131 	.word	0x000d7131
   d9b6c:	000d7291 	.word	0x000d7291
   d9b70:	000d7439 	.word	0x000d7439
   d9b74:	000d7449 	.word	0x000d7449
   d9b78:	000d7471 	.word	0x000d7471
   d9b7c:	000d7fb5 	.word	0x000d7fb5
   d9b80:	000d8121 	.word	0x000d8121

000d9b84 <link_constructors_end>:
	...
